{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","createActivePoint","center","fireBomb","maxEdge","fireVerticalLaser","fireMovingVerticalLaser","createPassivePoint","fireMovingHorizontalLaser","console","log","increaseLevel","levelOne","currentLevel","error","levelTwo","gameState","i","currentTimeouts","length","clearTimeout","splice","updateAllObjects","allObjects","rejectInstances","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","diplayingGameOverScreen","resumeGame","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","instanceAffecting","instanceAffectingObjectArray","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","y","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","push","instanceIndex","indexOf","ActivePoint","activePoints","resolveInstances","HorizontalLaser","horizontalLasers","fireHorizontalLaser","VerticalLaser","verticalLasers","speed","MovingHorizontalLaser","movingHorizontalLasers","MovingVerticalLaser","movingVerticalLasers","Bomb","bombs","getContext","lineWidth","keysDown","permanentPoints","currentLevelPoints","xInput","yInput","colliding","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","waitingTimeouts","collidingInstances","Player","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","blockieX","blockieY","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","setInterval","resetAllowDashAgain","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","Math","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","fillStyle","fillRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","min","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","checkCollisionsWithClass","classArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":";;AA0OA;;uEACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEQA,wCAAgBC,OAAOC,KAAP,GAAe,CAAf,GAAmBC,QAAQD,KAAR,GAAgB,CAAnD,EAAsDD,OAAOG,MAAP,GAAgB,CAAhB,GAAoBD,QAAQC,MAAR,GAAiB,CAA3F;;AAFR;AAAA,+BAIcC,QAAQC,GAAR,CAAY,CACdC,kBAAkB,KAAK,EAAvB,EAA2BC,SAAS,CAApC,EAAuC,CAAvC,EAA0C,GAA1C,CADc,EAEdC,SAAS,CAAT,EAAY,IAAI,EAAJ,GAAS,CAArB,EAAwBC,UAAU,CAAlC,EAAqC,KAAK,EAAL,GAAU,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAFc,EAGdD,SAAS,CAAT,EAAY,KAAK,EAAL,GAAU,CAAtB,EAAyBC,UAAU,CAAnC,EAAsC,KAAK,EAAL,GAAU,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,CAHc,CAAZ,CAJd;;AAAA;AAAA;AAAA,+BAUcL,QAAQC,GAAR,CAAY,CACdC,kBAAkB,IAAI,EAAtB,EAA0BC,SAAS,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,CADc,EAEdC,SAAS,CAAT,EAAY,IAAI,EAAJ,GAAS,CAArB,EAAwBC,UAAU,CAAlC,EAAqC,KAAK,EAAL,GAAU,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAFc,EAGdD,SAAS,CAAT,EAAY,KAAK,EAAL,GAAU,CAAtB,EAAyBC,UAAU,CAAnC,EAAsC,KAAK,EAAL,GAAU,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,CAHc,EAIdC,kBAAkB,KAAK,EAAL,GAAU,CAA5B,EAA+B,EAA/B,EAAmC,CAAnC,EAAsC,CAAtC,CAJc,CAAZ,CAVd;;AAAA;AAAA;AAAA,+BAiBcN,QAAQC,GAAR,CAAY,CACdC,kBAAkB,KAAK,EAAvB,EAA2BC,SAAS,CAApC,EAAuC,CAAvC,EAA0C,CAA1C,CADc,EAEdC,SAAS,CAAT,EAAY,IAAI,EAAJ,GAAS,CAArB,EAAwBC,UAAU,CAAlC,EAAqC,KAAK,EAAL,GAAU,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAFc,EAGdD,SAAS,CAAT,EAAY,KAAK,EAAL,GAAU,CAAtB,EAAyBC,UAAU,CAAnC,EAAsC,KAAK,EAAL,GAAU,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,CAHc,EAKdE,wBAAwB,KAAK,EAA7B,EAAiC,EAAjC,EAAqC,CAAC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,CALc,CAAZ,CAjBd;;AAAA;AAAA;AAAA,+BAyBcP,QAAQC,GAAR,CAAY,CACdO,mBAAmB,IAAI,EAAJ,GAAS,EAA5B,EAAgCL,SAAS,CAAzC,EAA4C,CAA5C,EAA+C,EAA/C,CADc,EAEdK,mBAAmBL,SAAS,CAA5B,EAA+B,IAAI,EAAJ,GAAS,EAAxC,EAA4C,CAA5C,EAA+C,EAA/C,CAFc,EAGdD,kBAAkBC,SAAS,CAA3B,EAA8B,KAAK,EAAL,GAAU,EAAxC,EAA4C,CAA5C,EAA+C,EAA/C,CAHc,EAIdC,SAAS,IAAI,EAAJ,GAAS,CAAlB,EAAqB,IAAI,EAAJ,GAAS,CAA9B,EAAiC,KAAK,EAAL,GAAU,CAA3C,EAA8C,KAAK,EAAL,GAAU,CAAxD,EAA2D,CAA3D,EAA8D,EAA9D,CAJc,EAKdA,SAAS,IAAI,EAAJ,GAAS,CAAlB,EAAqB,KAAK,EAAL,GAAU,CAA/B,EAAkC,KAAK,EAAL,GAAU,CAA5C,EAA+C,KAAK,EAAL,GAAU,CAAzD,EAA4D,CAA5D,EAA+D,EAA/D,CALc,EAMdA,SAAS,KAAK,EAAL,GAAU,CAAnB,EAAsB,IAAI,EAAJ,GAAS,CAA/B,EAAkC,KAAK,EAAL,GAAU,CAA5C,EAA+C,KAAK,EAAL,GAAU,CAAzD,EAA4D,CAA5D,EAA+D,EAA/D,CANc,EAOdA,SAAS,KAAK,EAAL,GAAU,CAAnB,EAAsB,KAAK,EAAL,GAAU,CAAhC,EAAmC,KAAK,EAAL,GAAU,CAA7C,EAAgD,KAAK,EAAL,GAAU,CAA1D,EAA6D,CAA7D,EAAgE,EAAhE,CAPc,EAQdG,wBAAwB,CAAxB,EAA2B,EAA3B,EAA+B,GAA/B,EAAoC,CAApC,EAAuC,CAAvC,CARc,EAUdA,wBAAwB,CAAxB,EAA2B,EAA3B,EAA+B,GAA/B,EAAoC,CAApC,EAAuC,CAAvC,CAVc,EAYdE,0BAA0B,CAA1B,EAA6B,EAA7B,EAAiC,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC,CAZc,EAcdA,0BAA0B,CAA1B,EAA6B,EAA7B,EAAiC,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC,CAdc,EAgBdA,0BAA0BJ,UAAU,EAApC,EAAwC,EAAxC,EAA4C,CAAC,GAA7C,EAAkD,CAAlD,EAAqD,CAArD,CAhBc,EAkBdI,0BAA0BJ,UAAU,EAApC,EAAwC,EAAxC,EAA4C,CAAC,GAA7C,EAAkD,EAAlD,EAAsD,CAAtD,CAlBc,CAAZ,CAzBd;;AAAA;;AA8CQK,gCAAQC,GAAR,CAAY,oBAAZ;AACAC;AA/CR;AAAA;;AAAA;AAAA;AAAA;;AAiDQF,gCAAQC,GAAR,CAAY,oBAAZ;;AAjDR;AAkDK;;AAlDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeE,Q;;;;;AAqDf;;wEACA;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI;;AAGAH,oCAAQC,GAAR,CAAY,oBAAZ;AACAG;AACH,yBALD,CAKE,OAAOC,KAAP,EAAc;AACZL,oCAAQC,GAAR,CAAY,oBAAZ;AACH;;AARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,Q;;;;;AA2Bf;;wEACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIC,oCAAY,iBAAZ;;AAEA;AACA,6BAASC,CAAT,GAAa,CAAb,EAAgBA,IAAIC,gBAAgBC,MAApC,EAA4CF,GAA5C,EAAiD;AAC7CG,yCAAaF,gBAAgBD,CAAhB,CAAb;AACH;;AAEDC,wCAAgBG,MAAhB,CAAuB,CAAvB;;AAEAC;AACA,6BAASL,EAAT,GAAa,CAAb,EAAgBA,KAAIM,WAAWJ,MAA/B,EAAuCF,IAAvC,EAA4C;AACxCO,4CAAgBD,WAAWN,EAAX,CAAhB;AACH;;AAEDpB,gCAAQ4B,KAAR,GAAgB,aAAhB;AACA5B,gCAAQ6B,EAAR,GAAa,CAAb;;AAhBJ;AAAA,+BAkBU,IAAI3B,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIC,qBAAqBC,WAAW,YAAM;AACtC;AACAC,wCAAQC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBrC,OAAOC,KAA/B,EAAsCD,OAAOG,MAA7C;AACAmC,yCAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwD,eAAxD;AACAR,wCAAQ,UAAR;AACH,6BALwB,EAKtB,MAAM,IALgB,CAAzB;AAMH,yBAPK,CAlBV;;AAAA;;AA2BIS,kDAA0B,IAA1B;;AA3BJ;AAAA,+BA6BU,IAAIrC,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIS,aAAaP,WAAW,YAAM;AAC9B;AACAM,0DAA0B,KAA1B;AACApB,4CAAY,SAAZ;AACAnB,wCAAQ4B,KAAR,GAAgB,SAAhB;AACAa;AACAL,yCAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwD,EAAxD;AACAI,uCAAOC,qBAAP,CAA6BC,QAA7B;AACH,6BARgB,EAQd,IARc,CAAjB;AASH,yBAVK,CA7BV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;AA+Jf;AACA;;wEACA,kBAAkCC,iBAAlC,EAAqDC,4BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,sCADR,GACyB,CADzB;;AAGI;;AAHJ;AAAA,+BAIU,IAAI9C,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAe,8CAAkBG,eAAlB,GAAoCnB,OAApC;AACAgB,8CAAkBI,cAAlB,GAAmCnB,MAAnC;;AAEAe,8CAAkBK,OAAlB,GAA4BlB,WAAW,YAAM;AACzCa,kDAAkBM,OAAlB,GAA4B,KAA5B;;AAEAtB,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBkB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAJV;;AAAA;AAAA;AAAA,+BAgBU,IAAI9C,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAe,8CAAkBG,eAAlB,GAAoCnB,OAApC;AACAgB,8CAAkBI,cAAlB,GAAmCnB,MAAnC;;AAEAe,8CAAkBK,OAAlB,GAA4BlB,WAAW,YAAM;AACzCa,kDAAkBM,OAAlB,GAA4B,IAA5B;;AAEAtB,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBkB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAhBV;;AAAA;AAAA;AAAA,+BA4BU,IAAI9C,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAe,8CAAkBG,eAAlB,GAAoCnB,OAApC;AACAgB,8CAAkBI,cAAlB,GAAmCnB,MAAnC;;AAEAe,8CAAkBK,OAAlB,GAA4BlB,WAAW,YAAM;AACzCa,kDAAkBM,OAAlB,GAA4B,KAA5B;;AAEAtB,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBkB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CA5BV;;AAAA;AAAA,0DAyCW,IAAI9C,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACAe,8CAAkBG,eAAlB,GAAoCnB,OAApC;AACAgB,8CAAkBI,cAAlB,GAAmCnB,MAAnC;;AAEAe,8CAAkBK,OAAlB,GAA4BlB,WAAW,YAAM;AACzCa,kDAAkBlB,KAAlB,GAA0B,QAA1B;AACAkB,kDAAkBM,OAAlB,GAA4B,IAA5B;;AAEAtB,wCAAQ,UAAR;AACH,6BAL2B,EAKzBkB,iBAAiB,IAAjB,GAAwB,IALC,CAA5B;AAMH,yBAXM,CAzCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,kB;;;;;AAuDf;;wEACA,kBAAkCC,CAAlC,EAAqCC,CAArC,EAAwCC,cAAxC,EAAwDC,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIC,YAAJ,CAAiBN,CAAjB,EAAoBC,CAApB,CALnB;;AAMIM,sCAAcC,IAAd,CAAmBH,QAAnB;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6BE,aAA7B,CATV;;AAAA;AAAA,0DAYW,IAAI3D,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBF,cAAcG,OAAd,CAAsBL,QAAtB,CAApB;AACAE,8CAAcrC,MAAd,CAAqBuC,aAArB,EAAoC,CAApC;;AAEAjC,wCAAQ,UAAR;AACH,6BANkB,EAMhB2B,gBAAgB,IANA,CAAnB;AAOH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe/C,kB;;;;;AA2Bf;;wEACA,kBAAiC4C,CAAjC,EAAoCC,CAApC,EAAuCC,cAAvC,EAAuDC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIM,WAAJ,CAAgBX,CAAhB,EAAmBC,CAAnB,CALnB;;AAMIW,qCAAaJ,IAAb,CAAkBH,QAAlB;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6BO,YAA7B,CATV;;AAAA;AAAA,0DAYW,IAAIhE,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBG,aAAaF,OAAb,CAAqBL,QAArB,CAApB;AACAO,6CAAa1C,MAAb,CAAoBuC,aAApB,EAAmC,CAAnC;;AAEAtC;AACA,qCAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIM,WAAWJ,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC+C,qDAAiBzC,WAAWN,CAAX,CAAjB;AACH;;AAEDU,wCAAQ,UAAR;AACH,6BAXkB,EAWhB2B,gBAAgB,IAXA,CAAnB;AAYH,yBAjBM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAerD,iB;;;;;AAgCf;;wEACA,kBAAmCmD,CAAnC,EAAsCtD,MAAtC,EAA8CuD,cAA9C,EAA8DC,aAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIS,eAAJ,CAAoBb,CAApB,EAAuBtD,MAAvB,CALnB;;AAMIoE,yCAAiBP,IAAjB,CAAsBH,QAAtB;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6BU,gBAA7B,CATV;;AAAA;AAAA,0DAYW,IAAInE,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBM,iBAAiBL,OAAjB,CAAyBL,QAAzB,CAApB;AACAU,iDAAiB7C,MAAjB,CAAwBuC,aAAxB,EAAuC,CAAvC;;AAEAjC,wCAAQ,UAAR;AACH,6BANkB,EAMhB2B,gBAAgB,IANA,CAAnB;AAOH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAea,mB;;;;;AA2Bf;;wEACA,kBAAiChB,CAAjC,EAAoCvD,KAApC,EAA2CyD,cAA3C,EAA2DC,aAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIY,aAAJ,CAAkBjB,CAAlB,EAAqBvD,KAArB,CALnB;;AAMIyE,uCAAeV,IAAf,CAAoBH,QAApB;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6Ba,cAA7B,CATV;;AAAA;AAAA,0DAYW,IAAItE,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBS,eAAeR,OAAf,CAAuBL,QAAvB,CAApB;AACAa,+CAAehD,MAAf,CAAsBuC,aAAtB,EAAqC,CAArC;;AAEAjC,wCAAQ,UAAR;AACH,6BANkB,EAMhB2B,gBAAgB,IANA,CAAnB;AAOH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAejD,iB;;;;;AA2Bf;;wEACA,kBAAyC+C,CAAzC,EAA4CtD,MAA5C,EAAoDwE,KAApD,EAA2DjB,cAA3D,EAA2EC,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIe,qBAAJ,CAA0BnB,CAA1B,EAA6BtD,MAA7B,EAAqCwE,KAArC,CALnB;;AAMIE,+CAAuBb,IAAvB,CAA4BH,QAA5B;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6BgB,sBAA7B,CATV;;AAAA;AAAA,0DAYW,IAAIzE,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBY,uBAAuBX,OAAvB,CAA+BL,QAA/B,CAApB;AACAgB,uDAAuBnD,MAAvB,CAA8BuC,aAA9B,EAA6C,CAA7C;;AAEAjC,wCAAQ,UAAR;AACH,6BANkB,EAMhB2B,gBAAgB,IANA,CAAnB;AAOH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe9C,yB;;;;;AA2Bf;;yEACA,mBAAuC2C,CAAvC,EAA0CvD,KAA1C,EAAiD0E,KAAjD,EAAwDjB,cAAxD,EAAwEC,aAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIiB,mBAAJ,CAAwBtB,CAAxB,EAA2BvD,KAA3B,EAAkC0E,KAAlC,CALnB;;AAMII,6CAAqBf,IAArB,CAA0BH,QAA1B;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6BkB,oBAA7B,CATV;;AAAA;AAAA,2DAYW,IAAI3E,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBc,qBAAqBb,OAArB,CAA6BL,QAA7B,CAApB;AACAkB,qDAAqBrD,MAArB,CAA4BuC,aAA5B,EAA2C,CAA3C;;AAEAjC,wCAAQ,UAAR;AACH,6BANkB,EAMhB2B,gBAAgB,IANA,CAAnB;AAOH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAehD,uB;;;;;AA2Bf;;yEACA,mBAAwB6C,CAAxB,EAA2BC,CAA3B,EAA8BxD,KAA9B,EAAqCE,MAArC,EAA6CuD,cAA7C,EAA6DC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAImB,IAAJ,CAASxB,CAAT,EAAYC,CAAZ,EAAexD,KAAf,EAAsBE,MAAtB,CALnB;;AAMI8E,8BAAMjB,IAAN,CAAWH,QAAX;;AAEA;AARJ;AAAA,+BASUN,mBAAmBM,QAAnB,EAA6BoB,KAA7B,CATV;;AAAA;AAAA,2DAYW,IAAI7E,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,qCAASV,eAAT,GAA2BnB,OAA3B;AACA6B,qCAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,qCAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,oCAAI8B,gBAAgBgB,MAAMf,OAAN,CAAcL,QAAd,CAApB;AACAoB,sCAAMvD,MAAN,CAAauC,aAAb,EAA4B,CAA5B;;AAEAjC,wCAAQ,UAAR;AACH,6BANkB,EAMhB2B,gBAAgB,IANA,CAAnB;AAOH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAenD,Q;;;;;;;;;AAnsBf;;AAEA,IAAMR,SAASsC,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMH,UAAUpC,OAAOkF,UAAP,CAAkB,IAAlB,CAAhB;AACA9C,QAAQ+C,SAAR,GAAoB,CAApB;;AAEA;;AAEA,IAAI9D,YAAY,SAAhB;AACA,IAAIoB,0BAA0B,KAA9B;AACA,IAAI2C,WAAW,EAAf;;AAEA,IAAIlE,eAAe,CAAnB;;AAEA,IAAImE,kBAAkB,CAAtB;AACA,IAAIC,qBAAqB,CAAzB;;AAEA,IAAIC,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;;AAEA,IAAIC,YAAY,KAAhB;;AAEA,IAAIC,0BAA0B,KAA9B;AACA,IAAIC,wBAAwB,KAA5B;AACA,IAAIC,2BAA2B,KAA/B;AACA,IAAIC,0BAA0B,KAA9B;;AAEA,IAAIC,qBAAqB,KAAzB;AACA,IAAIC,iBAAiB,IAArB;AACA,IAAIC,eAAe,EAAnB;AACA,IAAIC,sBAAsB,GAA1B;AACA,IAAIC,wBAAwB,GAA5B;;AAEA;AACA,IAAIC,mBAAmB7D,SAAS8D,aAAT,CAAuB,KAAvB,CAAvB;AACAD,iBAAiBE,GAAjB,GAAuB,gCAAvB;;AAEA,IAAIC,uBAAuBhE,SAAS8D,aAAT,CAAuB,KAAvB,CAA3B;AACAE,qBAAqBD,GAArB,GAA2B,oCAA3B;;AAEA,IAAIE,8BAA8BjE,SAAS8D,aAAT,CAAuB,KAAvB,CAAlC;AACAG,4BAA4BF,GAA5B,GAAkC,2CAAlC;;AAEA;;AAEA,IAAIG,kBAAkB,EAAtB;AACA,IAAIzC,gBAAgB,EAApB;AACA,IAAIK,eAAe,EAAnB;AACA,IAAIG,mBAAmB,EAAvB;AACA,IAAIG,iBAAiB,EAArB;AACA,IAAIG,yBAAyB,EAA7B;AACA,IAAIE,uBAAuB,EAA3B;AACA,IAAIE,QAAQ,EAAZ;;AAEA;AACA,IAAIrD,aAAa,EAAjB;;AAEA,IAAIL,kBAAkB,EAAtB;;AAEA,IAAIkF,qBAAqB,EAAzB;;AAEA;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKzG,KAAL,GAAa,EAAb;AACA,SAAKE,MAAL,GAAc,EAAd;;AAEA,SAAKqD,CAAL,GAASxD,OAAOC,KAAP,GAAe,CAAf,GAAmB,KAAKA,KAAL,GAAa,CAAzC;AACA,SAAKwD,CAAL,GAASzD,OAAOG,MAAP,GAAgB,CAAhB,GAAoB,KAAKA,MAAL,GAAc,CAA3C;;AAEA,SAAKwE,KAAL,GAAa,CAAb;AACA,SAAKgC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKzD,CAA1B;AACA,SAAK0D,aAAL,GAAqB,KAAKzD,CAA1B;;AAEA,SAAK3B,KAAL,GAAa,SAAb;;AAEA,SAAKqF,MAAL,GAAchB,gBAAd;AACA,SAAKpE,EAAL,GAAU,CAAV;AACA,SAAKqF,gBAAL,GAAwB,EAAxB;;AAEA,SAAKC,oBAAL,GAA4B,CAA5B;AACH,C;;AACJ;;IAEKC,c,GACF,0BAAc;AAAA;;AACV;AACA,SAAKlE,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;AAED;AACA;;IAEMS,Y,GACF,sBAAYN,CAAZ,EAAeC,CAAf,EAAkB;AAAA;;AACd,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKxD,KAAL,GAAa,EAAb;AACA,SAAKE,MAAL,GAAc,EAAd;;AAEA;AACA,SAAK2B,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKH,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKc,W,GACF,qBAAYX,CAAZ,EAAeC,CAAf,EAAkB;AAAA;;AACd,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKxD,KAAL,GAAa,EAAb;AACA,SAAKE,MAAL,GAAc,EAAd;;AAEA;AACA,SAAK2B,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKH,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKiB,e,GACF,yBAAYb,CAAZ,EAAetD,MAAf,EAAuB;AAAA;;AACnB,SAAKqD,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKxD,KAAL,GAAaD,OAAOC,KAApB;AACA,SAAKE,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAK2B,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKoB,a,GACF,uBAAYjB,CAAZ,EAAevD,KAAf,EAAsB;AAAA;;AAClB,SAAKuD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKxD,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcH,OAAOG,MAArB;;AAEA;AACA,SAAK2B,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKuB,qB,GACF,+BAAYnB,CAAZ,EAAetD,MAAf,EAAuBwE,KAAvB,EAA8B;AAAA;;AAC1B,SAAKnB,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKxD,KAAL,GAAaD,OAAOC,KAApB;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKwE,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAK7C,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKyB,mB,GACF,6BAAYtB,CAAZ,EAAevD,KAAf,EAAsB0E,KAAtB,EAA6B;AAAA;;AACzB,SAAKnB,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKxD,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcH,OAAOG,MAArB;AACA,SAAKwE,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAK7C,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEK2B,I,GACF,cAAYxB,CAAZ,EAAeC,CAAf,EAAkBxD,KAAlB,EAAyBE,MAAzB,EAAiC;AAAA;;AAC7B,SAAKqD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKxD,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAK2B,KAAL,GAAa,SAAb;AACA,SAAKwB,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;AAED;;AAEA;;AAEA;AACA;AACA,IAAI9C,SAASP,OAAOC,KAAP,GAAe,CAA5B;AACA,IAAIQ,UAAUT,OAAOC,KAArB,CAsDC,CAYA;;AAED;AACA,SAASF,eAAT,CAAyBwH,QAAzB,EAAmCC,QAAnC,EAA6C;AACzClF,aAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,YAAYtB,YAAhE;;AAEAG,gBAAY,SAAZ;AACAoB,8BAA0B,KAA1B;;AAEAvC,YAAQsD,CAAR,GAAY+D,QAAZ;AACArH,YAAQuD,CAAR,GAAY+D,QAAZ;;AAEAlC,yBAAqB,CAArB;;AAEAQ,yBAAqB,KAArB;AACAC,qBAAiB,IAAjB;AACH,EA2CA;;AAED,SAASpD,YAAT,GAAwB;AACpB,YAAQzB,YAAR;AACI,aAAK,CAAL;AACID;AACA;AACJ,aAAK,CAAL;AACIG;AACA;AANR,KAOC;AACJ;;AAED;;AAEA,SAASJ,aAAT,GAAyB;AACrBE;;AAEA;AACAmE,uBAAmBC,kBAAnB;;AAEA3C;AACH;;AAED;AACA,SAAS0B,gBAAT,CAA0BoD,WAA1B,EAAuC;AACnC;AACA,QAAIC,qBAAqBD,YAAYjG,MAArC;;AAEA,SAAK,IAAIF,IAAIoG,qBAAqB,CAAlC,EAAqCpG,KAAK,CAA1C,EAA6CA,GAA7C,EAAkD;AAC9C;AACA,YAAIuC,WAAW4D,YAAYnG,CAAZ,CAAf;AACAuC,iBAASV,eAAT;AACA1B,qBAAaoC,SAASR,OAAtB;AACAoE,oBAAY/F,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAASO,eAAT,CAAyB4F,WAAzB,EAAsC;AAClC;AACA,QAAIC,qBAAqBD,YAAYjG,MAArC;;AAEA,SAAK,IAAIF,IAAIoG,qBAAqB,CAAlC,EAAqCpG,KAAK,CAA1C,EAA6CA,GAA7C,EAAkD;AAC9C;AACA,YAAIuC,WAAW4D,YAAYnG,CAAZ,CAAf;AACAuC,iBAAST,cAAT;AACA3B,qBAAaoC,SAASR,OAAtB;AACAoE,oBAAY/F,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAASqG,iBAAT,CAA2BtE,OAA3B,EAAoC;AAChC9B,oBAAgByC,IAAhB,CAAqBX,OAArB;AACH;;AAED;AACA,SAASuE,oBAAT,CAA8BvE,OAA9B,EAAuC;AACnC,QAAIwE,sBAAsBtG,gBAAgB2C,OAAhB,CAAwBb,OAAxB,CAA1B;AACA9B,oBAAgBG,MAAhB,CAAuBmG,mBAAvB,EAA4C,CAA5C;AACH;;AAID;;AAEA,SAASC,cAAT,GAA0B;AACtB5H,YAAQ4B,KAAR,GAAgB,oBAAhB;AACA5B,YAAQyE,KAAR,GAAgBqB,YAAhB;AACAF,yBAAqB,IAArB;AACAC,qBAAiB,KAAjB;;AAEA,QAAIgC,kBAAkB5F,WAAW,YAAM;AACnC2D,6BAAqB,KAArB;AACA5F,gBAAQ4B,KAAR,GAAgB,SAAhB;AACA8F,6BAAqBG,eAArB;AACH,KAJqB,EAInB9B,sBAAsB,IAJH,CAAtB;AAKA0B,sBAAkBI,eAAlB;;AAEA7H,YAAQmH,oBAAR,GAA+BnB,qBAA/B;;AAEA,QAAI8B,+BAA+BC,YAAY,YAAM;AACjD/H,gBAAQmH,oBAAR,IAAgC,KAAhC;AACH,KAFkC,EAEhC,CAFgC,CAAnC;;AAIA,QAAIa,sBAAsB/F,WAAW,YAAM;AACvC4D,yBAAiB,IAAjB;AACA6B,6BAAqBM,mBAArB;AACH,KAHyB,EAGvBhC,wBAAwB,IAHD,CAA1B;AAIAyB,sBAAkBO,mBAAlB;AAGH;;AAED;;AAEA;AACA;AACA,SAAStE,iBAAT,CAA2BF,cAA3B,EAA2C;AACvC;AACA,QAAIG,WAAW,IAAIyD,cAAJ,EAAf;AACAd,oBAAgBxC,IAAhB,CAAqBH,QAArB;;AAEA,WAAO,IAAIzD,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA4B,iBAASV,eAAT,GAA2BnB,OAA3B;AACA6B,iBAAST,cAAT,GAA0BnB,MAA1B;;AAEA4B,iBAASR,OAAT,GAAmBlB,WAAW,YAAM;AAChC;AACA,gBAAI8B,gBAAgBuC,gBAAgBtC,OAAhB,CAAwBL,QAAxB,CAApB;AACA2C,4BAAgB9E,MAAhB,CAAuBuC,aAAvB,EAAsC,CAAtC;;AAEAjC,oBAAQ,UAAR;AACH,SANkB,EAMhB0B,iBAAiB,IAND,CAAnB;AAOH,KAZM,CAAP;AAaH,EAyDA,CA4BA,CAiCA,CA4BA,CA4BA,CA4BA,CA4BA,CA4BA;;AAED;;AAEA,SAAS/B,gBAAT,GAA4B;AACxBC,iBAAa,CAAC4E,eAAD,EAAkBzC,aAAlB,EAAiCK,YAAjC,EAA+CG,gBAA/C,EAAiEG,cAAjE,EAAiFG,sBAAjF,EACTE,oBADS,EACaE,KADb,CAAb;AAGH;;AAED;AACA,SAASkD,0BAAT,GAAsC;AAClC,SAAK,IAAI7G,IAAI,CAAb,EAAgBA,IAAIuD,uBAAuBrD,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAIuD,uBAAuBvD,CAAvB,EAA0BQ,KAA1B,KAAoC,SAAxC,EAAmD;AAC/C+C,mCAAuBvD,CAAvB,EAA0BmC,CAA1B,IAA+BoB,uBAAuBvD,CAAvB,EAA0BqD,KAAzD;AACH;AACJ;AACJ;;AAED;AACA,SAASyD,wBAAT,GAAoC;AAChC,SAAK,IAAI9G,IAAI,CAAb,EAAgBA,IAAIyD,qBAAqBvD,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAIyD,qBAAqBzD,CAArB,EAAwBQ,KAAxB,KAAkC,SAAtC,EAAiD;AAC7CiD,iCAAqBzD,CAArB,EAAwBkC,CAAxB,IAA6BuB,qBAAqBzD,CAArB,EAAwBqD,KAArD;AACH;AACJ;AACJ;;AAED;;AAEA,SAAS0D,WAAT,GAAuB;AACnB,QAAInI,QAAQ4B,KAAR,KAAkB,SAAtB,EAAiC;AAC7B5B,gBAAQiH,MAAR,GAAiBhB,gBAAjB;AACA;AACA;AACAjG,gBAAQ6B,EAAR,GAAa7B,QAAQkH,gBAAR,IAA4BkB,KAAKC,KAAL,CAAWrI,QAAQyG,kBAAR,GAA6B,EAAxC,IAA8C,CAA1E,CAAb;AACH,KALD,MAKO,IAAIzG,QAAQ4B,KAAR,KAAkB,oBAAtB,EAA4C;AAC/C5B,gBAAQiH,MAAR,GAAiBZ,2BAAjB;AACArG,gBAAQ6B,EAAR,GAAa,CAAb;AACH,KAHM,MAGA,IAAI7B,QAAQ4B,KAAR,KAAkB,aAAtB,EAAqC;AACxC5B,gBAAQiH,MAAR,GAAiBb,oBAAjB;;AAEA,YAAIkC,+BAA+BrG,WAAW,YAAM;AAChDsG,0BAAcC,yBAAd;AACAd,iCAAqBc,yBAArB;AACAd,iCAAqBY,4BAArB;AACH,SAJkC,EAIhC,MAAM,IAJ0B,CAAnC;AAKAb,0BAAkBa,4BAAlB;;AAEA,YAAIE,4BAA4BT,YAAY,YAAM;AAC9C/H,oBAAQ6B,EAAR,IAAc7B,QAAQkH,gBAAtB;AACH,SAF+B,EAE7B,MAAM,IAFuB,CAAhC;AAGAO,0BAAkBe,yBAAlB;AACH;;AAEDtG,YAAQuG,SAAR,CAAkBzI,QAAQiH,MAA1B,EAAkCjH,QAAQ6B,EAA1C,EAA8C,CAA9C,EAAiD7B,QAAQkH,gBAAzD,EAA2ElH,QAAQkH,gBAAnF,EAAqGlH,QAAQsD,CAA7G,EAAgHtD,QAAQuD,CAAxH,EAA2HvD,QAAQD,KAAnI,EAA0IC,QAAQC,MAAlJ;AACH;;AAED,SAASyI,iBAAT,GAA6B;AACzB,SAAK,IAAItH,IAAI,CAAb,EAAgBA,IAAIyC,cAAcvC,MAAlC,EAA0CF,GAA1C,EAA+C;AAC3C,YAAIuH,kBAAkB9E,cAAczC,CAAd,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ0G,WAAR,GAAsB,SAAtB;AACA1G,wBAAQ2G,UAAR,CAAmBF,gBAAgBrF,CAAnC,EAAsCqF,gBAAgBpF,CAAtD,EAAyDoF,gBAAgB5I,KAAzE,EAAgF4I,gBAAgB1I,MAAhG;AACH,aAHD,MAGO,IAAI0I,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS+I,gBAAT,GAA4B;AACxB,SAAK,IAAI5H,IAAI,CAAb,EAAgBA,IAAI8C,aAAa5C,MAAjC,EAAyCF,GAAzC,EAA8C;AAC1C,YAAIuH,kBAAkBzE,aAAa9C,CAAb,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ0G,WAAR,GAAsB,SAAtB;AACA1G,wBAAQ2G,UAAR,CAAmBF,gBAAgBrF,CAAnC,EAAsCqF,gBAAgBpF,CAAtD,EAAyDoF,gBAAgB5I,KAAzE,EAAgF4I,gBAAgB1I,MAAhG;AACH,aAHD,MAGO,IAAI0I,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASgJ,oBAAT,GAAgC;AAC5B,SAAK,IAAI7H,IAAI,CAAb,EAAgBA,IAAIiD,iBAAiB/C,MAArC,EAA6CF,GAA7C,EAAkD;AAC9C,YAAIuH,kBAAkBtE,iBAAiBjD,CAAjB,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ0G,WAAR,GAAsB,SAAtB;AACA1G,wBAAQ2G,UAAR,CAAmBF,gBAAgBrF,CAAhB,GAAoB,EAAvC,EAA2CqF,gBAAgBpF,CAA3D,EAA8D,EAA9D,EAAkEoF,gBAAgB1I,MAAlF;AACAiC,wBAAQ2G,UAAR,CAAmBF,gBAAgB5I,KAAhB,GAAwB,EAA3C,EAA+C4I,gBAAgBpF,CAA/D,EAAkE,EAAlE,EAAsEoF,gBAAgB1I,MAAtF;AACH,aAJD,MAIO,IAAI0I,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASiJ,kBAAT,GAA8B;AAC1B,SAAK,IAAI9H,IAAI,CAAb,EAAgBA,IAAIoD,eAAelD,MAAnC,EAA2CF,GAA3C,EAAgD;AAC5C,YAAIuH,kBAAkBnE,eAAepD,CAAf,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ0G,WAAR,GAAsB,SAAtB;AACA1G,wBAAQ2G,UAAR,CAAmBF,gBAAgBrF,CAAnC,EAAsCqF,gBAAgBpF,CAAhB,GAAoB,EAA1D,EAA8DoF,gBAAgB5I,KAA9E,EAAqF,EAArF;AACAmC,wBAAQ2G,UAAR,CAAmBF,gBAAgBrF,CAAnC,EAAsCqF,gBAAgB1I,MAAhB,GAAyB,EAA/D,EAAmE0I,gBAAgB5I,KAAnF,EAA0F,EAA1F;AACH,aAJD,MAIO,IAAI4I,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASkJ,0BAAT,GAAsC;AAClC,SAAK,IAAI/H,IAAI,CAAb,EAAgBA,IAAIuD,uBAAuBrD,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAIuH,kBAAkBhE,uBAAuBvD,CAAvB,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ4G,SAAR,GAAoB,SAApB;;AAEA;AACA;AACA5G,wBAAQkH,SAAR;AACAlH,wBAAQmH,MAAR,CAAeV,gBAAgBrF,CAAhB,GAAoB,EAAnC,EAAuCqF,gBAAgBpF,CAAhB,GAAoBoF,gBAAgB1I,MAAhB,GAAyBmI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAApF;AACAvC,wBAAQuH,MAAR,CAAed,gBAAgBrF,CAAhB,GAAoB,EAAnC,EAAuCqF,gBAAgBpF,CAAhB,GAAoBoF,gBAAgB1I,MAAhB,GAAyBmI,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAApF;AACAvC,wBAAQuH,MAAR,CAAed,gBAAgBrF,CAAhB,GAAoB,EAAnC,EAAuCqF,gBAAgBpF,CAAhB,GAAoBoF,gBAAgB1I,MAAhB,GAAyBmI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAApF;AACAvC,wBAAQyH,IAAR;;AAEA;AACAzH,wBAAQkH,SAAR;AACAlH,wBAAQmH,MAAR,CAAeV,gBAAgB5I,KAAhB,GAAwB,EAAvC,EAA2C4I,gBAAgBpF,CAAhB,GAAoBoF,gBAAgB1I,MAAhB,GAAyBmI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAAxF;AACAvC,wBAAQuH,MAAR,CAAed,gBAAgB5I,KAAhB,GAAwB,EAAvC,EAA2C4I,gBAAgBpF,CAAhB,GAAoBoF,gBAAgB1I,MAAhB,GAAyBmI,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAxF;AACAvC,wBAAQuH,MAAR,CAAed,gBAAgB5I,KAAhB,GAAwB,EAAvC,EAA2C4I,gBAAgBpF,CAAhB,GAAoBoF,gBAAgB1I,MAAhB,GAAyBmI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAAxF;AACAvC,wBAAQyH,IAAR;AACH,aAjBD,MAiBO,IAAIhB,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS2J,wBAAT,GAAoC;AAChC,SAAK,IAAIxI,IAAI,CAAb,EAAgBA,IAAIyD,qBAAqBvD,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAIuH,kBAAkB9D,qBAAqBzD,CAArB,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ4G,SAAR,GAAoB,SAApB;;AAEA;AACA;AACA5G,wBAAQkH,SAAR;AACAlH,wBAAQmH,MAAR,CAAeV,gBAAgBrF,CAAhB,GAAoBqF,gBAAgB5I,KAAhB,GAAwBqI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkE,gBAAgBpF,CAAhB,GAAoB,EAAxI;AACArB,wBAAQuH,MAAR,CAAed,gBAAgBrF,CAAhB,GAAoBqF,gBAAgB5I,KAAhB,GAAwBqI,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAA3D,EAA0GkE,gBAAgBpF,CAAhB,GAAoB,EAA9H;AACArB,wBAAQuH,MAAR,CAAed,gBAAgBrF,CAAhB,GAAoBqF,gBAAgB5I,KAAhB,GAAwBqI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkE,gBAAgBpF,CAAhB,GAAoB,EAAxI;AACArB,wBAAQyH,IAAR;;AAEA;AACAzH,wBAAQkH,SAAR;AACAlH,wBAAQmH,MAAR,CAAeV,gBAAgBrF,CAAhB,GAAoBqF,gBAAgB5I,KAAhB,GAAwBqI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkE,gBAAgB1I,MAAhB,GAAyB,EAA7I;AACAiC,wBAAQuH,MAAR,CAAed,gBAAgBrF,CAAhB,GAAoBqF,gBAAgB5I,KAAhB,GAAwBqI,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAA3D,EAA0GkE,gBAAgB1I,MAAhB,GAAyB,EAAnI;AACAiC,wBAAQuH,MAAR,CAAed,gBAAgBrF,CAAhB,GAAoBqF,gBAAgB5I,KAAhB,GAAwBqI,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUb,gBAAgBlE,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkE,gBAAgB1I,MAAhB,GAAyB,EAA7I;AACAiC,wBAAQyH,IAAR;AACH,aAjBD,MAiBO,IAAIhB,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS4J,SAAT,GAAqB;AACjB,SAAK,IAAIzI,IAAI,CAAb,EAAgBA,IAAI2D,MAAMzD,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,YAAIuH,kBAAkB5D,MAAM3D,CAAN,CAAtB;AACA,YAAIuH,gBAAgBvF,OAApB,EAA6B;AACzB;AACA,gBAAIuF,gBAAgB/G,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ0G,WAAR,GAAsB,SAAtB;AACA1G,wBAAQ2G,UAAR,CAAmBF,gBAAgBrF,CAAnC,EAAsCqF,gBAAgBpF,CAAtD,EAAyDoF,gBAAgB5I,KAAzE,EAAgF4I,gBAAgB1I,MAAhG;AACH,aAHD,MAGO,IAAI0I,gBAAgB/G,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ4G,SAAR,GAAoB,SAApB;AACA5G,wBAAQ6G,QAAR,CAAiBJ,gBAAgBrF,CAAjC,EAAoCqF,gBAAgBpF,CAApD,EAAuDoF,gBAAgB5I,KAAvE,EAA8E4I,gBAAgB1I,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED;;AAEA,SAAS6J,wBAAT,CAAkCC,UAAlC,EAA8C;AAC1C,SAAK,IAAI3I,IAAI,CAAb,EAAgBA,IAAI2I,WAAWzI,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC4I,8BAAsBhK,OAAtB,EAA+B+J,WAAW3I,CAAX,CAA/B;AACH;AACJ;;AAED;AACA,SAAS4I,qBAAT,CAA+BC,WAA/B,EAA4CC,WAA5C,EAAyD;AACrD,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAY5G,CAAZ,IAAiB2G,YAAY3G,CAA9B,IAAqC2G,YAAY3G,CAAZ,IAAiB4G,YAAY5G,CAAZ,GAAgB4G,YAAYnK,KAAlF,IAA6FmK,YAAYtI,KAAZ,KAAsB,QAAvH,EAAkI;AAC9HuI,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKF,YAAY3G,CAAZ,IAAiB4G,YAAY5G,CAA9B,IAAqC4G,YAAY5G,CAAZ,IAAiB2G,YAAY3G,CAAZ,GAAgB2G,YAAYlK,KAAlF,IAA6FmK,YAAYtI,KAAZ,KAAsB,QAAvH,EAAkI;AACrIuI,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAY3G,CAAZ,IAAiB0G,YAAY1G,CAA9B,IAAqC0G,YAAY1G,CAAZ,IAAiB2G,YAAY3G,CAAZ,GAAgB2G,YAAYjK,MAAlF,IAA8FiK,YAAYtI,KAAZ,KAAsB,QAAxH,EAAmI;AAC/HwI,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKH,YAAY1G,CAAZ,IAAiB2G,YAAY3G,CAA9B,IAAqC2G,YAAY3G,CAAZ,IAAiB0G,YAAY1G,CAAZ,GAAgB0G,YAAYhK,MAAlF,IAA8FiK,YAAYtI,KAAZ,KAAsB,QAAxH,EAAmI;AACtIwI,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1B7E,oBAAY,IAAZ;AACAgB,2BAAmBzC,IAAnB,CAAwBoG,WAAxB;AACH;AACJ;;AAED;;AAEA,SAASG,mBAAT,GAA+B;AAC3B;AACA;AACAjI,aAASkI,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtC;AACA;AACA,YAAIC,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AAClB,gBAAI,CAAChF,uBAAL,EAA8B;AAC1BN,yBAASqF,EAAEC,OAAX,IAAsB,IAAtB;AACAhF,0CAA0B,IAA1B;AACH,aAHD,MAGO;AACH,uBAAON,SAASqF,EAAEC,OAAX,CAAP;AACH;AACJ,SAPD,MAOO,IAAID,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC/E,qBAAL,EAA4B;AACxBP,yBAASqF,EAAEC,OAAX,IAAsB,IAAtB;AACA/E,wCAAwB,IAAxB;AACH,aAHD,MAGO;AACH,uBAAOP,SAASqF,EAAEC,OAAX,CAAP;AACH;AACJ,SAPM,MAOA,IAAID,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC9E,wBAAL,EAA+B;AAC3BR,yBAASqF,EAAEC,OAAX,IAAsB,IAAtB;AACA9E,2CAA2B,IAA3B;AACH,aAHD,MAGO;AACH,uBAAOR,SAASqF,EAAEC,OAAX,CAAP;AACH;AACJ,SAPM,MAOA,IAAID,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC7E,uBAAL,EAA8B;AAC1BT,yBAASqF,EAAEC,OAAX,IAAsB,IAAtB;AACA7E,0CAA0B,IAA1B;AACH,aAHD,MAGO;AACH,uBAAOT,SAASqF,EAAEC,OAAX,CAAP;AACH;AACJ,SAPM,MAOA;AACHtF,qBAASqF,EAAEC,OAAX,IAAsB,IAAtB;AACH;AACJ,KAlCD;;AAoCA;AACApI,aAASkI,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC;AACA,YAAIC,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AAClB,mBAAOtF,SAASqF,EAAEC,OAAX,CAAP;AACAhF,sCAA0B,KAA1B;AACH,SAHD,MAGO,IAAI+E,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOtF,SAASqF,EAAEC,OAAX,CAAP;AACA/E,oCAAwB,KAAxB;AACH,SAHM,MAGA,IAAI8E,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOtF,SAASqF,EAAEC,OAAX,CAAP;AACA9E,uCAA2B,KAA3B;AACH,SAHM,MAGA,IAAI6E,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOtF,SAASqF,EAAEC,OAAX,CAAP;AACA7E,sCAA0B,KAA1B;AACH,SAHM,MAGA;AACH,mBAAOT,SAASqF,EAAEC,OAAX,CAAP;AACH;AACJ,KAjBD;AAkBH;;AAED,SAASC,qBAAT,CAA+BnH,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,WAAO6E,KAAKsC,KAAL,CAAWnH,CAAX,EAAcD,CAAd,CAAP;AACH;;AAED,SAASqH,uBAAT,CAAiCC,OAAjC,EAA0C;AACtC,WAAOA,UAAU,GAAV,GAAgBxC,KAAKyC,EAA5B;AACH;;AAED;;AAEA,SAASjI,QAAT,GAAoB;AAChB;;AAEA,QAAI,CAACgD,kBAAL,EAAyB;AACrB;AACAP,iBAAS,CAAT;AACAC,iBAAS,CAAT;;AAEA;AACA;AACA,YAAIJ,SAAS,EAAT,CAAJ,EAAkB;AACdG;AACH;;AAED;AACA,YAAIH,SAAS,EAAT,CAAJ,EAAkB;AACdG;AACH;;AAED;AACA,YAAIH,SAAS,EAAT,CAAJ,EAAkB;AACdI;AACH;;AAED;AACA,YAAIJ,SAAS,EAAT,CAAJ,EAAkB;AACdI;AACH;;AAED,YAAIJ,SAAS,EAAT,KAAgBW,cAAhB,KAAmCR,WAAW,CAAX,IAAgBC,WAAW,CAA9D,CAAJ,EAAsE;AAClE;AACA;;AAEA;AACA,mBAAOJ,SAAS,EAAT,CAAP;;AAEA0C;AACH,SARD,MAQO,IAAI,CAAC1C,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAAhB,IAAgCA,SAAS,EAAT,CAAhC,IAAgDA,SAAS,EAAT,CAAjD,KAAkEW,cAAtE,EAAsF;AACzF;AACA;;AAEAR,qBAAS,CAAT;AACAC,qBAAS,CAAT;;AAEA;AACA,gBAAIJ,SAAS,EAAT,CAAJ,EAAkB;AACdG;AACH;;AAED;AACA,gBAAIH,SAAS,EAAT,CAAJ,EAAkB;AACdG;AACH;;AAED;AACA,gBAAIH,SAAS,EAAT,CAAJ,EAAkB;AACdI;AACH;;AAED;AACA,gBAAIJ,SAAS,EAAT,CAAJ,EAAkB;AACdI;AACH;;AAEDsC;AACH,SA5BM,MA4BA;AACH5H,oBAAQyE,KAAR,GAAgB,CAAhB;AACH;;AAED;AACA;AACA;AACAzE,gBAAQyG,kBAAR,GAA6B,CAAC,GAA9B;;AAEA,YAAIpB,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9B;AACAtF,oBAAQ0G,kBAAR,GAA6B+D,sBAAsBpF,MAAtB,EAA8BC,MAA9B,CAA7B;;AAEA;AACAtF,oBAAQyG,kBAAR,GAA6BkE,wBAAwB3K,QAAQ0G,kBAAhC,CAA7B;;AAEA;AACA1G,oBAAQ2G,EAAR,GAAayB,KAAK0C,GAAL,CAAS9K,QAAQ0G,kBAAjB,IAAuC1G,QAAQyE,KAA5D;AACAzE,oBAAQ4G,EAAR,GAAawB,KAAK2C,GAAL,CAAS/K,QAAQ0G,kBAAjB,IAAuC1G,QAAQyE,KAA5D;;AAEA;AACAzE,oBAAQ6G,SAAR,IAAqB7G,QAAQ2G,EAA7B;AACA3G,oBAAQ8G,SAAR,IAAqB9G,QAAQ4G,EAA7B;;AAEA;AACA5G,oBAAQ2G,EAAR,GAAayB,KAAK4C,KAAL,CAAWhL,QAAQ6G,SAAnB,CAAb;AACA7G,oBAAQ4G,EAAR,GAAawB,KAAK4C,KAAL,CAAWhL,QAAQ8G,SAAnB,CAAb;;AAEA;AACA9G,oBAAQ6G,SAAR,IAAqB7G,QAAQ2G,EAA7B;AACA3G,oBAAQ8G,SAAR,IAAqB9G,QAAQ4G,EAA7B;;AAEA;AACA5G,oBAAQ+G,aAAR,GAAwB/G,QAAQsD,CAAR,GAAYtD,QAAQ2G,EAA5C;AACA3G,oBAAQgH,aAAR,GAAwBhH,QAAQuD,CAAR,GAAYvD,QAAQ4G,EAA5C;AACH,SA1BD,MA0BO;AACH;AACA5G,oBAAQ+G,aAAR,GAAwB/G,QAAQsD,CAAhC;AACAtD,oBAAQgH,aAAR,GAAwBhH,QAAQuD,CAAhC;AACH;;AAED;AACA;AACA,YAAI,EAAEvD,QAAQ+G,aAAR,IAAyB,CAAzB,IAA+B/G,QAAQ+G,aAAR,GAAwB/G,QAAQD,KAAjC,IAA2CD,OAAOC,KAAlF,CAAJ,EAA8F;AAC1FC,oBAAQsD,CAAR,GAAYtD,QAAQ+G,aAApB;AACH,SAFD,MAEO,IAAI/G,QAAQ+G,aAAR,IAAyB,CAA7B,EAAgC;AACnC/G,oBAAQsD,CAAR,GAAY,CAAZ;AACH,SAFM,MAEA,IAAKtD,QAAQ+G,aAAR,GAAwB/G,QAAQD,KAAjC,IAA2CD,OAAOC,KAAtD,EAA6D;AAChEC,oBAAQsD,CAAR,GAAYxD,OAAOC,KAAP,GAAeC,QAAQD,KAAnC;AACH;;AAED,YAAI,EAAEC,QAAQgH,aAAR,IAAyB,CAAzB,IAA+BhH,QAAQgH,aAAR,GAAwBhH,QAAQC,MAAjC,IAA4CH,OAAOG,MAAnF,CAAJ,EAAgG;AAC5FD,oBAAQuD,CAAR,GAAYvD,QAAQgH,aAApB;AACH,SAFD,MAEO,IAAIhH,QAAQgH,aAAR,IAAyB,CAA7B,EAAgC;AACnChH,oBAAQuD,CAAR,GAAY,CAAZ;AACH,SAFM,MAEA,IAAKvD,QAAQgH,aAAR,GAAwBhH,QAAQC,MAAjC,IAA4CH,OAAOG,MAAvD,EAA+D;AAClED,oBAAQuD,CAAR,GAAYzD,OAAOG,MAAP,GAAgBD,QAAQC,MAApC;AACH;AACJ;;AAED;;AAEAgI;AACAC;;AAEA;;AAEA;AACA3C,gBAAY,KAAZ;AACAgB,uBAAmB/E,MAAnB,CAA0B,CAA1B;;AAEAC;AACA,SAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIM,WAAWJ,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC0I,iCAAyBpI,WAAWN,CAAX,CAAzB;AACH;;AAED,SAAK,IAAIA,MAAI,CAAb,EAAgBA,MAAImF,mBAAmBjF,MAAvC,EAA+CF,KAA/C,EAAoD;AAChD,YAAImF,mBAAmBnF,GAAnB,EAAsB6J,WAAtB,CAAkCC,IAAlC,KAA2C,cAA/C,EAA+D;AAC3D;AACA9F;;AAEA;AACA,gBAAI+F,iBAAiB5E,mBAAmBnF,GAAnB,CAArB;AACA+J,2BAAelI,eAAf;AACA1B,yBAAa4J,eAAehI,OAA5B;AACA,gBAAIY,gBAAgBF,cAAcG,OAAd,CAAsBmH,cAAtB,CAApB;AACAtH,0BAAcrC,MAAd,CAAqBuC,aAArB,EAAoC,CAApC;AACH,SAVD,MAUO,IAAIwC,mBAAmBnF,GAAnB,EAAsB6J,WAAtB,CAAkCC,IAAlC,KAA2C,aAA/C,EAA8D;AACjE;AACA9F;;AAEA3D;AACA,iBAAK,IAAIL,MAAI,CAAb,EAAgBA,MAAIM,WAAWJ,MAA/B,EAAuCF,KAAvC,EAA4C;AACxC+C,iCAAiBzC,WAAWN,GAAX,CAAjB;AACH;;AAED;AACA;AACH,SAXM,MAWA;AACHyB;AACA;AACH;AACJ;;AAED;AACA,QAAI1B,cAAc,SAAlB,EAA6B;AACzBuB,eAAOC,qBAAP,CAA6BC,QAA7B;AACH;AACJ;;AAED;AACA;AACA,SAASwI,WAAT,GAAuB;AACnB,QAAI,CAAC7I,uBAAL,EAA8B;AAC1B;AACAH,iBAASC,cAAT,CAAwB,eAAxB,EAAyCC,SAAzC,GAAqD,cAAc6C,kBAAkBC,kBAAhC,CAArD;;AAEA;AACAlD,gBAAQC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBrC,OAAOC,KAA/B,EAAsCD,OAAOG,MAA7C;;AAEAyI;AACAM;AACAC;AACAC;AACAW;AACAV;AACAS;;AAEA;AACAzB;AACH;;AAEDzF,WAAOC,qBAAP,CAA6ByI,WAA7B;AACH;;AAED;;AAEA,IAAIpL,UAAU,IAAIwG,MAAJ,EAAd;AACAzF;;AAEAsJ;AACA3H,OAAOC,qBAAP,CAA6BC,QAA7B;AACAF,OAAOC,qBAAP,CAA6ByI,WAA7B","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet keysDown = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 88;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet center = canvas.width / 2;\r\nlet maxEdge = canvas.width;\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            createActivePoint(26 * 16, center - 8, 0, 3.5),\r\n            fireBomb(2, 3 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 3),\r\n            fireBomb(2, 19 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 3),\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createActivePoint(5 * 16, center - 8, 0, 6),\r\n            fireBomb(2, 3 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 6),\r\n            fireBomb(2, 19 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 6),\r\n            fireVerticalLaser(15 * 16 + 8, 16, 0, 6)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createActivePoint(26 * 16, center - 8, 0, 7),\r\n            fireBomb(2, 3 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 7),\r\n            fireBomb(2, 19 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 7),\r\n\r\n            fireMovingVerticalLaser(20 * 16, 16, -1, 0, 7)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createPassivePoint(3 * 16 + 10, center - 8, 0, 11),\r\n            createPassivePoint(center - 8, 3 * 16 + 10, 0, 15),\r\n            createActivePoint(center - 8, 28 * 16 - 10, 0, 19),\r\n            fireBomb(3 * 16 + 2, 3 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireBomb(3 * 16 + 2, 19 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireBomb(19 * 16 + 2, 3 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireBomb(19 * 16 + 2, 19 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireMovingVerticalLaser(0, 16, 1.5, 0, 7),\r\n\r\n            fireMovingVerticalLaser(0, 16, 1.5, 2, 7),\r\n\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 4, 7),\r\n\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 6, 7),\r\n\r\n            fireMovingHorizontalLaser(maxEdge - 16, 16, -1.5, 8, 7),\r\n\r\n            fireMovingHorizontalLaser(maxEdge - 16, 16, -1.5, 10, 7)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n\r\n        console.log(\"Level 2 completed.\");\r\n        currentLevel++;\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let resumeGame = setTimeout(() => {\r\n            //Restarts the game.\r\n            diplayingGameOverScreen = false;\r\n            gameState = \"playing\";\r\n            blockie.state = \"playing\";\r\n            controlLevel();\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n            window.requestAnimationFrame(gameLoop);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction increaseLevel() {\r\n    currentLevel++;\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    permanentPoints += currentLevelPoints;\r\n\r\n    controlLevel();\r\n}\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.001;\r\n    }, 1);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n\r\n\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting, instanceAffectingObjectArray) {\r\n    let warningSeconds = 1;\r\n\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, passivePoints);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, activePoints);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = activePoints.indexOf(instance);\r\n            activePoints.splice(instanceIndex, 1);\r\n\r\n            updateAllObjects();\r\n            for (let i = 0; i < allObjects.length; i++) {\r\n                resolveInstances(allObjects[i]);\r\n            };\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, horizontalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, verticalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingHorizontalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingVerticalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, bombs);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [waitingTimeouts, passivePoints, activePoints, horizontalLasers, verticalLasers, movingHorizontalLasers,\r\n        movingVerticalLasers, bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#9C51FF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#9C51FF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#9C51FF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each WASD key changes the angle of Blockie's movement.\r\n        //Right\r\n        if (keysDown[68]) {\r\n            xInput++;\r\n        };\r\n\r\n        //Left\r\n        if (keysDown[65]) {\r\n            xInput--;\r\n        };\r\n\r\n        //Down\r\n        if (keysDown[83]) {\r\n            yInput++;\r\n        };\r\n\r\n        //Up\r\n        if (keysDown[87]) {\r\n            yInput--;\r\n        };\r\n\r\n        if (keysDown[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n            //animation.\r\n\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete keysDown[16];\r\n\r\n            initializeDash();\r\n        } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n            //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n            //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Right\r\n            if (keysDown[39]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[37]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[40]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[38]) {\r\n                yInput--;\r\n            };\r\n\r\n            initializeDash();\r\n        } else {\r\n            blockie.speed = 2;\r\n        };\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        checkCollisionsWithClass(allObjects[i]);\r\n    };\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timeout);\r\n            let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n            passivePoints.splice(instanceIndex, 1);\r\n        } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            updateAllObjects();\r\n            for (let i = 0; i < allObjects.length; i++) {\r\n                resolveInstances(allObjects[i]);\r\n            };\r\n\r\n            //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n            break;\r\n        } else {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}