{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","pointTwo","blockieAdjustment","oneHalf","cancelAwaitChain","Promise","all","createWall","fullScreen","threeEigths","fiveEigths","createActivePoint","pointSeven","createPassivePoint","oneEigth","oneFourth","sevenEigths","pointEight","console","log","increaseLevel","levelOne","error","levelTwo","gameState","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","blockie","state","sx","resolve","reject","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","controlLevel","window","requestAnimationFrame","restartLevel","angleMovingDegrees","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","currentLevel","permanentPoints","currentLevelPoints","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","HorizontalLaser","horizontalLasers","fireHorizontalLaser","width","VerticalLaser","verticalLasers","fireVerticalLaser","speed","MovingHorizontalLaser","movingHorizontalLasers","fireMovingHorizontalLaser","MovingVerticalLaser","movingVerticalLasers","fireMovingVerticalLaser","Bomb","bombs","fireBomb","Wall","walls","canvas","context","getContext","lineWidth","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","waitingTimeouts","collidingInstances","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","threeFourths","pointOne","pointThree","pointFour","pointFive","pointSix","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","floor","xTestingDistance","yTestingDistance","xChange","yChange","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 88;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = 0;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(pointTwo + blockieAdjustment, oneHalf + blockieAdjustment);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, threeEigths),\r\n            createWall(0, fiveEigths, fullScreen, threeEigths),\r\n            createActivePoint(pointSeven - 8, oneHalf - 8, 0),\r\n            createPassivePoint(oneHalf - 8, oneHalf - 8, 0, 10)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, threeEigths),\r\n            createWall(0, fiveEigths, oneEigth, threeEigths),\r\n            createWall(oneFourth, fiveEigths, oneHalf, oneFourth),\r\n            createWall(sevenEigths, fiveEigths, oneEigth, threeEigths),\r\n            createPassivePoint(pointTwo - 8, pointEight - 8, 0, 15),\r\n            createPassivePoint(pointSeven - 8, pointEight - 8, 0, 15),\r\n\r\n            createActivePoint(pointTwo - 8, oneHalf - 8, 4)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, threeEigths),\r\n            createWall(0, fiveEigths, threeEigths, threeEigths),\r\n            createWall(fiveEigths, 0, threeEigths, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointSeven - 8, 0),\r\n            createPassivePoint(oneHalf - 8, oneEigth - 8, 0, 10)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"Determination is key!\";\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Restarts the game.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                partyHats.splice(0);\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = `Our champion!<br>You beat level ${currentLevel}!`;\r\n                gameState = \"displayingMessage\";\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        function resumePlaying() {\r\n            //Restarts the game.\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                //Points are only made permanent once a level is completed and then it is reset.\r\n                permanentPoints += currentLevelPoints;\r\n                currentLevelPoints = 0;\r\n\r\n                currentLevel++;\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n}\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n    delete keysDown[16];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 32, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 32, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if (keysDown[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available free space in the direction Blockie is traveling by starting at his current\r\n                //location and moving in the direction of dx and dy.\r\n                let xChange = Math.min(blockie.dx - xTestingDistance, Math.sign(blockie.dx));\r\n                let yChange = Math.min(blockie.dy - yTestingDistance, Math.sign(blockie.dy));\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) < Math.abs(blockie.dx) - 1 && Math.abs(yTestingDistance) < Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    blockie.targetYLocation += yChange;\r\n\r\n                    xTestingDistance += xChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    xChange = Math.min(blockie.dx - xTestingDistance, Math.sign(blockie.dx));\r\n                    yChange = Math.min(blockie.dy - yTestingDistance, Math.sign(blockie.dy));\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation + yChange, walls);\r\n                };\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                xChange = Math.min(blockie.dx - xTestingDistance, Math.sign(blockie.dx));\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n\r\n                    xTestingDistance += xChange;\r\n\r\n                    xChange = Math.min(blockie.dx - xTestingDistance, Math.sign(blockie.dx));\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                yChange = Math.min(blockie.dy - yTestingDistance, Math.sign(blockie.dy));\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n\r\n                    yTestingDistance += yChange;\r\n\r\n                    yChange = Math.min(blockie.dy - yTestingDistance, Math.sign(blockie.dy));\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel();\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    if (gameState !== \"displayingMessage\") {\r\n        //Blockie is drawn last to appear over other instances when being destroyed. He is also drawn when restarting and finishing\r\n        //a level.\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}