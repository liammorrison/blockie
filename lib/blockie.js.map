{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","createPoint","Promise","all","fireMovingHorizontalLaser","fireMovingVerticalLaser","fireBomb","fireHorizontalLaser","console","log","currentLevel","controlLevel","levelOne","levelTwo","gameState","i","currentTimers","length","clearTimeout","splice","rejectInstances","waitingTimers","points","horizontalLasers","verticalLasers","movingHorizontalLasers","movingVerticalLasers","bombs","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","diplayingGameOverScreen","resumeGame","window","requestAnimationFrame","gameLoop","restartLevel","x","y","waitingSeconds","activeSeconds","setWaitingTimer","instance","point","push","setWarningTimers","destroyPoint","instanceIndex","indexOf","externalResolve","externalReject","timer","horizontalLaser","endFiring","verticalLaser","fireVerticalLaser","speed","movingHorizontalLaser","movingVerticalLaser","bomb","getContext","lineWidth","KeysPressed","currentPoints","xInput","yInput","colliding","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","collidingInstances","Player","spriteSideLength","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","waitingTimer","visible","blockieX","blockieY","objectArray","addCurrentTimer","removeCurrentTimer","currentTimerIndex","stopWaiting","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","Math","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage","drawPoints","currentInstance","strokeStyle","strokeRect","fillStyle","fillRect","drawHorizontalLasers","drawVerticalLasers","drawBombs","drawMovingHorizontalLasers","beginPath","moveTo","lineTo","sign","fill","drawMovingVerticalLasers","checkCollisionsWithClass","classArray","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 5;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet KeysPressed = [];\r\n\r\nlet currentLevel = 1;\r\nlet currentPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\nlet waitingTimers = [];\r\nlet points = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\nlet currentTimers = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass waitingTimer {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 24;\r\n        this.height = 24;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass horizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await createPoint(100, 100, 1, 3);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(0, 16, 1, 0, 7),\r\n            fireMovingVerticalLaser(0, 16, 1, 0, 7),\r\n            fireBomb(400, 400, 16, 16, 2, 2),\r\n            fireHorizontalLaser(200, 16, 1, 4)\r\n        ]);\r\n        await fireBomb(400, 400, 64, 64, 0, 4);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(0, 16, 1, 0, 7),\r\n            fireMovingVerticalLaser(0, 16, 1, 0, 7),\r\n            fireBomb(400, 400, 16, 16, 2, 2),\r\n            fireHorizontalLaser(200, 16, 1, 4)\r\n        ]);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(canvas.height - 16, 16, -1.5, 0, 4),\r\n            fireMovingVerticalLaser(canvas.width - 16, 16, -1.5, 1.5, 4),\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 3, 4),\r\n            fireMovingVerticalLaser(0, 16, 1.5, 4.5, 4)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        currentLevel++;\r\n        controlLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await fireBomb(100, 100, 32, 32, 1, 5);\r\n\r\n        console.log(\"Level completed.\");\r\n        currentLevel++;\r\n        controlLevel();\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    };\r\n\r\n    currentTimers.splice(0);\r\n\r\n    rejectInstances(waitingTimers);\r\n    rejectInstances(points);\r\n    rejectInstances(horizontalLasers);\r\n    rejectInstances(verticalLasers);\r\n    rejectInstances(movingHorizontalLasers);\r\n    rejectInstances(movingVerticalLasers);\r\n    rejectInstances(bombs);\r\n\r\n    //Removes all references to instances from arrays.\r\n    waitingTimers.splice(0);\r\n    points.splice(0);\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n    bombs.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let resumeGame = setTimeout(() => {\r\n            //Restarts the game.\r\n            diplayingGameOverScreen = false;\r\n            gameState = \"playing\";\r\n            blockie.state = \"playing\";\r\n            controlLevel();\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n            window.requestAnimationFrame(gameLoop);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction rejectInstances(objectArray) {\r\n    for (let i = 0; i < objectArray.length; i++) {\r\n        //Rejects the instances' Promises and timers and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timer);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers.\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a waitingTimer instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimer(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new waitingTimer();\r\n    waitingTimers.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimers.indexOf(instance);\r\n            waitingTimers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        instance.externalReject = reject;\r\n        instance.timer = stopWaiting;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPoint(x, y, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new point(x, y);\r\n    points.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let destroyPoint = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = points.indexOf(instance);\r\n            points.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n        instance.timer = destroyPoint;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new horizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new verticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new movingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new movingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimer(animateBlockieDestructing);\r\n            removeCurrentTimer(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimer(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPoints() {\r\n    for (let i = 0; i < points.length; i++) {\r\n        let currentInstance = points[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"Lime\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"Lime\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"White\";\r\n                context.strokeRect(currentInstance.x + 8, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"White\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"White\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"White\";\r\n\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y);\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y);\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 24, currentInstance.y);\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.width - 8, currentInstance.y);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"White\";\r\n\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x, currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x, currentInstance.height - 8);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    checkCollisionsWithClass(points);\r\n    checkCollisionsWithClass(horizontalLasers);\r\n    checkCollisionsWithClass(verticalLasers);\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"point\" && collidingInstances[i].state === \"firing\") {\r\n            //Adds points to the total.\r\n            currentPoints++;\r\n\r\n            //Resolves the point's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timer);\r\n            let instanceIndex = points.indexOf(collidingPoint);\r\n            points.splice(instanceIndex, 1);\r\n        } else if (collidingInstances[i].state === \"firing\") {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + currentPoints;\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawPoints();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}