{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","blockie","width","center","height","Promise","all","createActivePoint","fireHorizontalLaser","console","log","increaseLevel","levelOne","error","levelTwo","gameState","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","state","sx","resolve","reject","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","angleMovingDegrees","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","currentLevel","celebration","permanentPoints","currentLevelPoints","instanceAffecting","instanceAffectingObjectArray","warningSeconds","externalResolve","externalReject","timeout","visible","cancelAwaitChain","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","createPassivePoint","ActivePoint","activePoints","HorizontalLaser","horizontalLasers","VerticalLaser","verticalLasers","fireVerticalLaser","speed","MovingHorizontalLaser","movingHorizontalLasers","fireMovingHorizontalLaser","MovingVerticalLaser","movingVerticalLasers","fireMovingVerticalLaser","Bomb","bombs","fireBomb","canvas","context","getContext","lineWidth","xInput","yInput","colliding","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","waitingTimeouts","collidingInstances","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","maxEdge","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawPartyHats","checkCollisionsWithClass","classArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","cos","sin","floor","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 88;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = 0;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet center = canvas.width / 2;\r\nlet maxEdge = canvas.width;\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(8 * 16 - blockie.width / 2, center - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            createActivePoint(23 * 16, center - 8, 0, 6),\r\n            fireHorizontalLaser(100, 16, 0, 6)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n\r\n        console.log(\"Level 2 completed.\");\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"Determination is key!\";\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Restarts the game.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                window.requestAnimationFrame(gameLoop);\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, blockie.y - partyHatInstance.y);\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                partyHats.splice(0);\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = `Our champion!<br>You beat level ${currentLevel}!`;\r\n                gameState = \"displayingMessage\";\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let celebration = setTimeout(() => {\r\n            console.log(\"shrek\");\r\n            resolve(\"resolved\");\r\n        }, 2000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        function resumePlaying() {\r\n            //Restarts the game.\r\n            if (keysDown[16] || keysDown[32]) {\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                //Points are only made permanent once a level is completed.\r\n                permanentPoints += currentLevelPoints;\r\n\r\n                currentLevel++;\r\n                controlLevel();\r\n\r\n                window.requestAnimationFrame(gameLoop);\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n}\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n    delete keysDown[16];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting, instanceAffectingObjectArray) {\r\n    let warningSeconds = 1;\r\n\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, passivePoints);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y, firingSeconds);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, activePoints);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = activePoints.indexOf(instance);\r\n            activePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, horizontalLasers);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, verticalLasers);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingHorizontalLasers);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingVerticalLasers);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, bombs);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if (keysDown[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.testXLocation = blockie.x + blockie.dx;\r\n                blockie.testYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.testXLocation = blockie.x;\r\n                blockie.testYLocation = blockie.y;\r\n            }\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n            if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n                blockie.x = blockie.testXLocation;\r\n            } else if (blockie.testXLocation <= 0) {\r\n                blockie.x = 0;\r\n            } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n                blockie.x = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n                blockie.y = blockie.testYLocation;\r\n            } else if (blockie.testYLocation <= 0) {\r\n                blockie.y = 0;\r\n            } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n                blockie.y = canvas.height - blockie.height;\r\n            };\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        //Resets the collision flag to recheck every frame.\r\n        colliding = false;\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel();\r\n                break;\r\n            };\r\n        };\r\n\r\n        //Recalls the gameLoop for the next frame.\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState === \"playing\") {\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    if (gameState !== \"displayingMessage\") {\r\n        //Blockie is drawn last to appear over other instances when being destroyed. He is also drawn when restarting and finishing\r\n        //a level.\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}