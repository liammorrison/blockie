{"version":3,"sources":["../src/blockie.js"],"names":["canvas","document","getElementById","context","getContext","angleBlockieMovingRadians","angleBlockieMovingDegrees","blockieSpeed","KeysPressed","xInput","yInput","Player","x","y","sideLength","sx","testXLocation","testYLocation","sprite","createElement","src","blockie","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","key","loop","clearRect","width","height","cos","sin","round","drawImage","window","requestAnimationFrame"],"mappings":"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","file":"blockie.js","sourcesContent":["const canvas = document.getElementById('game');\r\nconst context = canvas.getContext('2d');\r\n\r\n//Variables\r\nlet angleBlockieMovingRadians = 0;\r\nlet angleBlockieMovingDegrees = 0;\r\nconst blockieSpeed = 2;\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.x = 64;\r\n        this.y = 64;\r\n        this.sideLength = 16;\r\n        this.sx = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie's sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement('img');\r\n        this.sprite.src = '../images/blockie.png';\r\n    };\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n}\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Adds all currently pressed keys as a key with a pair of true in the KeysPressed object.\r\ndocument.addEventListener('keydown', e => {\r\n    KeysPressed[e.key] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener('keyup', e => {\r\n    delete KeysPressed[e.key];\r\n});\r\n\r\nfunction loop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    angleBlockieMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed['d']) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed['a']) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed['s']) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed['w']) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        angleBlockieMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        angleBlockieMovingDegrees = convertRadiansToDegrees(angleBlockieMovingRadians);\r\n\r\n        //Stores the desired new location for Blockie by adding blockieSpeed in the input direction and adding that\r\n        //to Blockie's current location. This variable is then used to prevent Blockie from moving to certain places.\r\n        blockie.testXLocation = blockie.x + Math.cos(angleBlockieMovingRadians) * blockieSpeed;\r\n        blockie.testYLocation = blockie.y + Math.sin(angleBlockieMovingRadians) * blockieSpeed;\r\n    };\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. This is divided into x and y components so that\r\n    //Blockie can move diagonally against the canvas border.\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.sideLength) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.sideLength) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    };\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.sideLength * (Math.round(angleBlockieMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.sideLength, blockie.sideLength, blockie.x, blockie.y, blockie.sideLength, blockie.sideLength);\r\n\r\n    //Recalls the loop for the next frame.\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\n//Starts the game.\r\nwindow.requestAnimationFrame(loop);"]}