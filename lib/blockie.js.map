{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","pointOne","blockieAdjustment","pointEight","cancelAwaitChain","Promise","all","createWall","oneEigth","fullScreen","oneFourth","threeEigths","fiveEigths","createActivePoint","createPassivePoint","pointThree","fireMovingBomb","fireBomb","moveBlockie","sevenEigths","oneHalf","pointFour","threeFourths","loopFireMovingBombs","fireContinuallyMovingBomb","pointTwo","pointFive","pointSix","pointSeven","fireMovingActivePoint","console","log","currentLevel","increaseLevel","levelOne","error","levelTwo","levelThree","levelFour","levelFive","levelSix","levelSeven","levelEight","levelNine","levelTen","levelEleven","levelTwelve","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllInstances","allInstances","rejectInstances","destroyCountdownTimer","currentLevelPoints","gameState","blockie","state","sx","displayMessage","resetBlockieState","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","updateLevelPoints","calculateTotalPoints","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","xSpeed","ySpeed","MovingPassivePoint","movingPassivePoints","fireMovingPassivePoint","ActivePoint","activePoints","MovingActivePoint","movingActivePoints","speed","initialWaitingSeconds","fireMovingHorizontalLaser","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","width","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","loopFireBombs","Bomb","bombs","MovingBomb","movingBombs","directionChangeSeconds","directionChangeTimeout","Wall","walls","fireMovingWall","loopFireMovingWalls","MovingWall","movingWalls","fireContinuallyMovingWall","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","drawImage","canvas","getContext","lineWidth","totalPoints","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","allInteractiveInstances","allCollisionInstances","collidingInstances","levelPoints","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","xTarget","yTarget","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","moveBlockieAwayFromMovingWalls","checkCollisionsWithClass","collidingMovingWallInstance","checkBlockieOutsideBorder","checkTestInstancesColliding","updateAllInteractiveInstances","updateAllCollisionInstances","moveMovingHorizontalLasers","moveMovingVerticalLasers","moveMovingPassivePoints","moveMovingActivePoints","moveMovingBombs","moveMovingWalls","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawMovingPassivePoints","drawActivePoints","drawMovingActivePoints","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawMovingBombs","drawWalls","drawMovingWalls","drawPartyHats","classArray","checkInstancesColliding","checkCollisionsWithClasses","classesArray","currentClass","checkTestCollisionsWithClasses","instanceOneX","instanceOneY","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","createCountdownTimer","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xDir","yDir","lastAvailableX","lastAvailableY","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet currentLevelPoints = 0;\r\nlet totalPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet movingPassivePoints = [];\r\nlet activePoints = [];\r\nlet movingActivePoints = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet movingBombs = [];\r\nlet walls = [];\r\nlet movingWalls = [];\r\nlet partyHats = [];\r\n\r\n//Used in for loops to apply a function to many objects.\r\nlet allInstances = [];\r\nlet allInteractiveInstances = [];\r\nlet allCollisionInstances = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet levelPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.xTarget = this.x;\r\n        this.yTarget = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass MovingPassivePoint {\r\n    constructor(x, y, xSpeed, ySpeed, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingActivePoint {\r\n    constructor(x, y, xSpeed, ySpeed, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingBomb {\r\n    constructor(x, y, width, height, xSpeed, ySpeed) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Walls are always \"firing\" and visible.\r\n        this.state = \"firing\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass MovingWall {\r\n    constructor(x, y, width, height, xSpeed, ySpeed) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //Walls are always \"firing\" and visible.\r\n        this.state = \"firing\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(pointOne + blockieAdjustment, pointEight + blockieAdjustment);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, oneEigth, oneEigth, 2 * 16),\r\n            createWall(oneEigth, 0, oneEigth, fullScreen),\r\n            createWall(oneFourth, oneEigth, oneEigth, 2 * 16),\r\n            createWall(threeEigths, 0, fiveEigths, fullScreen),\r\n            createActivePoint(pointOne - 8, pointOne - 8, 0),\r\n            createPassivePoint(pointThree - 8, pointOne - 8, 0, 8.5),\r\n\r\n            fireMovingBomb(oneFourth, fullScreen, oneEigth, fullScreen, 0, -2, 0, 3.45),\r\n            fireBomb(oneFourth, 6 * 16, oneEigth, 26 * 16, 3.45, 12),\r\n\r\n            fireMovingBomb(0, fullScreen, oneEigth, fullScreen, 0, -1.7, 4.5, 12),\r\n\r\n            fireBomb(0, 0, oneEigth, oneEigth, 1.3, 12)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(pointOne - 8, pointOne - 8);\r\n\r\n        await Promise.all([\r\n            createWall(0, oneEigth, 14 * 16, sevenEigths),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createWall(14 * 16, 25 * 16, oneEigth, 2 * 16),\r\n            createActivePoint(oneHalf - 8, pointEight - 8, 0),\r\n\r\n            fireMovingBomb(14 * 16, 33 * 16, oneEigth, 34 * 16, 0, -0.45, 0, 20.5),\r\n            fireBomb(pointFour, 0, oneEigth, fullScreen, 20.5, 1000000)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, oneEigth),\r\n            createWall(fiveEigths, 0, threeEigths, oneEigth),\r\n            createWall(0, oneEigth, oneEigth, threeFourths),\r\n            createWall(oneFourth, oneFourth, oneEigth, oneHalf),\r\n            createWall(fiveEigths, oneFourth, oneEigth, oneHalf),\r\n            createWall(sevenEigths, oneEigth, oneEigth, threeFourths),\r\n            createWall(0, sevenEigths, threeEigths, oneEigth),\r\n            createWall(fiveEigths, sevenEigths, threeEigths, oneEigth),\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n\r\n            loopFireMovingBombs(oneEigth, oneFourth, oneEigth, 2 * 16, 0, 1.2, 0, 2, 4),\r\n\r\n            loopFireMovingBombs(threeEigths, oneFourth, oneFourth, 2 * 16, 0, 1.86, 0, 1, 2),\r\n            loopFireMovingBombs(threeEigths, oneFourth, oneFourth, 2 * 16, 0, 1.86, 2, 1, 2),\r\n\r\n            loopFireMovingBombs(threeFourths, oneEigth, oneEigth, 2 * 16, 0, 2.35, 0, 0.1, 2.5),\r\n            loopFireMovingBombs(threeFourths, oneEigth, oneEigth, 2 * 16, 0, 2.35, 1.2, 0.1, 2.5),\r\n            loopFireMovingBombs(threeFourths, oneEigth, oneEigth, 2 * 16, 0, 2.35, 2.4, 0.1, 2.5)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(oneHalf + blockieAdjustment, pointOne + blockieAdjustment);\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, fullScreen),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointEight - 8, 0),\r\n\r\n            fireContinuallyMovingBomb(6 * 16, oneEigth, oneEigth, 2 * 16, 1.79, 0, 0, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, pointTwo, oneEigth, 2 * 16, 1.79, 0, 0.6, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, oneFourth, oneEigth, 2 * 16, 1.79, 0, 1.2, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, pointThree, oneEigth, 2 * 16, 1.79, 0, 1.8, 2.4),\r\n            fireContinuallyMovingBomb(22 * 16, threeEigths, oneEigth, 2 * 16, -1.79, 0, 0, 2.4),\r\n            fireContinuallyMovingBomb(22 * 16, pointFour, oneEigth, 2 * 16, -1.79, 0, 0.6, 2.4),\r\n            fireContinuallyMovingBomb(22 * 16, oneHalf, oneEigth, 2 * 16, -1.79, 0, 1.2, 2.4),\r\n            fireContinuallyMovingBomb(22 * 16, pointFive, oneEigth, 2 * 16, -1.79, 0, 1.8, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, fiveEigths, oneEigth, 2 * 16, 1.79, 0, 0, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, pointSix, oneEigth, 2 * 16, 1.79, 0, 0.6, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, threeFourths, oneEigth, 2 * 16, 1.79, 0, 1.2, 2.4),\r\n            fireContinuallyMovingBomb(6 * 16, pointSeven, oneEigth, 2 * 16, 1.79, 0, 1.8, 2.4)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(oneEigth, 0, pointThree, oneEigth),\r\n            createWall(pointFive, 0, threeEigths, oneEigth),\r\n            createWall(oneEigth, sevenEigths, pointThree, oneEigth),\r\n            createWall(pointFive, sevenEigths, threeEigths, oneEigth),\r\n            createWall(0, 0, oneEigth, fullScreen),\r\n            createWall(sevenEigths, 0, oneEigth, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n\r\n            fireContinuallyMovingBomb(oneEigth, oneEigth, threeFourths, pointOne, 0, 1.4, 0, 4.2),\r\n            fireContinuallyMovingBomb(oneEigth, pointSeven, threeFourths, pointOne, 0, -1.4, 0, 4.2),\r\n\r\n            fireContinuallyMovingBomb(threeFourths, oneEigth, oneEigth, threeFourths, -1.28, 0, 0, 4.2)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(oneHalf + blockieAdjustment, pointOne + blockieAdjustment);\r\n\r\n        await Promise.all([\r\n            createWall(oneEigth, oneEigth, threeFourths, oneEigth),\r\n\r\n            createWall(oneEigth, oneFourth, oneEigth, oneEigth),\r\n            createWall(threeEigths, oneFourth, oneFourth, oneEigth),\r\n            createWall(threeFourths, oneFourth, oneFourth, oneEigth),\r\n\r\n            createWall(oneEigth, oneHalf, pointThree, oneEigth),\r\n            createWall(pointFive, oneHalf, pointThree, oneEigth),\r\n\r\n            createWall(0, fiveEigths, sevenEigths, oneFourth),\r\n            createWall(sevenEigths, pointSeven, oneEigth, pointOne),\r\n            fireMovingActivePoint(pointEight - 8, pointEight - 8, -0.42, 0, 0),\r\n            createPassivePoint(pointEight - 8, pointTwo - 8, 3, 7),\r\n\r\n            loopFireMovingBombs(fullScreen, threeEigths, oneEigth, oneEigth, -9, 0, 0, 0, 1),\r\n\r\n            fireBomb(0, sevenEigths, oneEigth, oneEigth, 0, 19.3)\r\n        ]);\r\n\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(`Level ${currentLevel} completed.`);\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelThree() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFour() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFive() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSix() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSeven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEight() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelNine() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTen() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEleven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwelve() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllInstances();\r\n    for (let i = 0; i < allInstances.length; i++) {\r\n        rejectInstances(allInstances[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        resetBlockieState();\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene, 0.17);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    updateLevelPoints(currentLevel);\r\n    currentLevelPoints = 0;\r\n    calculateTotalPoints();\r\n\r\n    currentLevel++;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n        case 3:\r\n            levelThree();\r\n            break;\r\n        case 4:\r\n            levelFour();\r\n            break;\r\n        case 5:\r\n            levelFive();\r\n            break;\r\n        case 6:\r\n            levelSix();\r\n            break;\r\n        case 7:\r\n            levelSeven();\r\n            break;\r\n        case 8:\r\n            levelEight();\r\n            break;\r\n        case 9:\r\n            levelNine();\r\n            break;\r\n        case 10:\r\n            levelTen();\r\n            break;\r\n        case 11:\r\n            levelEleven();\r\n            break;\r\n        case 12:\r\n            levelTwelve();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Placed here to draw Blockie with a PartyHat during increaseLevel().\r\n            partyHats.splice(0);\r\n\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                resetBlockieState();\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n};\r\n\r\n//Adjusts Blockie's location to prevent wall clipping in screen transitions.\r\nfunction moveBlockie(x, y) {\r\n    blockie.x = x;\r\n    blockie.y = y;\r\n};\r\n\r\nfunction moveBlockieAwayFromMovingWalls() {\r\n    //Loops through each moving wall that Blockie is touching and pushes Blockie away from it.\r\n    checkCollisionsWithClass(movingWalls);\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        let collidingMovingWallInstance = collidingInstances[i];\r\n        preventingMovement = false;\r\n\r\n        //Checks if Blockie would be not touching the current moving wall if he moved with the wall's xSpeed, and if so, \r\n        //\"pushes\" Blockie there.\r\n        preventingMovement = false;\r\n        checkBlockieOutsideBorder(blockie, blockie.x + collidingMovingWallInstance.xSpeed, blockie.y);\r\n        checkTestInstancesColliding(blockie, blockie.x + collidingMovingWallInstance.xSpeed, blockie.y, collidingMovingWallInstance);\r\n        if (!preventingMovement) {\r\n            blockie.x += collidingMovingWallInstance.xSpeed;\r\n            break;\r\n        };\r\n\r\n        //Checks if Blockie would be not touching the current moving wall if he moved with the wall's ySpeed, and if so, \r\n        //\"pushes\" Blockie there.\r\n        preventingMovement = false;\r\n        checkBlockieOutsideBorder(blockie, blockie.x, blockie.y + collidingMovingWallInstance.ySpeed);\r\n        checkTestInstancesColliding(blockie, blockie.x, blockie.y + collidingMovingWallInstance.ySpeed, collidingMovingWallInstance);\r\n        if (!preventingMovement) {\r\n            blockie.y += collidingMovingWallInstance.ySpeed;\r\n            break;\r\n        };\r\n    };\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingPassivePoint(x, y, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingPassivePoint(x, y, xSpeed, ySpeed, firingSeconds);\r\n    movingPassivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingPassivePoints.indexOf(instance);\r\n            movingPassivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingActivePoint(x, y, xSpeed, ySpeed, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingActivePoint(x, y, xSpeed, ySpeed);\r\n    movingActivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingHorizontalLaser(y, height, speed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingVerticalLaser(x, width, speed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireBomb(x, y, width, height, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingBombs(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingBomb(x, y, width, height, xSpeed, ySpeed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingBomb(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingBomb(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingBomb(x, y, width, height, xSpeed, ySpeed);\r\n    movingBombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingBombs.indexOf(instance);\r\n            movingBombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireContinuallyMovingBomb(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, directionChangeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingBomb(x, y, width, height, xSpeed, ySpeed);\r\n    movingBombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Continually switches the sign of the wall's speed over each interval of the set parameter of time.\r\n        function directionChangeTimeout() {\r\n            instance.timeout = setTimeout(() => {\r\n                directionChangeTimeout();\r\n\r\n                //Makes the wall switch directions.\r\n                instance.xSpeed *= -1;\r\n                instance.ySpeed *= -1;\r\n            }, directionChangeSeconds * 1000);\r\n        };\r\n\r\n        directionChangeTimeout();\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingWalls(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingWall(x, y, width, height, xSpeed, ySpeed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingWall(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingWall(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingWall(x, y, width, height, xSpeed, ySpeed);\r\n    movingWalls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingWalls.indexOf(instance);\r\n            movingWalls.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireContinuallyMovingWall(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, directionChangeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingWall(x, y, width, height, xSpeed, ySpeed);\r\n    movingWalls.push(instance);\r\n\r\n    //Creates a timeout for the instance's direction changing and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Continually switches the sign of the wall's speed over each interval of the set parameter of time.\r\n        function directionChangeTimeout() {\r\n            instance.timeout = setTimeout(() => {\r\n                directionChangeTimeout();\r\n\r\n                //Makes the wall switch directions.\r\n                instance.xSpeed *= -1;\r\n                instance.ySpeed *= -1;\r\n            }, directionChangeSeconds * 1000);\r\n        };\r\n\r\n        directionChangeTimeout();\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllInstances() {\r\n    allInstances = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        movingPassivePoints,\r\n        activePoints,\r\n        movingActivePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        movingBombs,\r\n        walls,\r\n        movingWalls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveInstances() {\r\n    allInteractiveInstances = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        movingPassivePoints,\r\n        activePoints,\r\n        movingActivePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        movingBombs\r\n    ];\r\n};\r\n\r\nfunction updateAllCollisionInstances() {\r\n    allCollisionInstances = [\r\n        walls,\r\n        movingWalls\r\n    ];\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingPassivePoints() {\r\n    for (let i = 0; i < movingPassivePoints.length; i++) {\r\n        if (movingPassivePoints[i].state !== \"warning\") {\r\n            movingPassivePoints[i].x += movingPassivePoints[i].xSpeed;\r\n            movingPassivePoints[i].y += movingPassivePoints[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingActivePoints() {\r\n    for (let i = 0; i < movingActivePoints.length; i++) {\r\n        if (movingActivePoints[i].state !== \"warning\") {\r\n            movingActivePoints[i].x += movingActivePoints[i].xSpeed;\r\n            movingActivePoints[i].y += movingActivePoints[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingBombs() {\r\n    for (let i = 0; i < movingBombs.length; i++) {\r\n        if (movingBombs[i].state !== \"warning\") {\r\n            movingBombs[i].x += movingBombs[i].xSpeed;\r\n            movingBombs[i].y += movingBombs[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingWalls() {\r\n    for (let i = 0; i < movingWalls.length; i++) {\r\n        if (movingWalls[i].state !== \"warning\") {\r\n            movingWalls[i].x += movingWalls[i].xSpeed;\r\n            movingWalls[i].y += movingWalls[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingPassivePoints() {\r\n    for (let i = 0; i < movingPassivePoints.length; i++) {\r\n        let currentInstance = movingPassivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingActivePoints() {\r\n    for (let i = 0; i < movingActivePoints.length; i++) {\r\n        let currentInstance = movingActivePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingBombs() {\r\n    for (let i = 0; i < movingBombs.length; i++) {\r\n        let currentInstance = movingBombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawMovingWalls() {\r\n    for (let i = 0; i < movingWalls.length; i++) {\r\n        let currentInstance = movingWalls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    collidingInstances.splice(0);\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkCollisionsWithClasses(classesArray) {\r\n    collidingInstances.splice(0);\r\n\r\n    for (let i = 0; i < classesArray.length; i++) {\r\n        let currentClass = classesArray[i];\r\n        for (let i = 0; i < currentClass.length; i++) {\r\n            checkInstancesColliding(blockie, currentClass[i]);\r\n        };\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClasses(instanceOneX, instanceOneY, classesArray) {\r\n    preventingMovement = false;\r\n\r\n    checkBlockieOutsideBorder(blockie, instanceOneX, instanceOneY);\r\n\r\n    for (let i = 0; i < classesArray.length; i++) {\r\n        let currentClass = classesArray[i];\r\n        for (let i = 0; i < currentClass.length; i++) {\r\n            checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, currentClass[i]);\r\n        };\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    }\r\n};\r\n\r\n//Checks if an instance (Blockie) is outside of the game canvas.\r\nfunction checkBlockieOutsideBorder(instanceOne, instanceOneX, instanceOneY) {\r\n    if (instanceOneX < 0 || canvas.width < (instanceOneX + instanceOne.width)) {\r\n        preventingMovement = true;\r\n    } else if (instanceOneY < 0 || canvas.height < (instanceOneY + instanceOne.height)) {\r\n        preventingMovement = true;\r\n    };\r\n}\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Point Functions\r\n\r\nfunction updateLevelPoints(currentLevel) {\r\n    levelPoints[currentLevel - 1] = currentLevelPoints;\r\n};\r\n\r\nfunction calculateTotalPoints() {\r\n    totalPoints = 0;\r\n    for (let i = 0; i < levelPoints.length; i++) {\r\n        totalPoints += levelPoints[i];\r\n    };\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene, secondsPerFrame) {\r\n    let cutsceneSideLength = 512;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 0, 0, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Other Instances' Movements\r\n\r\n        moveMovingPassivePoints();\r\n        moveMovingActivePoints();\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n        moveMovingBombs();\r\n        moveMovingWalls();\r\n\r\n        //Collision Handling\r\n\r\n        //\"Pushes\" Blockie away from walls that just moved to his location. Needed to allow Blockie to move.\r\n        moveBlockieAwayFromMovingWalls();\r\n\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.xTarget = blockie.x + blockie.dx;\r\n                blockie.yTarget = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.xTarget = blockie.x;\r\n                blockie.yTarget = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            updateAllCollisionInstances();\r\n            checkTestCollisionsWithClasses(blockie.xTarget, blockie.yTarget, allCollisionInstances);\r\n\r\n            //Moves Blockie to an open space if he is trying to move into a collision instance.\r\n            if (preventingMovement) {\r\n                //Resets Blockie's target location to his current location because there is a 100% chance that space is clear.\r\n                blockie.xTarget = blockie.x;\r\n                blockie.yTarget = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xDir = Math.sign(blockie.dx);\r\n                let yDir = Math.sign(blockie.dy);\r\n                let lastAvailableX = blockie.xTarget;\r\n                let lastAvailableY = blockie.yTarget;\r\n\r\n                //Finds the last free space in the direction that Blockie is moving in. Stops checking for more spaces once \r\n                //Blockie has moved past his dx or dy each frame.\r\n                while (Math.abs(xChange) < Math.abs(blockie.dx) || Math.abs(yChange) < Math.abs(blockie.dy)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dx) - xChange < 1) {\r\n                        xChange += blockie.dx - xChange;\r\n                    } else {\r\n                        xChange += xDir;\r\n                    };\r\n\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dy) - yChange < 1) {\r\n                        yChange += blockie.dy - yChange;\r\n                    } else {\r\n                        yChange += yDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget + xChange, blockie.yTarget + yChange, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableX = blockie.xTarget + xChange;\r\n                        lastAvailableY = blockie.yTarget + yChange;\r\n                    };\r\n                };\r\n\r\n                //Sets Blockie's location to the last available one in the direction that he's moving in.\r\n                blockie.xTarget = lastAvailableX;\r\n                blockie.yTarget = lastAvailableY;\r\n\r\n                //Resets dx and dy to be relative to his new position.\r\n                blockie.dx = blockie.x + blockie.dx - blockie.xTarget;\r\n                blockie.dy = blockie.y + blockie.dy - blockie.yTarget;\r\n                xChange = 0;\r\n                yChange = 0;\r\n\r\n                //Independently checks along the x-axis for an available space after moving in Blockie's exact direction (this\r\n                //only activates when moving diagonally and allows for \"sliding\").\r\n                while (Math.abs(xChange) < Math.abs(blockie.dx)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dx) - xChange < 1) {\r\n                        xChange += blockie.dx - xChange;\r\n                    } else {\r\n                        xChange += xDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget + xChange, blockie.yTarget, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableX = blockie.xTarget + xChange;\r\n                    };\r\n                };\r\n\r\n                blockie.xTarget = lastAvailableX;\r\n\r\n                //Independently checks along the y-axis for an available space after moving in Blockie's exact direction (this\r\n                //only activates when moving diagonally and allows for \"sliding\").\r\n                while (Math.abs(yChange) < Math.abs(blockie.dy)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dy) - yChange < 1) {\r\n                        yChange += blockie.dy - yChange;\r\n                    } else {\r\n                        yChange += yDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget, blockie.yTarget + yChange, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableY = blockie.yTarget + yChange;\r\n                    };\r\n                };\r\n\r\n                blockie.yTarget = lastAvailableY;\r\n            };\r\n\r\n            blockie.x = blockie.xTarget;\r\n            blockie.y = blockie.yTarget;\r\n        };\r\n\r\n        //Collision Handling\r\n\r\n        //\"Pushes\" Blockie away from walls that he moved to.\r\n        moveBlockieAwayFromMovingWalls();\r\n\r\n        //Is Blockie Being Crushed?\r\n\r\n        //Checks if Blockie is colliding after everything has moved, and if so, restarts the level.\r\n        checkTestCollisionsWithClasses(blockie.x, blockie.y, allCollisionInstances);\r\n        if (preventingMovement) {\r\n            restartLevel(\"died\");\r\n        };\r\n\r\n        //Interactivity Handling\r\n\r\n        updateAllInteractiveInstances();\r\n        checkCollisionsWithClasses(allInteractiveInstances);\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"MovingPassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = movingPassivePoints.indexOf(collidingPoint);\r\n                movingPassivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\" || collidingInstances[i].constructor.name === \"MovingActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllInstances();\r\n                for (let i = 0; i < allInstances.length; i++) {\r\n                    resolveInstances(allInstances[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawPassivePoints();\r\n        drawMovingPassivePoints();\r\n        drawActivePoints();\r\n        drawMovingActivePoints();\r\n        drawWalls();\r\n        drawMovingWalls();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n        drawMovingBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}