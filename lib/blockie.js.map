{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","createActivePoint","center","fireBomb","maxEdge","fireVerticalLaser","fireMovingVerticalLaser","createPassivePoint","fireMovingHorizontalLaser","console","log","increaseLevel","levelOne","currentLevel","error","levelTwo","gameState","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","displayingGameOverScreen","resumeGame","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","instanceAffecting","instanceAffectingObjectArray","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","y","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","push","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","resolveInstances","HorizontalLaser","horizontalLasers","fireHorizontalLaser","VerticalLaser","verticalLasers","speed","MovingHorizontalLaser","movingHorizontalLasers","MovingVerticalLaser","movingVerticalLasers","Bomb","bombs","getContext","lineWidth","keysDown","permanentPoints","currentLevelPoints","xInput","yInput","colliding","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","waitingTimeouts","collidingInstances","Player","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","blockieX","blockieY","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","fillStyle","fillRect","Math","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","min","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","checkCollisionsWithClass","classArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet displayingGameOverScreen = false;\r\nlet keysDown = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 88;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet center = canvas.width / 2;\r\nlet maxEdge = canvas.width;\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            createActivePoint(26 * 16, center - 8, 0, 3.5),\r\n            fireBomb(2, 3 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 3),\r\n            fireBomb(2, 19 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 3),\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createActivePoint(5 * 16, center - 8, 0, 6),\r\n            fireBomb(2, 3 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 6),\r\n            fireBomb(2, 19 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 6),\r\n            fireVerticalLaser(15 * 16 + 8, 16, 0, 6)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createActivePoint(26 * 16, center - 8, 0, 7),\r\n            fireBomb(2, 3 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 7),\r\n            fireBomb(2, 19 * 16 + 2, maxEdge - 4, 10 * 16 - 4, 0, 7),\r\n\r\n            fireMovingVerticalLaser(20 * 16, 16, -1, 0, 7)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createPassivePoint(3 * 16 + 10, center - 8, 0, 11),\r\n            createPassivePoint(center - 8, 3 * 16 + 10, 0, 15),\r\n            createActivePoint(center - 8, 28 * 16 - 10, 0, 19),\r\n            fireBomb(3 * 16 + 2, 3 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireBomb(3 * 16 + 2, 19 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireBomb(19 * 16 + 2, 3 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireBomb(19 * 16 + 2, 19 * 16 + 2, 10 * 16 - 4, 10 * 16 - 4, 0, 19),\r\n            fireMovingVerticalLaser(0, 16, 1.5, 0, 7),\r\n\r\n            fireMovingVerticalLaser(0, 16, 1.5, 2, 7),\r\n\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 4, 7),\r\n\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 6, 7),\r\n\r\n            fireMovingHorizontalLaser(maxEdge - 16, 16, -1.5, 8, 7),\r\n\r\n            fireMovingHorizontalLaser(maxEdge - 16, 16, -1.5, 10, 7)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n\r\n        console.log(\"Level 2 completed.\");\r\n        currentLevel++;\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    displayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let resumeGame = setTimeout(() => {\r\n            //Restarts the game.\r\n            displayingGameOverScreen = false;\r\n            gameState = \"playing\";\r\n            blockie.state = \"playing\";\r\n            controlLevel();\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n            window.requestAnimationFrame(gameLoop);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction increaseLevel() {\r\n    currentLevel++;\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    permanentPoints += currentLevelPoints;\r\n\r\n    controlLevel();\r\n}\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n}\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting, instanceAffectingObjectArray) {\r\n    let warningSeconds = 1;\r\n\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, passivePoints);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y, firingSeconds);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, activePoints);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = activePoints.indexOf(instance);\r\n            activePoints.splice(instanceIndex, 1);\r\n\r\n            updateAllObjects();\r\n            for (let i = 0; i < allObjects.length; i++) {\r\n                resolveInstances(allObjects[i]);\r\n            };\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, horizontalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, verticalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingHorizontalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingVerticalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, bombs);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [waitingTimeouts, passivePoints, activePoints, horizontalLasers, verticalLasers, movingHorizontalLasers,\r\n        movingVerticalLasers, bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState !== \"restartingLevel\") {\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#9C51FF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#9C51FF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#9C51FF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#9C51FF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            } else {\r\n                delete keysDown[e.keyCode];\r\n            }\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each WASD key changes the angle of Blockie's movement.\r\n        //Right\r\n        if (keysDown[68]) {\r\n            xInput++;\r\n        };\r\n\r\n        //Left\r\n        if (keysDown[65]) {\r\n            xInput--;\r\n        };\r\n\r\n        //Down\r\n        if (keysDown[83]) {\r\n            yInput++;\r\n        };\r\n\r\n        //Up\r\n        if (keysDown[87]) {\r\n            yInput--;\r\n        };\r\n\r\n        if (keysDown[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n            //animation.\r\n\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete keysDown[16];\r\n\r\n            initializeDash();\r\n        } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n            //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n            //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Right\r\n            if (keysDown[39]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[37]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[40]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[38]) {\r\n                yInput--;\r\n            };\r\n\r\n            initializeDash();\r\n        } else {\r\n            blockie.speed = 2;\r\n        };\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        checkCollisionsWithClass(allObjects[i]);\r\n    };\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timeout);\r\n            let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n            passivePoints.splice(instanceIndex, 1);\r\n        } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            updateAllObjects();\r\n            for (let i = 0; i < allObjects.length; i++) {\r\n                resolveInstances(allObjects[i]);\r\n            };\r\n\r\n            //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n            break;\r\n        } else {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!displayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}