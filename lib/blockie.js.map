{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","createPoint","fireMovingHorizontalLaser","fireMovingVerticalLaser","console","log","currentLevel","controlLevel","levelOne","levelTwo","gameState","i","currentPromiseRejectFunctions","length","currentTimers","clearTimeout","splice","points","horizontalLasers","verticalLasers","bombs","movingHorizontalLasers","movingVerticalLasers","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","rejectInstances","diplayingGameOverScreen","resumeGame","window","requestAnimationFrame","gameLoop","restartLevel","x","y","waitingSeconds","activeSeconds","stopWaiting","removeCurrentPromiseRejectFunction","removeCurrentTimer","addCurrentPromiseRejectFunction","addCurrentTimer","instance","point","push","setWarningTimers","destroyPoint","instanceIndex","indexOf","externalResolve","externalReject","timer","horizontalLaser","endFiring","fireHorizontalLaser","verticalLaser","fireVerticalLaser","bomb","fireBomb","speed","movingHorizontalLaser","movingVerticalLaser","getContext","lineWidth","KeysPressed","currentPoints","xInput","yInput","colliding","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","collidingInstances","Player","spriteSideLength","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","visible","blockieX","blockieY","currentPromiseRejectFunctionIndex","currentTimerIndex","objectArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","Math","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage","drawPoints","currentInstance","strokeStyle","strokeRect","fillStyle","fillRect","drawHorizontalLasers","drawVerticalLasers","drawBombs","drawMovingHorizontalLasers","beginPath","moveTo","lineTo","sign","fill","drawMovingVerticalLasers","checkCollisionsWithClass","classArray","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 5;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet KeysPressed = [];\r\n\r\nlet currentLevel = 1;\r\nlet currentPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet points = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = blockie.width;\r\n        this.height = blockie.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timer;\r\n    }\r\n}\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass movingHorizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n        this.speed = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingVerticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n        this.speed = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            createPoint(100, 100, 0, 7),\r\n            fireMovingHorizontalLaser(24 * 16, 16, -1, 0, 4.5)\r\n        ]);\r\n        await fireMovingVerticalLaser(24 * 16, 16, -1, 0.5, 4.5);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(0, 16, 1, 0, 7),\r\n            fireMovingVerticalLaser(0, 16, 1, 0, 7)\r\n        ]);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(canvas.height - 16, 16, -1.5, 0, 4),\r\n            fireMovingVerticalLaser(canvas.width - 16, 16, -1.5, 1.5, 4),\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 3, 4),\r\n            fireMovingVerticalLaser(0, 16, 1.5, 4.5, 4)\r\n        ]);\r\n\r\n        console.log(\"Level completed.\");\r\n        currentLevel++;\r\n        controlLevel();\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await fireMovingHorizontalLaser(24 * 16, 16, -1, 0.5, 4.5);\r\n\r\n        console.log(\"Level completed.\");\r\n        currentLevel++;\r\n        controlLevel();\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Calls the reject function on every currently-running promise so that they stop hurting performance.\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n\r\n\r\n\r\n    //Removes all references to instances from arrays.\r\n    points.splice(0);\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    bombs.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    rejectInstances(points);\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    //Restarts the game after the timer ends.\r\n    let resumeGame = setTimeout(() => {\r\n        diplayingGameOverScreen = false;\r\n        gameState = \"playing\";\r\n        blockie.state = \"playing\";\r\n        controlLevel();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        window.requestAnimationFrame(gameLoop);\r\n    }, 1000);\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Adds a currently-running promise's reject function to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(reject) {\r\n    currentPromiseRejectFunctions.push(reject);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise's reject function from the array of currently-running promise reject functions.\r\nfunction removeCurrentPromiseRejectFunction(reject) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(reject);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers.\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\nfunction rejectInstances(objectArray) {\r\n    for (let i = 0; i < objectArray.length; i++) {\r\n        //Rejects the instances' Promises and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timer);\r\n        objectArray.splice(i, 1);\r\n    }\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPoint(x, y, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new point();\r\n    points.push(instance);\r\n    instance.x = x;\r\n    instance.y = y;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let destroyPoint = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = points.indexOf(instance);\r\n            points.splice(instanceIndex, 1);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n        instance.timer = destroyPoint;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new verticalLaser();\r\n    verticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new bomb();\r\n    bombs.push(instance);\r\n    instance.x = x;\r\n    instance.y = y;\r\n    instance.width = width;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new movingHorizontalLaser();\r\n    movingHorizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n    instance.speed = speed;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new movingVerticalLaser();\r\n    movingVerticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n    instance.speed = speed;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimer(animateBlockieDestructing);\r\n            removeCurrentTimer(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimer(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPoints() {\r\n    for (let i = 0; i < points.length; i++) {\r\n        let currentInstance = points[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"Lime\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"Lime\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"White\";\r\n                context.strokeRect(currentInstance.x + 8, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"White\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"White\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"White\";\r\n\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y);\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y);\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 24, currentInstance.y);\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.width - 8, currentInstance.y);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"White\";\r\n\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x, currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x, currentInstance.height - 8);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"White\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    checkCollisionsWithClass(points);\r\n\r\n    checkCollisionsWithClass(horizontalLasers);\r\n\r\n    checkCollisionsWithClass(verticalLasers);\r\n\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"point\" && collidingInstances[i].state === \"firing\") {\r\n            //Adds points to the total.\r\n            currentPoints++;\r\n\r\n            //Resolves the point's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timer);\r\n            let instanceIndex = points.indexOf(collidingPoint);\r\n            points.splice(instanceIndex, 1);\r\n        } else if (collidingInstances[i].state === \"firing\") {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + currentPoints;\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawPoints();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}