{"version":3,"sources":["../src/blockie.js"],"names":["canvas","document","getElementById","context","getContext","blockieSpeed","KeysPressed","xInput","yInput","Player","x","y","testXLocation","testYLocation","sideLength","blockie","calculateAngleRadians","Math","atan2","addEventListener","e","key","loop","clearRect","width","height","angleBlockieMoving","cos","sin","fillStyle","fillRect","window","requestAnimationFrame"],"mappings":";;;;AAAA,IAAMA,SAASC,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMC,UAAUH,OAAOI,UAAP,CAAkB,IAAlB,CAAhB;;AAEA,IAAIC,eAAe,CAAnB;AACA,IAAIC,cAAc,EAAlB;AACA,IAAIC,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKC,CAAL,GAAS,EAAT;AACA,SAAKC,CAAL,GAAS,EAAT;AACA,SAAKC,aAAL,GAAqB,KAAKF,CAA1B;AACA,SAAKG,aAAL,GAAqB,KAAKF,CAA1B;AACA,SAAKG,UAAL,GAAkB,EAAlB;AACH,C;;AACJ;;AAED,IAAMC,UAAU,IAAIN,MAAJ,EAAhB;;AAEA,SAASO,qBAAT,CAA+BN,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,WAAOM,KAAKC,KAAL,CAAWP,CAAX,EAAcD,CAAd,CAAP;AACH;;AAED;AACAT,SAASkB,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtCb,gBAAYc,EAAEC,GAAd,IAAqB,IAArB;AACH,CAFD;;AAIA;AACApB,SAASkB,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC,WAAOb,YAAYc,EAAEC,GAAd,CAAP;AACH,CAFD;;AAIA,SAASC,IAAT,GAAgB;AACZ;AACAnB,YAAQoB,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBvB,OAAOwB,KAA/B,EAAsCxB,OAAOyB,MAA7C;;AAEA;AACAlB,aAAS,CAAT;AACAC,aAAS,CAAT;;AAEA;AACA,QAAIF,YAAY,GAAZ,CAAJ,EAAsB;AAClBC,kBAAU,CAAV;AACH;;AAED,QAAID,YAAY,GAAZ,CAAJ,EAAsB;AAClBC,kBAAU,CAAV;AACH;;AAED,QAAID,YAAY,GAAZ,CAAJ,EAAsB;AAClBE,kBAAU,CAAV;AACH;;AAED,QAAIF,YAAY,GAAZ,CAAJ,EAAsB;AAClBE,kBAAU,CAAV;AACH;;AAED;AACA,QAAIkB,qBAAqBV,sBAAsBT,MAAtB,EAA8BC,MAA9B,CAAzB;;AAEA;AACA;AACA,QAAID,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9BO,gBAAQH,aAAR,GAAwBG,QAAQL,CAAR,GAAYO,KAAKU,GAAL,CAASD,kBAAT,IAA+BrB,YAAnE;AACAU,gBAAQF,aAAR,GAAwBE,QAAQJ,CAAR,GAAYM,KAAKW,GAAL,CAASF,kBAAT,IAA+BrB,YAAnE;AACH;;AAED;AACA;AACA,QAAI,EAAEU,QAAQH,aAAR,IAAyB,CAAzB,IAA+BG,QAAQH,aAAR,GAAwBG,QAAQD,UAAjC,IAAgDd,OAAOwB,KAAvF,CAAJ,EAAmG;AAC/FT,gBAAQL,CAAR,GAAYK,QAAQH,aAApB;AACH;;AAED,QAAI,EAAEG,QAAQF,aAAR,IAAyB,CAAzB,IAA+BE,QAAQF,aAAR,GAAwBE,QAAQD,UAAjC,IAAgDd,OAAOyB,MAAvF,CAAJ,EAAoG;AAChGV,gBAAQJ,CAAR,GAAYI,QAAQF,aAApB;AACH;;AAED;AACAV,YAAQ0B,SAAR,GAAoB,KAApB;AACA1B,YAAQ2B,QAAR,CAAiBf,QAAQL,CAAzB,EAA4BK,QAAQJ,CAApC,EAAuCI,QAAQD,UAA/C,EAA2DC,QAAQD,UAAnE;;AAEA;AACAiB,WAAOC,qBAAP,CAA6BV,IAA7B;AACH;;AAED;AACAS,OAAOC,qBAAP,CAA6BV,IAA7B","file":"blockie.js","sourcesContent":["const canvas = document.getElementById('game');\r\nconst context = canvas.getContext('2d');\r\n\r\nlet blockieSpeed = 2;\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.x = 64;\r\n        this.y = 64;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.sideLength = 16;\r\n    };\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n}\r\n\r\n//Adds all currently pressed keys as a key with a pair of true in the KeysPressed object.\r\ndocument.addEventListener('keydown', e => {\r\n    KeysPressed[e.key] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener('keyup', e => {\r\n    delete KeysPressed[e.key];\r\n});\r\n\r\nfunction loop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed['d']) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed['a']) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed['s']) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed['w']) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    //Finds the angle that Blockie is moving based on the inputs.\r\n    let angleBlockieMoving = calculateAngleRadians(xInput, yInput);\r\n\r\n    //Stores the desired new location for Blockie by adding blockieSpeed in the input direction and adding that\r\n    //to Blockie's current location. This variable is then used to prevent Blockie from moving to certain places.\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        blockie.testXLocation = blockie.x + Math.cos(angleBlockieMoving) * blockieSpeed;\r\n        blockie.testYLocation = blockie.y + Math.sin(angleBlockieMoving) * blockieSpeed;\r\n    };\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. This is divided into x and y components so that\r\n    //Blockie can move diagonally against the canvas border.\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.sideLength) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.sideLength) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    };\r\n\r\n    //Draws Blockie.\r\n    context.fillStyle = 'red';\r\n    context.fillRect(blockie.x, blockie.y, blockie.sideLength, blockie.sideLength);\r\n\r\n    //Recalls the loop for the next frame.\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\n//Starts the game.\r\nwindow.requestAnimationFrame(loop);"]}