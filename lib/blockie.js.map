{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","promiseOne","fireHorizontalLaser","promiseTwo","Promise","all","console","log","levelOne","y","seconds","timerInsideFunction","removeCurrentTimer","promiseTimer","instanceIndex","horizontalLasers","indexOf","instance","splice","resolve","horizontalLaser","push","setTimeout","addCurrentTimer","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","gameState","currentTimers","Player","spriteSideLength","x","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","blockieX","blockieY","window","requestAnimationFrame","gameLoop","restartLevel","clearRect","innerHTML","stopPromisesIfNotPlaying","timer","runTimersInsideFunction","currentTimerIndex","drawHorizontalLasers","i","length","currentInstance","fillRect","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","cos","sin","floor","round","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\n\r\n//Arrays\r\n\r\nlet currentTimers = [];\r\nlet horizontalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie\"s sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement(\"img\");\r\n        this.sprite.src = \"../images/blockie.png\";\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 100;\r\n        this.width = canvas.width;\r\n        this.height = 32;\r\n    }\r\n}\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n    let promiseOne = fireHorizontalLaser(300, 16, 4);\r\n    let promiseTwo = fireHorizontalLaser(100, 16, 3);\r\n\r\n    await Promise.all([\r\n        promiseOne,\r\n        promiseTwo\r\n    ]);\r\n\r\n    console.log(\"Done racing\");\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    window.requestAnimationFrame(gameLoop);\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n}\r\n\r\n//Clears all arrays, clears the canvas, displays the game over message, and waits to then restart the current level.\r\nfunction restartLevel() {\r\n    horizontalLasers.splice(0);\r\n    gameState = \"restartingLevel\";\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n    setTimeout(() => {\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        gameState = \"playing\";\r\n        window.requestAnimationFrame(stopPromisesIfNotPlaying);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction stopPromisesIfNotPlaying() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(stopPromisesIfNotPlaying);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Runs the inside function of a timer so that it is completed and can be deleted, which prevents the function from running later.\r\nfunction runTimersInsideFunction(timer) {\r\n    timer.timerInsideFunction();\r\n}\r\n\r\n//Removes a timer from the array of currently-running arrays (preferably after it's inside code has been ran).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance of a laser and adds it to an array so that it can be drawn and used in collision checking more easily.\r\n//When the timer ends, the instance is deleted.\r\nasync function fireHorizontalLaser(y, height, seconds) {\r\n    let promiseTimer;\r\n\r\n    //Creates an instance of an object, adds it to the end of its object's array, and assigns its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    let instanceIndex = horizontalLasers.indexOf(instance);\r\n    horizontalLasers[instanceIndex].y = y;\r\n    horizontalLasers[instanceIndex].height = height;\r\n\r\n    //Creates a timer that resolves promises in the levelController and deletes the instance from its array (so that it isn't drawn\r\n    //or collided with anymore).\r\n    return new Promise((resolve) => {\r\n        promiseTimer = setTimeout(timerInsideFunction, seconds * 1000);\r\n        addCurrentTimer(promiseTimer);\r\n    });\r\n\r\n    function timerInsideFunction() {\r\n        removeCurrentTimer(promiseTimer);\r\n        instanceIndex = horizontalLasers.indexOf(instance);\r\n        horizontalLasers.splice(instanceIndex, 1);\r\n        return new Promise((resolve) => {\r\n            resolve(\"resolved\");\r\n        });\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    }\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Determines if two objects are \"colliding\".\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width)) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height)) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\n//Game loop\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener(\"keydown\", e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener(\"keyup\", e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nfunction gameLoop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    } else {\r\n        //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n        blockie.testXLocation = blockie.x;\r\n        blockie.testYLocation = blockie.y;\r\n    }\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.width;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.height;\r\n    };\r\n\r\n    //Drawing\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n\r\n    drawHorizontalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n        if (colliding) {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(stopPromisesIfNotPlaying);"]}