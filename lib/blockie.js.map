{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","oneHalf","blockieAdjustment","threeFourths","createWall","oneFourth","error","console","log","currentLevel","levelOne","levelTwo","levelThree","levelFour","levelFive","levelSix","levelSeven","levelEight","levelNine","levelTen","levelEleven","levelTwelve","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllInstances","allInstances","rejectInstances","destroyCountdownTimer","currentLevelPoints","gameState","blockie","state","sx","displayMessage","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","updateLevelPoints","calculateTotalPoints","Promise","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","increaseLevel","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","cancelAwaitChain","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","createPassivePoint","ActivePoint","activePoints","createActivePoint","speed","initialWaitingSeconds","fireMovingHorizontalLaser","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","width","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","fireBomb","loopFireBombs","Bomb","bombs","xSpeed","ySpeed","fireMovingBomb","loopFireMovingBombs","MovingBomb","movingBombs","Wall","walls","fireMovingWall","loopFireMovingWalls","MovingWall","movingWalls","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","drawImage","canvas","getContext","lineWidth","totalPoints","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","allInteractiveInstances","allCollisionInstances","collidingInstances","levelPoints","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","xTarget","yTarget","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","oneEigth","threeEigths","fiveEigths","sevenEigths","fullScreen","pointOne","pointTwo","pointThree","pointFour","pointFive","pointSix","pointSeven","pointEight","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","moveBlockie","updateAllInteractiveInstances","updateAllCollisionInstances","moveMovingHorizontalLasers","moveMovingVerticalLasers","moveMovingBombs","moveMovingWalls","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawMovingBombs","drawWalls","drawMovingWalls","drawPartyHats","checkCollisionsWithClasses","classesArray","currentClass","checkInstancesColliding","checkTestCollisionsWithClasses","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","createCountdownTimer","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xDir","yDir","lastAvailableX","lastAvailableY","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet currentLevelPoints = 0;\r\nlet totalPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet movingBombs = [];\r\nlet walls = [];\r\nlet movingWalls = [];\r\nlet partyHats = [];\r\n\r\n//Used in for loops to apply a function to many objects.\r\nlet allInstances = [];\r\nlet allInteractiveInstances = [];\r\nlet allCollisionInstances = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet levelPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.xTarget = this.x;\r\n        this.yTarget = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingBomb {\r\n    constructor(x, y, width, height, xSpeed, ySpeed) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass MovingWall {\r\n    constructor(x, y, width, height, xSpeed, ySpeed) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(oneHalf + blockieAdjustment, threeFourths + blockieAdjustment);\r\n\r\n        createWall(12 * 16, 12 * 16, oneFourth, oneFourth);\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelThree() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFour() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFive() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSix() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSeven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEight() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelNine() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTen() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEleven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwelve() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllInstances();\r\n    for (let i = 0; i < allInstances.length; i++) {\r\n        rejectInstances(allInstances[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        blockie.state = \"playing\";\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene, 0.17);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    updateLevelPoints(currentLevel);\r\n    currentLevelPoints = 0;\r\n    calculateTotalPoints();\r\n\r\n    currentLevel++;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n        case 3:\r\n            levelThree();\r\n            break;\r\n        case 4:\r\n            levelFour();\r\n            break;\r\n        case 5:\r\n            levelFive();\r\n            break;\r\n        case 6:\r\n            levelSix();\r\n            break;\r\n        case 7:\r\n            levelSeven();\r\n            break;\r\n        case 8:\r\n            levelEight();\r\n            break;\r\n        case 9:\r\n            levelNine();\r\n            break;\r\n        case 10:\r\n            levelTen();\r\n            break;\r\n        case 11:\r\n            levelEleven();\r\n            break;\r\n        case 12:\r\n            levelTwelve();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Placed here to draw Blockie with a PartyHat during increaseLevel().\r\n            partyHats.splice(0);\r\n\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Prevents dashing immediatley after restarting the game.\r\n                delete keysDown[16];\r\n                delete keysDown[32];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n};\r\n\r\n//Adjusts Blockie's location to prevent wall clipping in screen transitions.\r\nfunction moveBlockie(x, y) {\r\n    blockie.x = x;\r\n    blockie.y = y;\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingBombs(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingBomb(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingBomb(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingBomb(x, y, width, height, xSpeed, ySpeed);\r\n    movingBombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingBombs.indexOf(instance);\r\n            movingBombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingWalls(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingWall(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingWall(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingWall(x, y, width, height, xSpeed, ySpeed);\r\n    movingWalls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingWalls.indexOf(instance);\r\n            movingWalls.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllInstances() {\r\n    allInstances = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        movingBombs,\r\n        walls,\r\n        movingWalls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveInstances() {\r\n    allInteractiveInstances = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        movingBombs\r\n    ];\r\n};\r\n\r\nfunction updateAllCollisionInstances() {\r\n    allCollisionInstances = [\r\n        walls,\r\n        movingWalls\r\n    ];\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingBombs() {\r\n    for (let i = 0; i < movingBombs.length; i++) {\r\n        if (movingBombs[i].state !== \"warning\") {\r\n            movingBombs[i].x += movingBombs[i].xSpeed;\r\n            movingBombs[i].y += movingBombs[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingWalls() {\r\n    for (let i = 0; i < movingWalls.length; i++) {\r\n        if (movingWalls[i].state !== \"warning\") {\r\n            movingWalls[i].x += movingWalls[i].xSpeed;\r\n            movingWalls[i].y += movingWalls[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingBombs() {\r\n    for (let i = 0; i < movingBombs.length; i++) {\r\n        let currentInstance = movingBombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawMovingWalls() {\r\n    for (let i = 0; i < movingWalls.length; i++) {\r\n        let currentInstance = movingWalls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClasses(classesArray) {\r\n    for (let i = 0; i < classesArray.length; i++) {\r\n        let currentClass = classesArray[i];\r\n        for (let i = 0; i < currentClass.length; i++) {\r\n            checkInstancesColliding(blockie, currentClass[i]);\r\n        };\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClasses(instanceOneX, instanceOneY, classesArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classesArray.length; i++) {\r\n        let currentClass = classesArray[i];\r\n        for (let i = 0; i < currentClass.length; i++) {\r\n            checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, currentClass[i]);\r\n        };\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    } else if (instanceOneX < 0 || canvas.width < (instanceOneX + instanceOne.width)) {\r\n        preventingMovement = true;\r\n    } else if (instanceOneY < 0 || canvas.height < (instanceOneY + instanceOne.height)) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Point Functions\r\n\r\nfunction updateLevelPoints(currentLevel) {\r\n    levelPoints[currentLevel - 1] = currentLevelPoints;\r\n};\r\n\r\nfunction calculateTotalPoints() {\r\n    totalPoints = 0;\r\n    for (let i = 0; i < levelPoints.length; i++) {\r\n        totalPoints += levelPoints[i];\r\n    };\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene, secondsPerFrame) {\r\n    let cutsceneSideLength = 512;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 0, 0, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.xTarget = blockie.x + blockie.dx;\r\n                blockie.yTarget = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.xTarget = blockie.x;\r\n                blockie.yTarget = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            updateAllCollisionInstances();\r\n            checkTestCollisionsWithClasses(blockie.xTarget, blockie.yTarget, allCollisionInstances);\r\n\r\n            //Moves Blockie to an open space if he is trying to move into a collision instance.\r\n            if (preventingMovement) {\r\n                //Resets Blockie's target location to his current location because there is a 100% chance that space is clear.\r\n                blockie.xTarget = blockie.x;\r\n                blockie.yTarget = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xDir = Math.sign(blockie.dx);\r\n                let yDir = Math.sign(blockie.dy);\r\n                let lastAvailableX = blockie.xTarget;\r\n                let lastAvailableY = blockie.yTarget;\r\n\r\n                //Finds the last free space in the direction that Blockie is moving in. Stops checking for more spaces once \r\n                //Blockie has moved past his dx or dy each frame.\r\n                while (Math.abs(xChange) < Math.abs(blockie.dx) || Math.abs(yChange) < Math.abs(blockie.dy)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dx) - xChange < 1) {\r\n                        xChange += blockie.dx - xChange;\r\n                    } else {\r\n                        xChange += xDir;\r\n                    };\r\n\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dy) - yChange < 1) {\r\n                        yChange += blockie.dy - yChange;\r\n                    } else {\r\n                        yChange += yDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget + xChange, blockie.yTarget + yChange, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableX = blockie.xTarget + xChange;\r\n                        lastAvailableY = blockie.yTarget + yChange;\r\n                    };\r\n                };\r\n\r\n                //Sets Blockie's location to the last available one in the direction that he's moving in.\r\n                blockie.xTarget = lastAvailableX;\r\n                blockie.yTarget = lastAvailableY;\r\n\r\n                //Resets dx and dy to be relative to his new position.\r\n                blockie.dx = blockie.x + blockie.dx - blockie.xTarget;\r\n                blockie.dy = blockie.y + blockie.dy - blockie.yTarget;\r\n                xChange = 0;\r\n                yChange = 0;\r\n\r\n                //Independently checks along the x-axis for an available space after moving in Blockie's exact direction (this\r\n                //only activates when moving diagonally and allows for \"sliding\").\r\n                while (Math.abs(xChange) < Math.abs(blockie.dx)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dx) - xChange < 1) {\r\n                        xChange += blockie.dx - xChange;\r\n                    } else {\r\n                        xChange += xDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget + xChange, blockie.yTarget, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableX = blockie.xTarget + xChange;\r\n                    };\r\n                };\r\n\r\n                blockie.xTarget = lastAvailableX;\r\n\r\n                //Independently checks along the y-axis for an available space after moving in Blockie's exact direction (this\r\n                //only activates when moving diagonally and allows for \"sliding\").\r\n                while (Math.abs(yChange) < Math.abs(blockie.dy)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dy) - yChange < 1) {\r\n                        yChange += blockie.dy - yChange;\r\n                    } else {\r\n                        yChange += yDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget, blockie.yTarget + yChange, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableY = blockie.yTarget + yChange;\r\n                    };\r\n                };\r\n\r\n                blockie.yTarget = lastAvailableY;\r\n            };\r\n\r\n            blockie.x = blockie.xTarget;\r\n            blockie.y = blockie.yTarget;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n        moveMovingBombs();\r\n        moveMovingWalls();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveInstances();\r\n        checkCollisionsWithClasses(allInteractiveInstances);\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllInstances();\r\n                for (let i = 0; i < allInstances.length; i++) {\r\n                    resolveInstances(allInstances[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n\r\n        //Continuously recalls the function.\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n        drawMovingBombs();\r\n        drawMovingWalls();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}