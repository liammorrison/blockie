{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","oneHalf","blockieAdjustment","sevenEigths","cancelAwaitChain","Promise","all","createWall","fullScreen","threeFourths","createPassivePoint","pointTwo","loopFireVerticalLasers","createActivePoint","fireBomb","oneFourth","threeEigths","fiveEigths","fireMovingHorizontalLaser","pointEight","pointOne","loopFireBombs","console","log","increaseLevel","levelOne","error","levelTwo","gameState","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","blockie","state","sx","resolve","reject","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","controlLevel","window","requestAnimationFrame","restartLevel","angleMovingDegrees","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","currentLevel","permanentPoints","currentLevelPoints","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","fireHorizontalLaser","loopFireHorizontalLasers","HorizontalLaser","horizontalLasers","width","fireVerticalLaser","VerticalLaser","verticalLasers","speed","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","Bomb","bombs","Wall","walls","canvas","context","getContext","lineWidth","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","waitingTimeouts","collidingInstances","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","oneEigth","pointThree","pointFour","pointFive","pointSix","pointSeven","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","floor","xChange","yChange","xTestingDistance","yTestingDistance","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 88;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = 0;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(oneHalf + blockieAdjustment, sevenEigths + blockieAdjustment);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, threeFourths),\r\n            createPassivePoint(pointTwo - 8, sevenEigths - 8, 0, 10),\r\n\r\n            loopFireVerticalLasers(oneHalf - 8, 16, 1, 2),\r\n\r\n            createActivePoint(sevenEigths - 8, sevenEigths - 8, 3)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createActivePoint(oneHalf - 8, sevenEigths - 8, 0),\r\n\r\n            fireBomb(threeFourths, threeFourths, oneFourth, oneFourth, 1, 3)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, fullScreen),\r\n            createWall(fiveEigths, 0, threeEigths, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointTwo - 8, 0),\r\n            fireMovingHorizontalLaser(fullScreen - 32, 32, -1.5, 1, 5)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, threeEigths),\r\n            createWall(fiveEigths, 0, threeEigths, threeEigths),\r\n            createWall(0, fiveEigths, threeEigths, threeEigths),\r\n            createWall(fiveEigths, fiveEigths, threeEigths, threeEigths),\r\n            createActivePoint(oneHalf - 8, pointEight - 8, 0),\r\n            createPassivePoint(pointOne - 8, oneHalf - 8, 0, 12),\r\n            createPassivePoint(pointEight - 8, oneHalf - 8, 0, 12),\r\n            loopFireBombs(threeEigths, fiveEigths, oneFourth, oneFourth, 1, 2)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(\"Level 2 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"Determination is key!\";\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Restarts the game.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                partyHats.splice(0);\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = `Our champion!<br>You beat level ${currentLevel}!`;\r\n                gameState = \"displayingMessage\";\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        function resumePlaying() {\r\n            //Restarts the game.\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                //Points are only made permanent once a level is completed and then it is reset.\r\n                permanentPoints += currentLevelPoints;\r\n                currentLevelPoints = 0;\r\n\r\n                currentLevel++;\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n}\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n    delete keysDown[16];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireHorizontalLasers(y, height, waitingSeconds, firingSeconds) {\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireHorizontalLaser(y, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireVerticalLasers(x, width, waitingSeconds, firingSeconds) {\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireVerticalLaser(x, width, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 32, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 32, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if (keysDown[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                    xChange = blockie.dx - xTestingDistance;\r\n                } else {\r\n                    xChange = Math.sign(blockie.dx);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    xTestingDistance += xChange;\r\n\r\n                    if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                        xChange = blockie.dx - xTestingDistance;\r\n                    } else {\r\n                        xChange = Math.sign(blockie.dx);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                    yChange = blockie.dy - yTestingDistance;\r\n                } else {\r\n                    yChange = Math.sign(blockie.dy);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                        yChange = blockie.dy - yTestingDistance;\r\n                    } else {\r\n                        yChange = Math.sign(blockie.dy);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel();\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}