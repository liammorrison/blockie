{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","pointTwo","blockieAdjustment","oneHalf","cancelAwaitChain","Promise","all","createWall","fullScreen","threeEigths","fiveEigths","createActivePoint","pointSeven","createPassivePoint","oneEigth","oneFourth","sevenEigths","pointEight","console","log","currentLevel","increaseLevel","levelOne","error","levelTwo","levelThree","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","destroyCountdownTimer","currentLevelPoints","gameState","blockie","state","sx","displayMessage","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","updateLevelPoints","calculateTotalPoints","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","speed","initialWaitingSeconds","fireMovingHorizontalLaser","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","width","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","fireBomb","loopFireBombs","Bomb","bombs","Wall","walls","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","strokeStyle","drawImage","strokeRect","canvas","getContext","lineWidth","totalPoints","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","collidingInstances","levelPoints","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","threeFourths","pointOne","pointThree","pointFour","pointFive","pointSix","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","drawActivePoints","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","createCountdownTimer","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xTestingDistance","yTestingDistance","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet currentLevelPoints = 0;\r\nlet totalPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet levelPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(pointTwo + blockieAdjustment, oneHalf + blockieAdjustment);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, threeEigths),\r\n            createWall(0, fiveEigths, fullScreen, threeEigths),\r\n            createActivePoint(pointSeven - 8, oneHalf - 8, 0),\r\n            createPassivePoint(oneHalf - 8, oneHalf - 8, 0, 10)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, threeEigths),\r\n            createWall(0, fiveEigths, oneEigth, threeEigths),\r\n            createWall(oneFourth, fiveEigths, oneHalf, oneFourth),\r\n            createWall(sevenEigths, fiveEigths, oneEigth, threeEigths),\r\n            createPassivePoint(pointTwo - 8, pointEight - 8, 0, 15),\r\n            createPassivePoint(pointSeven - 8, pointEight - 8, 0, 15),\r\n\r\n            createActivePoint(pointTwo - 8, oneHalf - 8, 4)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, threeEigths),\r\n            createWall(0, fiveEigths, threeEigths, threeEigths),\r\n            createWall(fiveEigths, 0, threeEigths, fullScreen),\r\n            createActivePoint(oneHalf - 8, sevenEigths - 8, 0),\r\n            createPassivePoint(oneHalf - 8, oneEigth - 8, 0, 10)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(`Level ${currentLevel} completed.`);\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelThree() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        blockie.state = \"playing\";\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    updateLevelPoints(currentLevel);\r\n    currentLevelPoints = 0;\r\n    calculateTotalPoints();\r\n\r\n    currentLevel++;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n        case 3:\r\n            levelThree();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Placed here to draw Blockie with a PartyHat during increaseLevel().\r\n            partyHats.splice(0);\r\n\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Prevents dashing immediatley after restarting the game.\r\n                delete keysDown[16];\r\n                delete keysDown[32];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Point Functions\r\n\r\nfunction updateLevelPoints(currentLevel) {\r\n    levelPoints[currentLevel - 1] = currentLevelPoints;\r\n};\r\n\r\nfunction calculateTotalPoints() {\r\n    totalPoints = 0;\r\n    for (let i = 0; i < levelPoints.length; i++) {\r\n        totalPoints += levelPoints[i];\r\n    };\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene) {\r\n    let secondsPerFrame = 0.15;\r\n    let cutsceneSideLength = 128;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            //Draws a border around the small cutscene in the center of the canvas.\r\n            context.strokeStyle = \"#FFFFFF\";\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 192, 192, cutsceneSideLength, cutsceneSideLength);\r\n            context.strokeRect(192, 192, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            //Updates Blockie's location if he's touching a wall to the nearest open location.\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                    xChange = blockie.dx - xTestingDistance;\r\n                } else {\r\n                    xChange = Math.sign(blockie.dx);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    xTestingDistance += xChange;\r\n\r\n                    if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                        xChange = blockie.dx - xTestingDistance;\r\n                    } else {\r\n                        xChange = Math.sign(blockie.dx);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                    yChange = blockie.dy - yTestingDistance;\r\n                } else {\r\n                    yChange = Math.sign(blockie.dy);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                        yChange = blockie.dy - yTestingDistance;\r\n                    } else {\r\n                        yChange = Math.sign(blockie.dy);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}