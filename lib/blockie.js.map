{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","oneHalf","blockieAdjustment","sevenEigths","cancelAwaitChain","Promise","all","createWall","fullScreen","createActivePoint","createPassivePoint","loopFireBombs","pointEight","fireMovingHorizontalLaser","pointOne","loopFireMovingHorizontalLasers","console","log","increaseLevel","levelOne","error","levelTwo","blockieDied","gameState","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","blockie","state","sx","currentLevelPoints","resolve","reject","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","controlLevel","window","requestAnimationFrame","restartLevel","angleMovingDegrees","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","currentLevel","permanentPoints","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","initialWaitingSeconds","fireHorizontalLaser","loopFireHorizontalLasers","HorizontalLaser","horizontalLasers","width","fireVerticalLaser","loopFireVerticalLasers","VerticalLaser","verticalLasers","speed","MovingHorizontalLaser","movingHorizontalLasers","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","fireBomb","Bomb","bombs","Wall","walls","canvas","context","getContext","lineWidth","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","waitingTimeouts","collidingInstances","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","oneEigth","oneFourth","threeEigths","fiveEigths","threeFourths","pointTwo","pointThree","pointFour","pointFive","pointSix","pointSeven","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","floor","xChange","yChange","xTestingDistance","yTestingDistance","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet gameScale = 1;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(oneHalf + blockieAdjustment, sevenEigths + blockieAdjustment);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, fullScreen),\r\n            createWall(14 * 16, 0, 4 * 16, 14 * 16),\r\n            createWall(14 * 16, 18 * 16, 4 * 16, 2 * 16),\r\n            createWall(14 * 16, 24 * 16, 4 * 16, 2 * 16),\r\n            createWall(14 * 16, 30 * 16, 4 * 16, 2 * 16),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createActivePoint(oneHalf - 8, oneHalf - 8, 0),\r\n            createPassivePoint(oneHalf - 8, 22 * 16 - 8, 0, 10)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, 2 * 16),\r\n            createWall(0, 6 * 16, fullScreen, 2 * 16),\r\n            createWall(0, 12 * 16, fullScreen, 2 * 16),\r\n            createWall(0, 18 * 16, fullScreen, 14 * 16),\r\n            createWall(0, 0, 2 * 16, fullScreen),\r\n            createWall(6 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(12 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(18 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(24 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(30 * 16, 0, 2 * 16, fullScreen),\r\n            createPassivePoint(4 * 16 - 8, oneHalf - 8, 0, 16),\r\n            createPassivePoint(28 * 16 - 8, oneHalf - 8, 0, 16),\r\n            loopFireBombs(8 * 16, 2 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(20 * 16, 2 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(2 * 16, 8 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(14 * 16, 8 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(26 * 16, 8 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(8 * 16, 14 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(20 * 16, 14 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n\r\n            createActivePoint(oneHalf - 8, 4 * 16 - 8, 3)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, fullScreen),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointEight - 8, 0),\r\n            fireMovingHorizontalLaser(fullScreen - 32, 32, -1.5, 0, 5)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 0, 1, 4),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 2, 1, 4),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 4, 1, 4),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 6, 1, 4)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(\"Level 3 completed.\");\r\n        increaseLevel();\r\n\r\n\r\n        await Promise.all([\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n            fireMovingHorizontalLaser(0, 32, 2, 1, 20),\r\n            fireMovingHorizontalLaser(0, 32, 1.25, 1, 20),\r\n            fireMovingHorizontalLaser(0, 32, 0.75, 1, 20)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(\"Level 3 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(blockieDied) {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    //Animates Blockie's destruction.\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Animates Blockie's destruction and a game over screen if he dies, but skips over that if P is pressed.\r\n    if (blockieDied) {\r\n        await new Promise((resolve, reject) => {\r\n            let drawGameOverScreen = setTimeout(() => {\r\n                //Draws the game over screen.\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"Determination is key!\";\r\n                gameState = \"displayingMessage\";\r\n                resolve(\"resolved\");\r\n            }, 1.5 * 1000);\r\n        });\r\n\r\n        await new Promise((resolve, reject) => {\r\n            //Restarts the game.\r\n            function resumePlaying() {\r\n                if (keysDown[16] || keysDown[32]) {\r\n                    //Prevents dashing immediatley after restarting the game.\r\n                    delete keysDown[16];\r\n                    delete keysDown[32];\r\n\r\n                    document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                    gameState = \"playing\";\r\n                    blockie.state = \"playing\";\r\n\r\n                    controlLevel();\r\n\r\n                    resolve(\"resolved\");\r\n                } else {\r\n                    window.requestAnimationFrame(resumePlaying);\r\n                };\r\n            };\r\n\r\n            window.requestAnimationFrame(resumePlaying);\r\n        });\r\n    } else {\r\n        gameState = \"playing\";\r\n        blockie.state = \"playing\";\r\n\r\n        controlLevel();\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                partyHats.splice(0);\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = `Our champion!<br>You beat level ${currentLevel}!`;\r\n                gameState = \"displayingMessage\";\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        function resumePlaying() {\r\n            //Restarts the game.\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Prevents dashing immediatley after restarting the game.\r\n                delete keysDown[16];\r\n                delete keysDown[32];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                //Points are only made permanent once a level is completed and then it is reset.\r\n                permanentPoints += currentLevelPoints;\r\n                currentLevelPoints = 0;\r\n\r\n                currentLevel++;\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n}\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireHorizontalLasers(y, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireHorizontalLaser(y, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireVerticalLasers(x, width, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireVerticalLaser(x, width, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 32, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 32, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 512, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    window.requestAnimationFrame(scaleGame);\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(false);\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                    xChange = blockie.dx - xTestingDistance;\r\n                } else {\r\n                    xChange = Math.sign(blockie.dx);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    xTestingDistance += xChange;\r\n\r\n                    if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                        xChange = blockie.dx - xTestingDistance;\r\n                    } else {\r\n                        xChange = Math.sign(blockie.dx);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                    yChange = blockie.dy - yTestingDistance;\r\n                } else {\r\n                    yChange = Math.sign(blockie.dy);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                        yChange = blockie.dy - yTestingDistance;\r\n                    } else {\r\n                        yChange = Math.sign(blockie.dy);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(true);\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}