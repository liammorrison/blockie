{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","Promise","all","fireMovingHorizontalLaser","height","fireMovingVerticalLaser","console","log","increaseLevel","levelOne","currentLevel","error","levelTwo","gameState","i","currentTimers","length","clearTimeout","splice","rejectInstances","waitingTimers","points","horizontalLasers","verticalLasers","movingHorizontalLasers","movingVerticalLasers","bombs","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","diplayingGameOverScreen","resumeGame","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","instanceAffecting","instanceAffectingObjectArray","warningSeconds","timer","visible","externalReject","setWarningTimers","x","y","waitingSeconds","activeSeconds","setWaitingTimer","instance","Point","push","instanceIndex","indexOf","externalResolve","createPoint","HorizontalLaser","fireHorizontalLaser","VerticalLaser","fireVerticalLaser","speed","MovingHorizontalLaser","MovingVerticalLaser","Bomb","fireBomb","getContext","lineWidth","KeysPressed","permanentPoints","currentLevelPoints","xInput","yInput","colliding","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","collidingInstances","Player","spriteSideLength","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","WaitingTimer","blockieX","blockieY","objectArray","initialArrayLength","addCurrentTimer","removeCurrentTimer","currentTimerIndex","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","Math","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage","drawPoints","currentInstance","strokeStyle","strokeRect","fillStyle","fillRect","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","min","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","checkCollisionsWithClass","classArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet KeysPressed = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\nlet waitingTimers = [];\r\nlet points = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\nlet currentTimers = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass WaitingTimer {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 24;\r\n        this.height = 24;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, 22 * 16);\r\n\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(canvas.height - 16, 16, -0.75, 0, 6),\r\n            fireMovingHorizontalLaser(0, 16, 0.5, 2, 4),\r\n            fireMovingHorizontalLaser(100, 16, 0.5, 3, 3),\r\n            fireMovingVerticalLaser(canvas.width - 16, 16, -0.75, 0, 6),\r\n            fireMovingVerticalLaser(0, 16, 0.5, 2, 4),\r\n            fireMovingVerticalLaser(100, 16, 0.5, 3, 3)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        console.log(\"Level 2 completed.\");\r\n        currentLevel++;\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    };\r\n\r\n    currentTimers.splice(0);\r\n\r\n    rejectInstances(waitingTimers);\r\n    rejectInstances(points);\r\n    rejectInstances(horizontalLasers);\r\n    rejectInstances(verticalLasers);\r\n    rejectInstances(movingHorizontalLasers);\r\n    rejectInstances(movingVerticalLasers);\r\n    rejectInstances(bombs);\r\n\r\n    //Removes all references to instances from arrays.\r\n    waitingTimers.splice(0);\r\n    points.splice(0);\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n    bombs.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let resumeGame = setTimeout(() => {\r\n            //Restarts the game.\r\n            diplayingGameOverScreen = false;\r\n            gameState = \"playing\";\r\n            blockie.state = \"playing\";\r\n            controlLevel();\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n            window.requestAnimationFrame(gameLoop);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction increaseLevel() {\r\n    currentLevel++;\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    permanentPoints += currentLevelPoints;\r\n\r\n    controlLevel();\r\n}\r\n\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timers and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timer);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers.\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimer instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimer(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimer();\r\n    waitingTimers.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimers.indexOf(instance);\r\n            waitingTimers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 2 times before firing. All warning timers are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimers(instanceAffecting, instanceAffectingObjectArray) {\r\n    let warningSeconds = 1;\r\n\r\n    //Each timer sets the affected instance's timer and reject function equal to a new \"blinking\" timer for a bit.\r\n    await new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n\r\n    //The function finally resolves once the second \"blink\" ends. The affected instance can then collide with Blockie.\r\n    return new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPoint(x, y, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Point(x, y);\r\n    points.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(instance, points);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = points.indexOf(instance);\r\n            points.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(instance, horizontalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(instance, verticalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(instance, movingHorizontalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(instance, movingVerticalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(instance, bombs);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimer(animateBlockieDestructing);\r\n            removeCurrentTimer(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimer(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPoints() {\r\n    for (let i = 0; i < points.length; i++) {\r\n        let currentInstance = points[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"Lime\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"Lime\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x + 12, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 28, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 12, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 28, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 8, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 24);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"##FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    checkCollisionsWithClass(points);\r\n    checkCollisionsWithClass(horizontalLasers);\r\n    checkCollisionsWithClass(verticalLasers);\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"Point\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            //Resolves the Point's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timer);\r\n            let instanceIndex = points.indexOf(collidingPoint);\r\n            points.splice(instanceIndex, 1);\r\n        } else {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawPoints();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}