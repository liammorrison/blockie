{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","Promise","all","createPoint","height","fireMovingHorizontalLaser","fireMovingVerticalLaser","console","log","increaseLevel","levelOne","currentLevel","error","levelTwo","gameState","i","currentTimers","length","clearTimeout","splice","rejectInstances","waitingTimers","points","horizontalLasers","verticalLasers","movingHorizontalLasers","movingVerticalLasers","bombs","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","diplayingGameOverScreen","resumeGame","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","x","y","waitingSeconds","activeSeconds","setWaitingTimer","instance","point","push","setWarningTimers","destroyPoint","instanceIndex","indexOf","externalResolve","externalReject","timer","horizontalLaser","endFiring","fireHorizontalLaser","verticalLaser","fireVerticalLaser","speed","movingHorizontalLaser","movingVerticalLaser","bomb","fireBomb","getContext","lineWidth","KeysPressed","permanentPoints","currentLevelPoints","xInput","yInput","colliding","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","collidingInstances","Player","spriteSideLength","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","waitingTimer","visible","blockieX","blockieY","objectArray","addCurrentTimer","removeCurrentTimer","currentTimerIndex","stopWaiting","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","Math","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage","drawPoints","currentInstance","strokeStyle","strokeRect","fillStyle","fillRect","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","min","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","checkCollisionsWithClass","classArray","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":";;AAiKA;;AAEA;;AAEA;;uEACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEQA,wCAAgBC,OAAOC,KAAP,GAAe,CAAf,GAAmBC,QAAQD,KAAR,GAAgB,CAAnD,EAAsD,KAAK,EAA3D;;AAFR;AAAA,+BAIcE,QAAQC,GAAR,CAAY,CACdC,YAAYL,OAAOC,KAAP,GAAe,CAAf,GAAmB,EAA/B,EAAmCD,OAAOM,MAAP,GAAgB,CAAhB,GAAoB,EAAvD,EAA2D,CAA3D,EAA8D,CAA9D,CADc,EAEdC,0BAA0B,CAA1B,EAA6B,EAA7B,EAAiC,GAAjC,EAAsC,CAAtC,EAAyC,CAAzC,CAFc,EAGdC,wBAAwB,CAAxB,EAA2B,EAA3B,EAA+B,GAA/B,EAAoC,CAApC,EAAuC,CAAvC,CAHc,EAIdA,wBAAwBR,OAAOC,KAAP,GAAe,EAAvC,EAA2C,EAA3C,EAA+C,CAAC,GAAhD,EAAqD,CAArD,EAAwD,CAAxD,CAJc,EAKdM,0BAA0BP,OAAOM,MAAP,GAAgB,EAA1C,EAA8C,EAA9C,EAAkD,CAAC,IAAnD,EAAyD,CAAzD,EAA4D,CAA5D,CALc,CAAZ,CAJd;;AAAA;;AAcQG,gCAAQC,GAAR,CAAY,oBAAZ;AACAC;AAfR;AAAA;;AAAA;AAAA;AAAA;;AAiBQF,gCAAQC,GAAR,CAAY,oBAAZ;;AAjBR;AAkBK;;AAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeE,Q;;;;;AAqBf;;wEACA;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI;AACAb,4CAAgBC,OAAOC,KAAP,GAAe,CAAf,GAAmBC,QAAQD,KAAR,GAAgB,CAAnD,EAAsDD,OAAOM,MAAP,GAAgB,CAAhB,GAAoBJ,QAAQI,MAAR,GAAiB,CAA3F;;AAGAG,oCAAQC,GAAR,CAAY,kBAAZ;AACAG;AACH,yBAND,CAME,OAAOC,KAAP,EAAc;AACZL,oCAAQC,GAAR,CAAY,kBAAZ;AACH;;AATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,Q;;;;;AA4Bf;;wEACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,oCAAY,iBAAZ;;AAEA;AACA,6BAASC,CAAT,GAAa,CAAb,EAAgBA,IAAIC,cAAcC,MAAlC,EAA0CF,GAA1C,EAA+C;AAC3CG,yCAAaF,cAAcD,CAAd,CAAb;AACH;;AAEDC,sCAAcG,MAAd,CAAqB,CAArB;;AAEAC,wCAAgBC,aAAhB;AACAD,wCAAgBE,MAAhB;AACAF,wCAAgBG,gBAAhB;AACAH,wCAAgBI,cAAhB;AACAJ,wCAAgBK,sBAAhB;AACAL,wCAAgBM,oBAAhB;AACAN,wCAAgBO,KAAhB;;AAEA;AACAN,sCAAcF,MAAd,CAAqB,CAArB;AACAG,+BAAOH,MAAP,CAAc,CAAd;AACAI,yCAAiBJ,MAAjB,CAAwB,CAAxB;AACAK,uCAAeL,MAAf,CAAsB,CAAtB;AACAM,+CAAuBN,MAAvB,CAA8B,CAA9B;AACAO,6CAAqBP,MAArB,CAA4B,CAA5B;AACAQ,8BAAMR,MAAN,CAAa,CAAb;;AAEAnB,gCAAQ4B,KAAR,GAAgB,aAAhB;AACA5B,gCAAQ6B,EAAR,GAAa,CAAb;;AA5BJ;AAAA,+BA8BU,IAAI5B,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIC,qBAAqBC,WAAW,YAAM;AACtC;AACAC,wCAAQC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBrC,OAAOC,KAA/B,EAAsCD,OAAOM,MAA7C;AACAgC,yCAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwD,eAAxD;AACAR,wCAAQ,UAAR;AACH,6BALwB,EAKtB,MAAM,IALgB,CAAzB;AAMH,yBAPK,CA9BV;;AAAA;;AAuCIS,kDAA0B,IAA1B;;AAvCJ;AAAA,+BAyCU,IAAItC,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIS,aAAaP,WAAW,YAAM;AAC9B;AACAM,0DAA0B,KAA1B;AACAzB,4CAAY,SAAZ;AACAd,wCAAQ4B,KAAR,GAAgB,SAAhB;AACAa;AACAL,yCAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwD,EAAxD;AACAI,uCAAOC,qBAAP,CAA6BC,QAA7B;AACH,6BARgB,EAQd,IARc,CAAjB;AASH,yBAVK,CAzCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;AAwHf;;wEACA,kBAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,cAAjC,EAAiDC,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,gBAAgBF,cAAhB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIC,KAAJ,CAAUN,CAAV,EAAaC,CAAb,CALnB;;AAMIzB,+BAAO+B,IAAP,CAAYF,QAAZ;;AAEA;AACAG,yCAAiBH,QAAjB;;AAEA;AAXJ,0DAYW,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIwB,eAAetB,WAAW,YAAM;AAChC;AACA,oCAAIuB,gBAAgBlC,OAAOmC,OAAP,CAAeN,QAAf,CAApB;AACA7B,uCAAOH,MAAP,CAAcqC,aAAd,EAA6B,CAA7B;;AAEA1B,wCAAQ,UAAR;AACH,6BANkB,EAMhBmB,gBAAgB,IANA,CAAnB;;AAQA;AACAE,qCAASO,eAAT,GAA2B5B,OAA3B;AACAqB,qCAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,qCAASS,KAAT,GAAiBL,YAAjB;AACH,yBAbM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAepD,W;;;;;AA4Bf;;wEACA,kBAAmC4C,CAAnC,EAAsC3C,MAAtC,EAA8C4C,cAA9C,EAA8DC,aAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,gBAAgBF,cAAhB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIU,eAAJ,CAAoBd,CAApB,EAAuB3C,MAAvB,CALnB;;AAMImB,yCAAiB8B,IAAjB,CAAsBF,QAAtB;;AAEA;AACAG,yCAAiBH,QAAjB;;AAEA;AAXJ,0DAYW,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAI+B,YAAY7B,WAAW,YAAM;AAC7B;AACA,oCAAIuB,gBAAgBjC,iBAAiBkC,OAAjB,CAAyBN,QAAzB,CAApB;AACA5B,iDAAiBJ,MAAjB,CAAwBqC,aAAxB,EAAuC,CAAvC;;AAEA1B,wCAAQ,UAAR;AACH,6BANe,EAMbmB,gBAAgB,IANH,CAAhB;;AAQA;AACAE,qCAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,qCAASS,KAAT,GAAiBE,SAAjB;AACH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,mB;;;;;AA2Bf;;wEACA,kBAAiCjB,CAAjC,EAAoC/C,KAApC,EAA2CiD,cAA3C,EAA2DC,aAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,gBAAgBF,cAAhB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIa,aAAJ,CAAkBlB,CAAlB,EAAqB/C,KAArB,CALnB;;AAMIyB,uCAAe6B,IAAf,CAAoBF,QAApB;;AAEA;AACAG,yCAAiBH,QAAjB;;AAEA;AAXJ,0DAYW,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAI+B,YAAY7B,WAAW,YAAM;AAC7B;AACA,oCAAIuB,gBAAgBhC,eAAeiC,OAAf,CAAuBN,QAAvB,CAApB;AACA3B,+CAAeL,MAAf,CAAsBqC,aAAtB,EAAqC,CAArC;;AAEA1B,wCAAQ,UAAR;AACH,6BANe,EAMbmB,gBAAgB,IANH,CAAhB;;AAQA;AACAE,qCAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,qCAASS,KAAT,GAAiBE,SAAjB;AACH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,iB;;;;;AA2Bf;;wEACA,kBAAyClB,CAAzC,EAA4C3C,MAA5C,EAAoD8D,KAApD,EAA2DlB,cAA3D,EAA2EC,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,gBAAgBF,cAAhB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIgB,qBAAJ,CAA0BpB,CAA1B,EAA6B3C,MAA7B,EAAqC8D,KAArC,CALnB;;AAMIzC,+CAAuB4B,IAAvB,CAA4BF,QAA5B;;AAEA;AACAG,yCAAiBH,QAAjB;;AAEA;AAXJ,0DAYW,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAI+B,YAAY7B,WAAW,YAAM;AAC7B;AACA,oCAAIuB,gBAAgB/B,uBAAuBgC,OAAvB,CAA+BN,QAA/B,CAApB;AACA1B,uDAAuBN,MAAvB,CAA8BqC,aAA9B,EAA6C,CAA7C;;AAEA1B,wCAAQ,UAAR;AACH,6BANe,EAMbmB,gBAAgB,IANH,CAAhB;;AAQA;AACAE,qCAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,qCAASS,KAAT,GAAiBE,SAAjB;AACH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAezD,yB;;;;;AA2Bf;;wEACA,kBAAuCyC,CAAvC,EAA0C/C,KAA1C,EAAiDmE,KAAjD,EAAwDlB,cAAxD,EAAwEC,aAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,gBAAgBF,cAAhB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIiB,mBAAJ,CAAwBtB,CAAxB,EAA2B/C,KAA3B,EAAkCmE,KAAlC,CALnB;;AAMIxC,6CAAqB2B,IAArB,CAA0BF,QAA1B;;AAEA;AACAG,yCAAiBH,QAAjB;;AAEA;AAXJ,0DAYW,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAI+B,YAAY7B,WAAW,YAAM;AAC7B;AACA,oCAAIuB,gBAAgB9B,qBAAqB+B,OAArB,CAA6BN,QAA7B,CAApB;AACAzB,qDAAqBP,MAArB,CAA4BqC,aAA5B,EAA2C,CAA3C;;AAEA1B,wCAAQ,UAAR;AACH,6BANe,EAMbmB,gBAAgB,IANH,CAAhB;;AAQA;AACAE,qCAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,qCAASS,KAAT,GAAiBE,SAAjB;AACH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAexD,uB;;;;;AA2Bf;;wEACA,kBAAwBwC,CAAxB,EAA2BC,CAA3B,EAA8BhD,KAA9B,EAAqCK,MAArC,EAA6C4C,cAA7C,EAA6DC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,gBAAgBF,cAAhB,CAFV;;AAAA;;AAII;AACIG,gCALR,GAKmB,IAAIkB,IAAJ,CAASvB,CAAT,EAAYC,CAAZ,EAAehD,KAAf,EAAsBK,MAAtB,CALnB;;AAMIuB,8BAAM0B,IAAN,CAAWF,QAAX;;AAEA;AACAG,yCAAiBH,QAAjB;;AAEA;AAXJ,0DAYW,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAI+B,YAAY7B,WAAW,YAAM;AAC7B;AACA,oCAAIuB,gBAAgB7B,MAAM8B,OAAN,CAAcN,QAAd,CAApB;AACAxB,sCAAMR,MAAN,CAAaqC,aAAb,EAA4B,CAA5B;;AAEA1B,wCAAQ,UAAR;AACH,6BANe,EAMbmB,gBAAgB,IANH,CAAhB;;AAQA;AACAE,qCAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,qCAASS,KAAT,GAAiBE,SAAjB;AACH,yBAZM,CAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeQ,Q;;;;;;;;;AA/df;;AAEA,IAAMxE,SAASsC,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMH,UAAUpC,OAAOyE,UAAP,CAAkB,IAAlB,CAAhB;AACArC,QAAQsC,SAAR,GAAoB,CAApB;;AAEA;;AAEA,IAAI1D,YAAY,SAAhB;AACA,IAAIyB,0BAA0B,KAA9B;AACA,IAAIkC,cAAc,EAAlB;;AAEA,IAAI9D,eAAe,CAAnB;;AAEA,IAAI+D,kBAAkB,CAAtB;AACA,IAAIC,qBAAqB,CAAzB;;AAEA,IAAIC,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;;AAEA,IAAIC,YAAY,KAAhB;;AAEA,IAAIC,qBAAqB,KAAzB;AACA,IAAIC,iBAAiB,IAArB;AACA,IAAIC,eAAe,EAAnB;;AAEA;AACA,IAAIC,mBAAmB9C,SAAS+C,aAAT,CAAuB,KAAvB,CAAvB;AACAD,iBAAiBE,GAAjB,GAAuB,gCAAvB;;AAEA,IAAIC,uBAAuBjD,SAAS+C,aAAT,CAAuB,KAAvB,CAA3B;AACAE,qBAAqBD,GAArB,GAA2B,oCAA3B;;AAEA,IAAIE,8BAA8BlD,SAAS+C,aAAT,CAAuB,KAAvB,CAAlC;AACAG,4BAA4BF,GAA5B,GAAkC,2CAAlC;;AAEA;AACA,IAAI/D,gBAAgB,EAApB;AACA,IAAIC,SAAS,EAAb;AACA,IAAIC,mBAAmB,EAAvB;AACA,IAAIC,iBAAiB,EAArB;AACA,IAAIG,QAAQ,EAAZ;AACA,IAAIF,yBAAyB,EAA7B;AACA,IAAIC,uBAAuB,EAA3B;;AAEA,IAAIV,gBAAgB,EAApB;;AAEA,IAAIuE,qBAAqB,EAAzB;;AAEA;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKzF,KAAL,GAAa,EAAb;AACA,SAAKK,MAAL,GAAc,EAAd;AACA,SAAKqF,gBAAL,GAAwB,EAAxB;AACA,SAAK3C,CAAL,GAAShD,OAAOC,KAAP,GAAe,CAAf,GAAmB,KAAKA,KAAL,GAAa,CAAzC;AACA,SAAKgD,CAAL,GAASjD,OAAOM,MAAP,GAAgB,CAAhB,GAAoB,KAAKA,MAAL,GAAc,CAA3C;AACA,SAAKyB,EAAL,GAAU,CAAV;AACA,SAAKqC,KAAL,GAAa,CAAb;AACA,SAAKwB,kBAAL,GAA0B,CAA1B;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKlD,CAA1B;AACA,SAAKmD,aAAL,GAAqB,KAAKlD,CAA1B;AACA,SAAKnB,KAAL,GAAa,SAAb;AACA,SAAKsE,MAAL,GAAchB,gBAAd;AACH,C;;AACJ;;IAEKiB,Y,GACF,wBAAc;AAAA;;AACV;AACA,SAAKxC,cAAL;AACA,SAAKC,KAAL;AACH,C;;AACJ;;IAEKR,K,GACF,eAAYN,CAAZ,EAAeC,CAAf,EAAkB;AAAA;;AACd,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKhD,KAAL,GAAa,EAAb;AACA,SAAKK,MAAL,GAAc,EAAd;;AAEA;AACA,SAAKwB,KAAL,GAAa,SAAb;AACA,SAAKwE,OAAL,GAAe,IAAf;AACH,C;;IAGCvC,e,GACF,yBAAYd,CAAZ,EAAe3C,MAAf,EAAuB;AAAA;;AACnB,SAAK0C,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKhD,KAAL,GAAaD,OAAOC,KAApB;AACA,SAAKK,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKwB,KAAL,GAAa,SAAb;AACA,SAAKwE,OAAL,GAAe,IAAf;AACH,C;;AACJ;;IAEKpC,a,GACF,uBAAYlB,CAAZ,EAAe/C,KAAf,EAAsB;AAAA;;AAClB,SAAK+C,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKhD,KAAL,GAAaA,KAAb;AACA,SAAKK,MAAL,GAAcN,OAAOM,MAArB;;AAEA;AACA,SAAKwB,KAAL,GAAa,SAAb;AACA,SAAKwE,OAAL,GAAe,IAAf;AACH,C;;AACJ;;IAEKjC,qB,GACF,+BAAYpB,CAAZ,EAAe3C,MAAf,EAAuB8D,KAAvB,EAA8B;AAAA;;AAC1B,SAAKpB,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKhD,KAAL,GAAaD,OAAOC,KAApB;AACA,SAAKK,MAAL,GAAcA,MAAd;AACA,SAAK8D,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAKtC,KAAL,GAAa,SAAb;AACA,SAAKwE,OAAL,GAAe,IAAf;AACH,C;;AACJ;;IAEKhC,mB,GACF,6BAAYtB,CAAZ,EAAe/C,KAAf,EAAsBmE,KAAtB,EAA6B;AAAA;;AACzB,SAAKpB,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKhD,KAAL,GAAaA,KAAb;AACA,SAAKK,MAAL,GAAcN,OAAOM,MAArB;AACA,SAAK8D,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAKtC,KAAL,GAAa,SAAb;AACA,SAAKwE,OAAL,GAAe,IAAf;AACH,C;;AACJ;;IAEK/B,I,GACF,cAAYvB,CAAZ,EAAeC,CAAf,EAAkBhD,KAAlB,EAAyBK,MAAzB,EAAiC;AAAA;;AAC7B,SAAK0C,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKhD,KAAL,GAAaA,KAAb;AACA,SAAKK,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKwB,KAAL,GAAa,SAAb;AACA,SAAKwE,OAAL,GAAe,IAAf;AACH,C;;AACJ,CA0BA,CAaA;;AAED;AACA,SAASvG,eAAT,CAAyBwG,QAAzB,EAAmCC,QAAnC,EAA6C;AACzClE,aAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,YAAY3B,YAAhE;;AAEAG,gBAAY,SAAZ;AACAyB,8BAA0B,KAA1B;;AAEAvC,YAAQ8C,CAAR,GAAYuD,QAAZ;AACArG,YAAQ+C,CAAR,GAAYuD,QAAZ;;AAEA3B,yBAAqB,CAArB;;AAEAI,yBAAqB,KAArB;AACAC,qBAAiB,IAAjB;AACH,EAuDA;;AAED,SAASvC,YAAT,GAAwB;AACpB,YAAQ9B,YAAR;AACI,aAAK,CAAL;AACID;AACA;AACJ,aAAK,CAAL;AACIG;AACA;AANR,KAOC;AACJ;;AAED;;AAEA,SAASJ,aAAT,GAAyB;AACrBE;;AAEA;AACA+D,uBAAmBC,kBAAnB;;AAEAlC;AACH;;AAED,SAASrB,eAAT,CAAyBmF,WAAzB,EAAsC;AAClC,SAAK,IAAIxF,IAAI,CAAb,EAAgBA,IAAIwF,YAAYtF,MAAhC,EAAwCF,GAAxC,EAA6C;AACzC;AACA,YAAIoC,WAAWoD,YAAYxF,CAAZ,CAAf;AACAoC,iBAASQ,cAAT;AACAzC,qBAAaiC,SAASS,KAAtB;AACA2C,oBAAYpF,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAASyF,eAAT,CAAyB5C,KAAzB,EAAgC;AAC5B5C,kBAAcqC,IAAd,CAAmBO,KAAnB;AACH;;AAED;AACA,SAAS6C,kBAAT,CAA4B7C,KAA5B,EAAmC;AAC/B,QAAI8C,oBAAoB1F,cAAcyC,OAAd,CAAsBG,KAAtB,CAAxB;AACA5C,kBAAcG,MAAd,CAAqBuF,iBAArB,EAAwC,CAAxC;AACH;;AAED;;AAEA;AACA;AACA,SAASxD,eAAT,CAAyBF,cAAzB,EAAyC;AACrC;AACA,QAAIG,WAAW,IAAIgD,YAAJ,EAAf;AACA9E,kBAAcgC,IAAd,CAAmBF,QAAnB;;AAEA,WAAO,IAAIlD,OAAJ,CAAY,UAAC6B,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI4E,cAAc1E,WAAW,YAAM;AAC/B;AACA,gBAAIuB,gBAAgBnC,cAAcoC,OAAd,CAAsBN,QAAtB,CAApB;AACA9B,0BAAcF,MAAd,CAAqBqC,aAArB,EAAoC,CAApC;;AAEA1B,oBAAQ,UAAR;AACH,SANiB,EAMfkB,iBAAiB,IANF,CAAlB;;AAQAG,iBAASQ,cAAT,GAA0B5B,MAA1B;AACAoB,iBAASS,KAAT,GAAiB+C,WAAjB;AACH,KAXM,CAAP;AAYH,EA6BA,CA4BA,CA4BA,CA4BA,CA4BA,CA4BA;;AAED;;AAEA;AACA,SAASC,qBAAT,CAA+BC,WAA/B,EAA4CC,WAA5C,EAAyD;AACrD,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAYhE,CAAZ,IAAiB+D,YAAY/D,CAA9B,IAAqC+D,YAAY/D,CAAZ,IAAiBgE,YAAYhE,CAAZ,GAAgBgE,YAAY/G,KAAlF,IAA6F+G,YAAYlF,KAAZ,KAAsB,SAAvH,EAAmI;AAC/HmF,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKF,YAAY/D,CAAZ,IAAiBgE,YAAYhE,CAA9B,IAAqCgE,YAAYhE,CAAZ,IAAiB+D,YAAY/D,CAAZ,GAAgB+D,YAAY9G,KAAlF,IAA6F+G,YAAYlF,KAAZ,KAAsB,SAAvH,EAAmI;AACtImF,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAY/D,CAAZ,IAAiB8D,YAAY9D,CAA9B,IAAqC8D,YAAY9D,CAAZ,IAAiB+D,YAAY/D,CAAZ,GAAgB+D,YAAY1G,MAAlF,IAA8F0G,YAAYlF,KAAZ,KAAsB,SAAxH,EAAoI;AAChIoF,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKH,YAAY9D,CAAZ,IAAiB+D,YAAY/D,CAA9B,IAAqC+D,YAAY/D,CAAZ,IAAiB8D,YAAY9D,CAAZ,GAAgB8D,YAAYzG,MAAlF,IAA8F0G,YAAYlF,KAAZ,KAAsB,SAAxH,EAAoI;AACvIoF,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1BlC,oBAAY,IAAZ;AACAS,2BAAmBlC,IAAnB,CAAwByD,WAAxB;AACH;AACJ;;AAED;AACA,SAASG,0BAAT,GAAsC;AAClC,SAAK,IAAIlG,IAAI,CAAb,EAAgBA,IAAIU,uBAAuBR,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAIU,uBAAuBV,CAAvB,EAA0Ba,KAA1B,KAAoC,SAAxC,EAAmD;AAC/CH,mCAAuBV,CAAvB,EAA0BgC,CAA1B,IAA+BtB,uBAAuBV,CAAvB,EAA0BmD,KAAzD;AACH;AACJ;AACJ;;AAED;AACA,SAASgD,wBAAT,GAAoC;AAChC,SAAK,IAAInG,IAAI,CAAb,EAAgBA,IAAIW,qBAAqBT,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAIW,qBAAqBX,CAArB,EAAwBa,KAAxB,KAAkC,SAAtC,EAAiD;AAC7CF,iCAAqBX,CAArB,EAAwB+B,CAAxB,IAA6BpB,qBAAqBX,CAArB,EAAwBmD,KAArD;AACH;AACJ;AACJ;;AAED;;AAEA,SAASiD,WAAT,GAAuB;AACnB,QAAInH,QAAQ4B,KAAR,KAAkB,SAAtB,EAAiC;AAC7B5B,gBAAQkG,MAAR,GAAiBhB,gBAAjB;AACA;AACA;AACAlF,gBAAQ6B,EAAR,GAAa7B,QAAQyF,gBAAR,IAA4B2B,KAAKC,KAAL,CAAWrH,QAAQ0F,kBAAR,GAA6B,EAAxC,IAA8C,CAA1E,CAAb;AACH,KALD,MAKO,IAAI1F,QAAQ4B,KAAR,KAAkB,oBAAtB,EAA4C;AAC/C5B,gBAAQkG,MAAR,GAAiBZ,2BAAjB;AACAtF,gBAAQ6B,EAAR,GAAa,CAAb;AACH,KAHM,MAGA,IAAI7B,QAAQ4B,KAAR,KAAkB,aAAtB,EAAqC;AACxC5B,gBAAQkG,MAAR,GAAiBb,oBAAjB;;AAEA,YAAIiC,+BAA+BrF,WAAW,YAAM;AAChDsF,0BAAcC,yBAAd;AACAf,+BAAmBe,yBAAnB;AACAf,+BAAmBa,4BAAnB;AACH,SAJkC,EAIhC,MAAM,IAJ0B,CAAnC;AAKAd,wBAAgBc,4BAAhB;;AAEA,YAAIE,4BAA4BC,YAAY,YAAM;AAC9CzH,oBAAQ6B,EAAR,IAAc7B,QAAQyF,gBAAtB;AACH,SAF+B,EAE7B,MAAM,IAFuB,CAAhC;AAGAe,wBAAgBgB,yBAAhB;AACH;;AAEDtF,YAAQwF,SAAR,CAAkB1H,QAAQkG,MAA1B,EAAkClG,QAAQ6B,EAA1C,EAA8C,CAA9C,EAAiD7B,QAAQyF,gBAAzD,EAA2EzF,QAAQyF,gBAAnF,EAAqGzF,QAAQ8C,CAA7G,EAAgH9C,QAAQ+C,CAAxH,EAA2H/C,QAAQD,KAAnI,EAA0IC,QAAQI,MAAlJ;AACH;;AAED,SAASuH,UAAT,GAAsB;AAClB,SAAK,IAAI5G,IAAI,CAAb,EAAgBA,IAAIO,OAAOL,MAA3B,EAAmCF,GAAnC,EAAwC;AACpC,YAAI6G,kBAAkBtG,OAAOP,CAAP,CAAtB;AACA,YAAI6G,gBAAgBxB,OAApB,EAA6B;AACzB;AACA,gBAAIwB,gBAAgBhG,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ2F,WAAR,GAAsB,MAAtB;AACA3F,wBAAQ4F,UAAR,CAAmBF,gBAAgB9E,CAAnC,EAAsC8E,gBAAgB7E,CAAtD,EAAyD6E,gBAAgB7H,KAAzE,EAAgF6H,gBAAgBxH,MAAhG;AACH,aAHD,MAGO,IAAIwH,gBAAgBhG,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ6F,SAAR,GAAoB,MAApB;AACA7F,wBAAQ8F,QAAR,CAAiBJ,gBAAgB9E,CAAjC,EAAoC8E,gBAAgB7E,CAApD,EAAuD6E,gBAAgB7H,KAAvE,EAA8E6H,gBAAgBxH,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS6H,oBAAT,GAAgC;AAC5B,SAAK,IAAIlH,IAAI,CAAb,EAAgBA,IAAIQ,iBAAiBN,MAArC,EAA6CF,GAA7C,EAAkD;AAC9C,YAAI6G,kBAAkBrG,iBAAiBR,CAAjB,CAAtB;AACA,YAAI6G,gBAAgBxB,OAApB,EAA6B;AACzB;AACA,gBAAIwB,gBAAgBhG,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ2F,WAAR,GAAsB,SAAtB;AACA3F,wBAAQ4F,UAAR,CAAmBF,gBAAgB9E,CAAhB,GAAoB,EAAvC,EAA2C8E,gBAAgB7E,CAA3D,EAA8D,EAA9D,EAAkE6E,gBAAgBxH,MAAlF;AACA8B,wBAAQ4F,UAAR,CAAmBF,gBAAgB7H,KAAhB,GAAwB,EAA3C,EAA+C6H,gBAAgB7E,CAA/D,EAAkE,EAAlE,EAAsE6E,gBAAgBxH,MAAtF;AACH,aAJD,MAIO,IAAIwH,gBAAgBhG,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ6F,SAAR,GAAoB,SAApB;AACA7F,wBAAQ8F,QAAR,CAAiBJ,gBAAgB9E,CAAjC,EAAoC8E,gBAAgB7E,CAApD,EAAuD6E,gBAAgB7H,KAAvE,EAA8E6H,gBAAgBxH,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS8H,kBAAT,GAA8B;AAC1B,SAAK,IAAInH,IAAI,CAAb,EAAgBA,IAAIS,eAAeP,MAAnC,EAA2CF,GAA3C,EAAgD;AAC5C,YAAI6G,kBAAkBpG,eAAeT,CAAf,CAAtB;AACA,YAAI6G,gBAAgBxB,OAApB,EAA6B;AACzB;AACA,gBAAIwB,gBAAgBhG,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ2F,WAAR,GAAsB,SAAtB;AACA3F,wBAAQ4F,UAAR,CAAmBF,gBAAgB9E,CAAnC,EAAsC8E,gBAAgB7E,CAAhB,GAAoB,EAA1D,EAA8D6E,gBAAgB7H,KAA9E,EAAqF,EAArF;AACAmC,wBAAQ4F,UAAR,CAAmBF,gBAAgB9E,CAAnC,EAAsC8E,gBAAgBxH,MAAhB,GAAyB,EAA/D,EAAmEwH,gBAAgB7H,KAAnF,EAA0F,EAA1F;AACH,aAJD,MAIO,IAAI6H,gBAAgBhG,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ6F,SAAR,GAAoB,SAApB;AACA7F,wBAAQ8F,QAAR,CAAiBJ,gBAAgB9E,CAAjC,EAAoC8E,gBAAgB7E,CAApD,EAAuD6E,gBAAgB7H,KAAvE,EAA8E6H,gBAAgBxH,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS+H,0BAAT,GAAsC;AAClC,SAAK,IAAIpH,IAAI,CAAb,EAAgBA,IAAIU,uBAAuBR,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAI6G,kBAAkBnG,uBAAuBV,CAAvB,CAAtB;AACA,YAAI6G,gBAAgBxB,OAApB,EAA6B;AACzB;AACA,gBAAIwB,gBAAgBhG,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ6F,SAAR,GAAoB,SAApB;;AAEA;AACA;AACA7F,wBAAQkG,SAAR;AACAlG,wBAAQmG,MAAR,CAAeT,gBAAgB9E,CAAhB,GAAoB,CAAnC,EAAsC8E,gBAAgB7E,CAAhB,GAAoB6E,gBAAgBxH,MAAhB,GAAyBgH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAAnF;AACAhC,wBAAQuG,MAAR,CAAeb,gBAAgB9E,CAAhB,GAAoB,EAAnC,EAAuC8E,gBAAgB7E,CAAhB,GAAoB6E,gBAAgBxH,MAAhB,GAAyBgH,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAApF;AACAhC,wBAAQuG,MAAR,CAAeb,gBAAgB9E,CAAhB,GAAoB,EAAnC,EAAuC8E,gBAAgB7E,CAAhB,GAAoB6E,gBAAgBxH,MAAhB,GAAyBgH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAApF;AACAhC,wBAAQyG,IAAR;;AAEA;AACAzG,wBAAQkG,SAAR;AACAlG,wBAAQmG,MAAR,CAAeT,gBAAgB7H,KAAhB,GAAwB,CAAvC,EAA0C6H,gBAAgB7E,CAAhB,GAAoB6E,gBAAgBxH,MAAhB,GAAyBgH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAAvF;AACAhC,wBAAQuG,MAAR,CAAeb,gBAAgB7H,KAAhB,GAAwB,EAAvC,EAA2C6H,gBAAgB7E,CAAhB,GAAoB6E,gBAAgBxH,MAAhB,GAAyBgH,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAxF;AACAhC,wBAAQuG,MAAR,CAAeb,gBAAgB7H,KAAhB,GAAwB,EAAvC,EAA2C6H,gBAAgB7E,CAAhB,GAAoB6E,gBAAgBxH,MAAhB,GAAyBgH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAAxF;AACAhC,wBAAQyG,IAAR;AACH,aAjBD,MAiBO,IAAIf,gBAAgBhG,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ6F,SAAR,GAAoB,SAApB;AACA7F,wBAAQ8F,QAAR,CAAiBJ,gBAAgB9E,CAAjC,EAAoC8E,gBAAgB7E,CAApD,EAAuD6E,gBAAgB7H,KAAvE,EAA8E6H,gBAAgBxH,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASwI,wBAAT,GAAoC;AAChC,SAAK,IAAI7H,IAAI,CAAb,EAAgBA,IAAIW,qBAAqBT,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAI6G,kBAAkBlG,qBAAqBX,CAArB,CAAtB;AACA,YAAI6G,gBAAgBxB,OAApB,EAA6B;AACzB;AACA,gBAAIwB,gBAAgBhG,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ6F,SAAR,GAAoB,SAApB;;AAEA;AACA;AACA7F,wBAAQkG,SAAR;AACAlG,wBAAQmG,MAAR,CAAeT,gBAAgB9E,CAAhB,GAAoB8E,gBAAgB7H,KAAhB,GAAwBqH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAA3D,EAAoH0D,gBAAgB7E,CAAhB,GAAoB,CAAxI;AACAb,wBAAQuG,MAAR,CAAeb,gBAAgB9E,CAAhB,GAAoB8E,gBAAgB7H,KAAhB,GAAwBqH,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAA3D,EAA0G0D,gBAAgB7E,CAAhB,GAAoB,EAA9H;AACAb,wBAAQuG,MAAR,CAAeb,gBAAgB9E,CAAhB,GAAoB8E,gBAAgB7H,KAAhB,GAAwBqH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAA3D,EAAoH0D,gBAAgB7E,CAAhB,GAAoB,EAAxI;AACAb,wBAAQyG,IAAR;;AAEA;AACAzG,wBAAQkG,SAAR;AACAlG,wBAAQmG,MAAR,CAAeT,gBAAgB9E,CAAhB,GAAoB8E,gBAAgB7H,KAAhB,GAAwBqH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAA3D,EAAoH0D,gBAAgBxH,MAAhB,GAAyB,CAA7I;AACA8B,wBAAQuG,MAAR,CAAeb,gBAAgB9E,CAAhB,GAAoB8E,gBAAgB7H,KAAhB,GAAwBqH,KAAKsB,GAAL,CAAS,CAAT,EAAYtB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAA3D,EAA0G0D,gBAAgBxH,MAAhB,GAAyB,EAAnI;AACA8B,wBAAQuG,MAAR,CAAeb,gBAAgB9E,CAAhB,GAAoB8E,gBAAgB7H,KAAhB,GAAwBqH,KAAKkB,GAAL,CAASlB,KAAKmB,GAAL,CAAS,CAAT,EAAYnB,KAAKoB,IAAL,CAAUZ,gBAAgB1D,KAA1B,CAAZ,CAAT,CAA3D,EAAoH0D,gBAAgBxH,MAAhB,GAAyB,EAA7I;AACA8B,wBAAQyG,IAAR;AACH,aAjBD,MAiBO,IAAIf,gBAAgBhG,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ6F,SAAR,GAAoB,SAApB;AACA7F,wBAAQ8F,QAAR,CAAiBJ,gBAAgB9E,CAAjC,EAAoC8E,gBAAgB7E,CAApD,EAAuD6E,gBAAgB7H,KAAvE,EAA8E6H,gBAAgBxH,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASyI,SAAT,GAAqB;AACjB,SAAK,IAAI9H,IAAI,CAAb,EAAgBA,IAAIY,MAAMV,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,YAAI6G,kBAAkBjG,MAAMZ,CAAN,CAAtB;AACA,YAAI6G,gBAAgBxB,OAApB,EAA6B;AACzB;AACA,gBAAIwB,gBAAgBhG,KAAhB,IAAyB,SAA7B,EAAwC;AACpCM,wBAAQ2F,WAAR,GAAsB,SAAtB;AACA3F,wBAAQ4F,UAAR,CAAmBF,gBAAgB9E,CAAnC,EAAsC8E,gBAAgB7E,CAAtD,EAAyD6E,gBAAgB7H,KAAzE,EAAgF6H,gBAAgBxH,MAAhG;AACH,aAHD,MAGO,IAAIwH,gBAAgBhG,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CM,wBAAQ6F,SAAR,GAAoB,UAApB;AACA7F,wBAAQ8F,QAAR,CAAiBJ,gBAAgB9E,CAAjC,EAAoC8E,gBAAgB7E,CAApD,EAAuD6E,gBAAgB7H,KAAvE,EAA8E6H,gBAAgBxH,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED;;AAEA,SAAS0I,wBAAT,CAAkCC,UAAlC,EAA8C;AAC1C,SAAK,IAAIhI,IAAI,CAAb,EAAgBA,IAAIgI,WAAW9H,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC6F,8BAAsB5G,OAAtB,EAA+B+I,WAAWhI,CAAX,CAA/B;AACH;AACJ;;AAED;;AAEA,SAASiI,mBAAT,GAA+B;AAC3B;AACA;AACA5G,aAAS6G,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtCxE,oBAAYyE,EAAEC,OAAd,IAAyB,IAAzB;AACH,KAFD;;AAIA;AACA/G,aAAS6G,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC,eAAOxE,YAAYyE,EAAEC,OAAd,CAAP;AACH,KAFD;AAGH;;AAED,SAASC,qBAAT,CAA+BtG,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,WAAOqE,KAAKiC,KAAL,CAAWtG,CAAX,EAAcD,CAAd,CAAP;AACH;;AAED,SAASwG,uBAAT,CAAiCC,OAAjC,EAA0C;AACtC,WAAOA,UAAU,GAAV,GAAgBnC,KAAKoC,EAA5B;AACH;;AAED;AACA;AACA,SAASlG,gBAAT,CAA0BH,QAA1B,EAAoC;AAChC,QAAIsG,sBAAsBxH,WAAW,YAAM;AACvCkB,iBAASiD,OAAT,GAAmB,KAAnB;AACAK,2BAAmBgD,mBAAnB;AACH,KAHyB,EAGvB,OAAO,IAHgB,CAA1B;AAIAjD,oBAAgBiD,mBAAhB;;AAEA,QAAIC,oBAAoBzH,WAAW,YAAM;AACrCkB,iBAASiD,OAAT,GAAmB,IAAnB;AACAK,2BAAmBiD,iBAAnB;AACH,KAHuB,EAGrB,MAAM,IAHe,CAAxB;AAIAlD,oBAAgBkD,iBAAhB;;AAEA,QAAIC,sBAAsB1H,WAAW,YAAM;AACvCkB,iBAASiD,OAAT,GAAmB,KAAnB;AACAK,2BAAmBkD,mBAAnB;AACH,KAHyB,EAGvB,OAAO,IAHgB,CAA1B;AAIAnD,oBAAgBmD,mBAAhB;;AAEA,QAAIC,OAAO3H,WAAW,YAAM;AACxBkB,iBAASvB,KAAT,GAAiB,QAAjB;AACAuB,iBAASiD,OAAT,GAAmB,IAAnB;AACAK,2BAAmBmD,IAAnB;AACH,KAJU,EAIR,IAJQ,CAAX;AAKApD,oBAAgBoD,IAAhB;AACH;;AAED;;AAEAZ;;AAEA,SAASpG,QAAT,GAAoB;AAChB;;AAEA,QAAI,CAACmC,kBAAL,EAAyB;AACrB;AACAH,iBAAS,CAAT;AACAC,iBAAS,CAAT;;AAEA;AACA,YAAIJ,YAAY,EAAZ,CAAJ,EAAqB;AACjBG,sBAAU,CAAV;AACH;;AAED,YAAIH,YAAY,EAAZ,CAAJ,EAAqB;AACjBG,sBAAU,CAAV;AACH;;AAED,YAAIH,YAAY,EAAZ,CAAJ,EAAqB;AACjBI,sBAAU,CAAV;AACH;;AAED,YAAIJ,YAAY,EAAZ,CAAJ,EAAqB;AACjBI,sBAAU,CAAV;AACH;;AAED;AACA,YAAIJ,YAAY,EAAZ,KAAmBO,cAAnB,KAAsCJ,WAAW,CAAX,IAAgBC,WAAW,CAAjE,CAAJ,EAAyE;AACrE;AACA,mBAAOJ,YAAY,EAAZ,CAAP;;AAEAzE,oBAAQ4B,KAAR,GAAgB,oBAAhB;AACA5B,oBAAQkE,KAAR,GAAgBe,YAAhB;AACAF,iCAAqB,IAArB;;AAEA,gBAAI8E,sBAAsB,GAA1B;AACA,gBAAIC,kBAAkB7H,WAAW,YAAM;AACnC8C,qCAAqB,KAArB;AACAC,iCAAiB,KAAjB;AACAhF,wBAAQ4B,KAAR,GAAgB,SAAhB;AACA6E,mCAAmBqD,eAAnB;AACH,aALqB,EAKnBD,sBAAsB,IALH,CAAtB;AAMArD,4BAAgBsD,eAAhB;;AAEA,gBAAIC,0BAA0B,GAA9B;AACA,gBAAIC,sBAAsB/H,WAAW,YAAM;AACvC+C,iCAAiB,IAAjB;AACAyB,mCAAmBuD,mBAAnB;AACH,aAHyB,EAGvBD,0BAA0B,IAHH,CAA1B;AAIAvD,4BAAgBwD,mBAAhB;AACH,SAvBD,MAuBO;AACHhK,oBAAQkE,KAAR,GAAgB,CAAhB;AACH;;AAED;AACA;AACA;AACAlE,gBAAQ0F,kBAAR,GAA6B,CAAC,GAA9B;;AAEA,YAAId,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9B;AACA7E,oBAAQ2F,kBAAR,GAA6ByD,sBAAsBxE,MAAtB,EAA8BC,MAA9B,CAA7B;;AAEA;AACA7E,oBAAQ0F,kBAAR,GAA6B4D,wBAAwBtJ,QAAQ2F,kBAAhC,CAA7B;;AAEA;AACA3F,oBAAQ4F,EAAR,GAAawB,KAAK6C,GAAL,CAASjK,QAAQ2F,kBAAjB,IAAuC3F,QAAQkE,KAA5D;AACAlE,oBAAQ6F,EAAR,GAAauB,KAAK8C,GAAL,CAASlK,QAAQ2F,kBAAjB,IAAuC3F,QAAQkE,KAA5D;;AAEA;AACAlE,oBAAQ8F,SAAR,IAAqB9F,QAAQ4F,EAA7B;AACA5F,oBAAQ+F,SAAR,IAAqB/F,QAAQ6F,EAA7B;;AAEA;AACA7F,oBAAQ4F,EAAR,GAAawB,KAAK+C,KAAL,CAAWnK,QAAQ8F,SAAnB,CAAb;AACA9F,oBAAQ6F,EAAR,GAAauB,KAAK+C,KAAL,CAAWnK,QAAQ+F,SAAnB,CAAb;;AAEA;AACA/F,oBAAQ8F,SAAR,IAAqB9F,QAAQ4F,EAA7B;AACA5F,oBAAQ+F,SAAR,IAAqB/F,QAAQ6F,EAA7B;;AAEA;AACA7F,oBAAQgG,aAAR,GAAwBhG,QAAQ8C,CAAR,GAAY9C,QAAQ4F,EAA5C;AACA5F,oBAAQiG,aAAR,GAAwBjG,QAAQ+C,CAAR,GAAY/C,QAAQ6F,EAA5C;AACH,SA1BD,MA0BO;AACH;AACA7F,oBAAQgG,aAAR,GAAwBhG,QAAQ8C,CAAhC;AACA9C,oBAAQiG,aAAR,GAAwBjG,QAAQ+C,CAAhC;AACH;;AAED;AACA;AACA,YAAI,EAAE/C,QAAQgG,aAAR,IAAyB,CAAzB,IAA+BhG,QAAQgG,aAAR,GAAwBhG,QAAQD,KAAjC,IAA2CD,OAAOC,KAAlF,CAAJ,EAA8F;AAC1FC,oBAAQ8C,CAAR,GAAY9C,QAAQgG,aAApB;AACH,SAFD,MAEO,IAAIhG,QAAQgG,aAAR,IAAyB,CAA7B,EAAgC;AACnChG,oBAAQ8C,CAAR,GAAY,CAAZ;AACH,SAFM,MAEA,IAAK9C,QAAQgG,aAAR,GAAwBhG,QAAQD,KAAjC,IAA2CD,OAAOC,KAAtD,EAA6D;AAChEC,oBAAQ8C,CAAR,GAAYhD,OAAOC,KAAP,GAAeC,QAAQD,KAAnC;AACH;;AAED,YAAI,EAAEC,QAAQiG,aAAR,IAAyB,CAAzB,IAA+BjG,QAAQiG,aAAR,GAAwBjG,QAAQI,MAAjC,IAA4CN,OAAOM,MAAnF,CAAJ,EAAgG;AAC5FJ,oBAAQ+C,CAAR,GAAY/C,QAAQiG,aAApB;AACH,SAFD,MAEO,IAAIjG,QAAQiG,aAAR,IAAyB,CAA7B,EAAgC;AACnCjG,oBAAQ+C,CAAR,GAAY,CAAZ;AACH,SAFM,MAEA,IAAK/C,QAAQiG,aAAR,GAAwBjG,QAAQI,MAAjC,IAA4CN,OAAOM,MAAvD,EAA+D;AAClEJ,oBAAQ+C,CAAR,GAAYjD,OAAOM,MAAP,GAAgBJ,QAAQI,MAApC;AACH;AACJ;;AAED;;AAEA6G;AACAC;;AAEA;;AAEA;AACApC,gBAAY,KAAZ;AACAS,uBAAmBpE,MAAnB,CAA0B,CAA1B;;AAEA2H,6BAAyBxH,MAAzB;AACAwH,6BAAyBvH,gBAAzB;AACAuH,6BAAyBtH,cAAzB;AACAsH,6BAAyBrH,sBAAzB;AACAqH,6BAAyBpH,oBAAzB;AACAoH,6BAAyBnH,KAAzB;;AAEA,SAAK,IAAIZ,IAAI,CAAb,EAAgBA,IAAIwE,mBAAmBtE,MAAvC,EAA+CF,GAA/C,EAAoD;AAChD,YAAIwE,mBAAmBxE,CAAnB,EAAsBqJ,WAAtB,CAAkCC,IAAlC,KAA2C,OAA3C,IAAsD9E,mBAAmBxE,CAAnB,EAAsBa,KAAtB,KAAgC,QAA1F,EAAoG;AAChG;AACA+C;;AAEA;AACA,gBAAI2F,iBAAiB/E,mBAAmBxE,CAAnB,CAArB;AACAuJ,2BAAe5G,eAAf;AACAxC,yBAAaoJ,eAAe1G,KAA5B;AACA,gBAAIJ,gBAAgBlC,OAAOmC,OAAP,CAAe6G,cAAf,CAApB;AACAhJ,mBAAOH,MAAP,CAAcqC,aAAd,EAA6B,CAA7B;AACH,SAVD,MAUO,IAAI+B,mBAAmBxE,CAAnB,EAAsBa,KAAtB,KAAgC,QAApC,EAA8C;AACjDiB;AACA;AACH;AACJ;;AAED;AACA,QAAI/B,cAAc,SAAlB,EAA6B;AACzB4B,eAAOC,qBAAP,CAA6BC,QAA7B;AACH;AACJ;;AAED;AACA;AACA,SAAS2H,WAAT,GAAuB;AACnB,QAAI,CAAChI,uBAAL,EAA8B;AAC1B;AACAH,iBAASC,cAAT,CAAwB,eAAxB,EAAyCC,SAAzC,GAAqD,cAAcoC,kBAAkBC,kBAAhC,CAArD;;AAEA;AACAzC,gBAAQC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBrC,OAAOC,KAA/B,EAAsCD,OAAOM,MAA7C;;AAEA6H;AACAC;AACAW;AACAV;AACAS;AACAjB;;AAEA;AACAR;AACH;;AAEDzE,WAAOC,qBAAP,CAA6B4H,WAA7B;AACH;;AAED;;AAEA,IAAIvK,UAAU,IAAIwF,MAAJ,EAAd;AACA9E;;AAEAgC,OAAOC,qBAAP,CAA6BC,QAA7B;AACAF,OAAOC,qBAAP,CAA6B4H,WAA7B","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet KeysPressed = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\nlet waitingTimers = [];\r\nlet points = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\nlet currentTimers = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass waitingTimer {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 24;\r\n        this.height = 24;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass horizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, 22 * 16);\r\n\r\n        await Promise.all([\r\n            createPoint(canvas.width / 2 - 12, canvas.height / 2 - 12, 0, 7),\r\n            fireMovingHorizontalLaser(0, 16, 0.5, 0, 7),\r\n            fireMovingVerticalLaser(0, 16, 0.5, 0, 7),\r\n            fireMovingVerticalLaser(canvas.width - 16, 16, -0.5, 0, 7),\r\n            fireMovingHorizontalLaser(canvas.height - 16, 16, -0.75, 2, 5)\r\n        ]);\r\n\r\n\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n\r\n        console.log(\"Level completed.\");\r\n        currentLevel++;\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    };\r\n\r\n    currentTimers.splice(0);\r\n\r\n    rejectInstances(waitingTimers);\r\n    rejectInstances(points);\r\n    rejectInstances(horizontalLasers);\r\n    rejectInstances(verticalLasers);\r\n    rejectInstances(movingHorizontalLasers);\r\n    rejectInstances(movingVerticalLasers);\r\n    rejectInstances(bombs);\r\n\r\n    //Removes all references to instances from arrays.\r\n    waitingTimers.splice(0);\r\n    points.splice(0);\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n    bombs.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let resumeGame = setTimeout(() => {\r\n            //Restarts the game.\r\n            diplayingGameOverScreen = false;\r\n            gameState = \"playing\";\r\n            blockie.state = \"playing\";\r\n            controlLevel();\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n            window.requestAnimationFrame(gameLoop);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction increaseLevel() {\r\n    currentLevel++;\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    permanentPoints += currentLevelPoints;\r\n\r\n    controlLevel();\r\n}\r\n\r\nfunction rejectInstances(objectArray) {\r\n    for (let i = 0; i < objectArray.length; i++) {\r\n        //Rejects the instances' Promises and timers and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timer);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers.\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a waitingTimer instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimer(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new waitingTimer();\r\n    waitingTimers.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimers.indexOf(instance);\r\n            waitingTimers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        instance.externalReject = reject;\r\n        instance.timer = stopWaiting;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPoint(x, y, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new point(x, y);\r\n    points.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let destroyPoint = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = points.indexOf(instance);\r\n            points.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n        instance.timer = destroyPoint;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new horizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new verticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new movingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new movingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalReject = reject;\r\n        instance.timer = endFiring;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimer(animateBlockieDestructing);\r\n            removeCurrentTimer(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimer(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPoints() {\r\n    for (let i = 0; i < points.length; i++) {\r\n        let currentInstance = points[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"Lime\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"Lime\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x + 12, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 28, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 12, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 28, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 8, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 24);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"##FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    checkCollisionsWithClass(points);\r\n    checkCollisionsWithClass(horizontalLasers);\r\n    checkCollisionsWithClass(verticalLasers);\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"point\" && collidingInstances[i].state === \"firing\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            //Resolves the point's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timer);\r\n            let instanceIndex = points.indexOf(collidingPoint);\r\n            points.splice(instanceIndex, 1);\r\n        } else if (collidingInstances[i].state === \"firing\") {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawPoints();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}