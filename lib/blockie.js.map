{"version":3,"sources":["../src/blockie.js"],"names":["Promise","all","fireHorizontalLaser","levelOne","canvas","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","horizontalLasers","Player","sideLength","spriteSideLength","x","width","y","height","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","horizontalLaser","seconds","push","newInstanceIndex","length","resolve","setTimeout","splice","console","log","drawHorizontalLasers","i","currentInstance","fillRect","checkSpritesColliding","xOne","yOne","widthOne","heightOne","xTwo","yTwo","widthTwo","heightTwo","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","blockie","loop","clearRect","cos","sin","floor","round","drawImage","window","requestAnimationFrame"],"mappings":";;AAoDA;;AAEA;;uEACA;AAAA;AAAA;AAAA;AAAA;AACIA,gCAAQC,GAAR,CAAY,CACRC,oBAAoB,GAApB,EAAyB,EAAzB,EAA6B,EAA7B,CADQ,EAERA,oBAAoB,GAApB,EAAyB,EAAzB,EAA6B,EAA7B,CAFQ,CAAZ;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Q;;;;;;;;;AAvDf;;AAEA,IAAMC,SAASC,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMC,UAAUH,OAAOI,UAAP,CAAkB,IAAlB,CAAhB;AACAD,QAAQE,SAAR,GAAoB,OAApB;;AAEA;;AAEA,IAAIC,cAAc,EAAlB;AACA,IAAIC,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;AACA,IAAIC,YAAY,KAAhB;;AAEA;;AAEA,IAAIC,mBAAmB,EAAvB;;AAEA;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,CAAL,GAASd,OAAOe,KAAP,GAAe,CAAf,GAAmB,KAAKH,UAAL,GAAkB,CAA9C;AACA,SAAKI,CAAL,GAAShB,OAAOiB,MAAP,GAAgB,CAAhB,GAAoB,KAAKL,UAAL,GAAkB,CAA/C;AACA,SAAKM,EAAL,GAAU,CAAV;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKZ,CAA1B;AACA,SAAKa,aAAL,GAAqB,KAAKX,CAA1B;;AAEA;AACA;AACA,SAAKY,MAAL,GAAc3B,SAAS4B,aAAT,CAAuB,KAAvB,CAAd;AACA,SAAKD,MAAL,CAAYE,GAAZ,GAAkB,uBAAlB;AACH,C;;AACJ;;IAEKC,e,GACF,2BAAc;AAAA;;AACV,SAAKjB,CAAL,GAAS,CAAT;AACA,SAAKE,CAAL,GAAS,GAAT;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKF,KAAL,GAAaf,OAAOe,KAApB;AACH,C;;AAWJ;;AAED;AACA;AACA,SAASjB,mBAAT,CAA6BkB,CAA7B,EAAgCC,MAAhC,EAAwCe,OAAxC,EAAiD;AAC7CtB,qBAAiBuB,IAAjB,CAAsB,IAAIF,eAAJ,EAAtB;AACA,QAAIG,mBAAmBxB,iBAAiByB,MAAjB,GAA0B,CAAjD;AACAzB,qBAAiBwB,gBAAjB,EAAmClB,CAAnC,GAAuCA,CAAvC;AACAN,qBAAiBwB,gBAAjB,EAAmCjB,MAAnC,GAA4CA,MAA5C;AACA,WAAO,IAAIrB,OAAJ,CAAY,UAACwC,OAAD,EAAa;AAC5BC,mBAAW,YAAM;AACb3B,6BAAiB4B,MAAjB,CAAwBJ,gBAAxB;AACAK,oBAAQC,GAAR,CAAY,UAAZ;AACAJ,oBAAQ,UAAR;AACH,SAJD,EAIGJ,UAAU,IAJb;AAKH,KANM,CAAP;AAOH;;AAED,SAASS,oBAAT,GAAgC;AAC5B,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIhC,iBAAiByB,MAArC,EAA6CO,GAA7C,EAAkD;AAC9C,YAAIC,kBAAkBjC,iBAAiBgC,CAAjB,CAAtB;AACAvC,gBAAQyC,QAAR,CAAiBD,gBAAgB7B,CAAjC,EAAoC6B,gBAAgB3B,CAApD,EAAuD2B,gBAAgB5B,KAAvE,EAA8E4B,gBAAgB1B,MAA9F;AACH;AACJ;;AAED;AACA,SAAS4B,qBAAT,CAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,QAA3C,EAAqDC,SAArD,EAAgEC,IAAhE,EAAsEC,IAAtE,EAA4EC,QAA5E,EAAsFC,SAAtF,EAAiG;AAC7F,QAAKH,OAAOJ,IAAR,IAAkBA,OAAOI,OAAOE,QAApC,EAA+C;AAC3C3C,oBAAY,IAAZ;AACH,KAFD,MAEO,IAAKqC,OAAOI,IAAR,IAAkBA,OAAOJ,OAAOE,QAApC,EAA+C;AAClDvC,oBAAY,IAAZ;AACH,KAFM,MAEA,IAAK0C,OAAOJ,IAAR,IAAkBA,OAAOI,OAAOE,SAApC,EAAgD;AACnD5C,oBAAY,IAAZ;AACH,KAFM,MAEA,IAAKsC,OAAOI,IAAR,IAAkBA,OAAOJ,OAAOE,SAApC,EAAgD;AACnDxC,oBAAY,IAAZ;AACH;AACJ;;AAED,SAAS6C,qBAAT,CAA+BxC,CAA/B,EAAkCE,CAAlC,EAAqC;AACjC,WAAOuC,KAAKC,KAAL,CAAWxC,CAAX,EAAcF,CAAd,CAAP;AACH;;AAED,SAAS2C,uBAAT,CAAiCC,OAAjC,EAA0C;AACtC,WAAOA,UAAU,GAAV,GAAgBH,KAAKI,EAA5B;AACH;;AAED;;AAEA;AACA;AACA1D,SAAS2D,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtCtD,gBAAYuD,EAAEC,OAAd,IAAyB,IAAzB;AACH,CAFD;;AAIA;AACA7D,SAAS2D,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC,WAAOtD,YAAYuD,EAAEC,OAAd,CAAP;AACH,CAFD;;AAIA,IAAMC,UAAU,IAAIpD,MAAJ,EAAhB;;AAEA,SAASqD,IAAT,GAAgB;AACZ;AACA7D,YAAQ8D,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBjE,OAAOe,KAA/B,EAAsCf,OAAOiB,MAA7C;;AAEA;;AAEA;AACAV,aAAS,CAAT;AACAC,aAAS,CAAT;;AAEA;AACA;AACA;AACAuD,YAAQ3C,kBAAR,GAA6B,CAAC,GAA9B;;AAEA;AACA,QAAId,YAAY,EAAZ,CAAJ,EAAqB;AACjBC,kBAAU,CAAV;AACH;;AAED,QAAID,YAAY,EAAZ,CAAJ,EAAqB;AACjBC,kBAAU,CAAV;AACH;;AAED,QAAID,YAAY,EAAZ,CAAJ,EAAqB;AACjBE,kBAAU,CAAV;AACH;;AAED,QAAIF,YAAY,EAAZ,CAAJ,EAAqB;AACjBE,kBAAU,CAAV;AACH;;AAED,QAAID,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9B;AACAuD,gBAAQ1C,kBAAR,GAA6BiC,sBAAsB/C,MAAtB,EAA8BC,MAA9B,CAA7B;;AAEA;AACAuD,gBAAQ3C,kBAAR,GAA6BqC,wBAAwBM,QAAQ1C,kBAAhC,CAA7B;;AAEA;AACA0C,gBAAQzC,EAAR,GAAaiC,KAAKW,GAAL,CAASH,QAAQ1C,kBAAjB,IAAuC0C,QAAQ5C,KAA5D;AACA4C,gBAAQxC,EAAR,GAAagC,KAAKY,GAAL,CAASJ,QAAQ1C,kBAAjB,IAAuC0C,QAAQ5C,KAA5D;;AAEA;AACA4C,gBAAQvC,SAAR,IAAqBuC,QAAQzC,EAA7B;AACAyC,gBAAQtC,SAAR,IAAqBsC,QAAQxC,EAA7B;;AAEA;AACAwC,gBAAQzC,EAAR,GAAaiC,KAAKa,KAAL,CAAWL,QAAQvC,SAAnB,CAAb;AACAuC,gBAAQxC,EAAR,GAAagC,KAAKa,KAAL,CAAWL,QAAQtC,SAAnB,CAAb;;AAEA;AACAsC,gBAAQvC,SAAR,IAAqBuC,QAAQzC,EAA7B;AACAyC,gBAAQtC,SAAR,IAAqBsC,QAAQxC,EAA7B;;AAEA;AACAwC,gBAAQrC,aAAR,GAAwBqC,QAAQjD,CAAR,GAAYiD,QAAQzC,EAA5C;AACAyC,gBAAQpC,aAAR,GAAwBoC,QAAQ/C,CAAR,GAAY+C,QAAQxC,EAA5C;AACH;;AAED;AACA;AACA,QAAI,EAAEwC,QAAQrC,aAAR,IAAyB,CAAzB,IAA+BqC,QAAQrC,aAAR,GAAwBqC,QAAQnD,UAAjC,IAAgDZ,OAAOe,KAAvF,CAAJ,EAAmG;AAC/FgD,gBAAQjD,CAAR,GAAYiD,QAAQrC,aAApB;AACH,KAFD,MAEO,IAAIqC,QAAQrC,aAAR,IAAyB,CAA7B,EAAgC;AACnCqC,gBAAQjD,CAAR,GAAY,CAAZ;AACH,KAFM,MAEA,IAAKiD,QAAQrC,aAAR,GAAwBqC,QAAQnD,UAAjC,IAAgDZ,OAAOe,KAA3D,EAAkE;AACrEgD,gBAAQjD,CAAR,GAAYd,OAAOe,KAAP,GAAegD,QAAQnD,UAAnC;AACH;;AAED,QAAI,EAAEmD,QAAQpC,aAAR,IAAyB,CAAzB,IAA+BoC,QAAQpC,aAAR,GAAwBoC,QAAQnD,UAAjC,IAAgDZ,OAAOiB,MAAvF,CAAJ,EAAoG;AAChG8C,gBAAQ/C,CAAR,GAAY+C,QAAQpC,aAApB;AACH,KAFD,MAEO,IAAIoC,QAAQpC,aAAR,IAAyB,CAA7B,EAAgC;AACnCoC,gBAAQ/C,CAAR,GAAY,CAAZ;AACH,KAFM,MAEA,IAAK+C,QAAQpC,aAAR,GAAwBoC,QAAQnD,UAAjC,IAAgDZ,OAAOiB,MAA3D,EAAmE;AACtE8C,gBAAQ/C,CAAR,GAAYhB,OAAOiB,MAAP,GAAgB8C,QAAQnD,UAApC;AACH;;AAED;;;AAIA;;AAEA;AACA;AACAmD,YAAQ7C,EAAR,GAAa6C,QAAQlD,gBAAR,IAA4B0C,KAAKc,KAAL,CAAWN,QAAQ3C,kBAAR,GAA6B,EAAxC,IAA8C,CAA1E,CAAb;;AAEAjB,YAAQmE,SAAR,CAAkBP,QAAQnC,MAA1B,EAAkCmC,QAAQ7C,EAA1C,EAA8C,CAA9C,EAAiD6C,QAAQlD,gBAAzD,EAA2EkD,QAAQlD,gBAAnF,EAAqGkD,QAAQjD,CAA7G,EAAgHiD,QAAQ/C,CAAxH,EAA2H+C,QAAQnD,UAAnI,EAA+ImD,QAAQnD,UAAvJ;;AAEA6B;;AAEA;AACA8B,WAAOC,qBAAP,CAA6BR,IAA7B;AACH;;AAEDjE;;AAEA;AACAwE,OAAOC,qBAAP,CAA6BR,IAA7B","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById('game');\r\nconst context = canvas.getContext('2d');\r\ncontext.fillStyle = 'white';\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\n\r\n//Arrays\r\n\r\nlet horizontalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.sideLength = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.sideLength / 2;\r\n        this.y = canvas.height / 2 - this.sideLength / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie's sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement('img');\r\n        this.sprite.src = '../images/blockie.png';\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 100;\r\n        this.height = 32;\r\n        this.width = canvas.width;\r\n    }\r\n}\r\n\r\n//Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods.\r\nasync function levelOne() {\r\n    Promise.all([\r\n        fireHorizontalLaser(100, 10, 10),\r\n        fireHorizontalLaser(200, 20, 20)\r\n    ]);\r\n};\r\n\r\n//Creates an instance of a laser and adds it to an array so that it can be drawn and used in collision checking more easily.\r\n//When the timer ends, the instance is deleted.\r\nfunction fireHorizontalLaser(y, height, seconds) {\r\n    horizontalLasers.push(new horizontalLaser());\r\n    let newInstanceIndex = horizontalLasers.length - 1;\r\n    horizontalLasers[newInstanceIndex].y = y;\r\n    horizontalLasers[newInstanceIndex].height = height;\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            horizontalLasers.splice(newInstanceIndex);\r\n            console.log('resolved');\r\n            resolve('resolved');\r\n        }, seconds * 1000);\r\n    });\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    }\r\n}\r\n\r\n//Determines if two objects are \"colliding\".\r\nfunction checkSpritesColliding(xOne, yOne, widthOne, heightOne, xTwo, yTwo, widthTwo, heightTwo) {\r\n    if ((xTwo < xOne) && (xOne < xTwo + widthTwo)) {\r\n        colliding = true;\r\n    } else if ((xOne < xTwo) && (xTwo < xOne + widthOne)) {\r\n        colliding = true;\r\n    } else if ((yTwo < yOne) && (yOne < yTwo + heightTwo)) {\r\n        colliding = true;\r\n    } else if ((yOne < yTwo) && (yTwo < yOne + heightOne)) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener('keydown', e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener('keyup', e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nconst blockie = new Player();\r\n\r\nfunction loop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    };\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.sideLength) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.sideLength) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.sideLength;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.sideLength) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.sideLength) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.sideLength;\r\n    };\r\n\r\n    //Blockie's Interactions\r\n\r\n\r\n\r\n    //Drawing\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.sideLength, blockie.sideLength);\r\n\r\n    drawHorizontalLasers();\r\n\r\n    //Recalls the loop for the next frame.\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\nlevelOne();\r\n\r\n//Starts the game.\r\nwindow.requestAnimationFrame(loop);"]}