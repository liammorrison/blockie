{"version":3,"sources":["../src/blockie.js"],"names":["canvas","document","getElementById","context","getContext","KeysPressed","blockieSpeed","Player","x","y","dx","dy","sideLength","blockie","calculateAngleRadians","Math","atan2","loop","clearRect","width","height","addEventListener","e","key","xInput","yInput","angleBlockieMoving","cos","sin","fillStyle","fillRect","window","requestAnimationFrame"],"mappings":";;;;AAAA,IAAMA,SAASC,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMC,UAAUH,OAAOI,UAAP,CAAkB,IAAlB,CAAhB;;AAEA,IAAIC,cAAc,EAAlB;AACA,IAAIC,eAAe,CAAnB;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKC,CAAL,GAAS,EAAT;AACA,SAAKC,CAAL,GAAS,EAAT;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH,C;;AACJ;;AAED,IAAMC,UAAU,IAAIN,MAAJ,EAAhB;;AAEA,SAASO,qBAAT,CAA+BN,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,WAAOM,KAAKC,KAAL,CAAWP,CAAX,EAAcD,CAAd,CAAP;AACH;;AAED,SAASS,IAAT,GAAgB;AACZ;AACAd,YAAQe,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBlB,OAAOmB,KAA/B,EAAsCnB,OAAOoB,MAA7C;;AAEA;AACAnB,aAASoB,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtChB,oBAAYiB,EAAEC,GAAd,IAAqB,IAArB;AACH,KAFD;;AAIA;AACAtB,aAASoB,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC,eAAOhB,YAAYiB,EAAEC,GAAd,CAAP;AACH,KAFD;;AAIA;AACAV,YAAQH,EAAR,GAAa,CAAb;AACAG,YAAQF,EAAR,GAAa,CAAb;;AAEA;AACA,QAAIa,SAAS,CAAb;AACA,QAAIC,SAAS,CAAb;;AAEA;AACA,QAAIpB,YAAY,GAAZ,CAAJ,EAAsB;AAClBmB,kBAAU,CAAV;AACH;;AAED,QAAInB,YAAY,GAAZ,CAAJ,EAAsB;AAClBmB,kBAAU,CAAV;AACH;;AAED,QAAInB,YAAY,GAAZ,CAAJ,EAAsB;AAClBoB,kBAAU,CAAV;AACH;;AAED,QAAIpB,YAAY,GAAZ,CAAJ,EAAsB;AAClBoB,kBAAU,CAAV;AACH;;AAED;AACA,QAAIC,qBAAqBZ,sBAAsBU,MAAtB,EAA8BC,MAA9B,CAAzB;;AAEA;AACA;AACA,QAAID,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9BZ,gBAAQH,EAAR,GAAaK,KAAKY,GAAL,CAASD,kBAAT,IAA+BpB,YAA5C;AACAO,gBAAQF,EAAR,GAAaI,KAAKa,GAAL,CAASF,kBAAT,IAA+BpB,YAA5C;AACH;;AAED;AACAO,YAAQL,CAAR,IAAaK,QAAQH,EAArB;AACAG,YAAQJ,CAAR,IAAaI,QAAQF,EAArB;;AAEA;AACAR,YAAQ0B,SAAR,GAAoB,KAApB;AACA1B,YAAQ2B,QAAR,CAAiBjB,QAAQL,CAAzB,EAA4BK,QAAQJ,CAApC,EAAuCI,QAAQD,UAA/C,EAA2DC,QAAQD,UAAnE;;AAEA;AACAmB,WAAOC,qBAAP,CAA6Bf,IAA7B;AACH;;AAED;AACAc,OAAOC,qBAAP,CAA6Bf,IAA7B","file":"blockie.js","sourcesContent":["const canvas = document.getElementById('game');\r\nconst context = canvas.getContext('2d');\r\n\r\nlet KeysPressed = {};\r\nlet blockieSpeed = 2;\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.x = 64;\r\n        this.y = 64;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.sideLength = 16;\r\n    };\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n}\r\n\r\nfunction loop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Adds all currently pressed keys as a key with a pair of true in the KeysPressed object.\r\n    document.addEventListener('keydown', e => {\r\n        KeysPressed[e.key] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener('keyup', e => {\r\n        delete KeysPressed[e.key];\r\n    });\r\n\r\n    //Prevents perpetual motion.\r\n    blockie.dx = 0;\r\n    blockie.dy = 0;\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    let xInput = 0;\r\n    let yInput = 0;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed['d']) {\r\n        xInput += 1;\r\n    }\r\n\r\n    if (KeysPressed['a']) {\r\n        xInput -= 1;\r\n    }\r\n\r\n    if (KeysPressed['s']) {\r\n        yInput += 1;\r\n    }\r\n\r\n    if (KeysPressed['w']) {\r\n        yInput -= 1;\r\n    }\r\n\r\n    //Finds the angle that Blockie is moving based on the inputs.\r\n    let angleBlockieMoving = calculateAngleRadians(xInput, yInput);\r\n\r\n    //Moves Blockie in the direction of the input, and the trigonometry prevents faster diagonal movement by making \r\n    //the desired speed the hypotenuse and finding the x and y components from that.\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        blockie.dx = Math.cos(angleBlockieMoving) * blockieSpeed;\r\n        blockie.dy = Math.sin(angleBlockieMoving) * blockieSpeed;\r\n    }\r\n\r\n    //Updates Blockie's location by adding directional changes to his current location.\r\n    blockie.x += blockie.dx;\r\n    blockie.y += blockie.dy;\r\n\r\n    //Draws Blockie.\r\n    context.fillStyle = 'red';\r\n    context.fillRect(blockie.x, blockie.y, blockie.sideLength, blockie.sideLength);\r\n\r\n    //Recalls the loop for the next frame.\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\n//Starts the game.\r\nwindow.requestAnimationFrame(loop);"]}