{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","levelOne","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","horizontalLasers","Player","spriteSideLength","x","y","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","horizontalLaser","seconds","instance","push","instanceIndex","indexOf","resolve","setTimeout","splice","drawHorizontalLasers","i","length","currentInstance","fillRect","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","blockieX","blockieY","restartLevel","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","loop","clearRect","cos","sin","floor","round","drawImage","window","requestAnimationFrame"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById('game');\r\nconst context = canvas.getContext('2d');\r\ncontext.fillStyle = 'white';\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\n\r\n//Arrays\r\n\r\nlet horizontalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie's sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement('img');\r\n        this.sprite.src = '../images/blockie.png';\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 100;\r\n        this.width = canvas.width;\r\n        this.height = 32;\r\n    }\r\n}\r\n\r\n//Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n    await Promise.all([\r\n        fireHorizontalLaser(300, 16, 4),\r\n        fireHorizontalLaser(100, 16, 3)\r\n    ]);\r\n};\r\n\r\n//Creates an instance of a laser and adds it to an array so that it can be drawn and used in collision checking more easily.\r\n//When the timer ends, the instance is deleted.\r\nfunction fireHorizontalLaser(y, height, seconds) {\r\n    //Creates an instance of an object, adds it to the end of its object's array, and assigns its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    let instanceIndex = horizontalLasers.indexOf(instance);\r\n    horizontalLasers[instanceIndex].y = y;\r\n    horizontalLasers[instanceIndex].height = height;\r\n\r\n    //Creates a timer that resolves promises in the levelController and deletes the instance from its array (so that it isn't drawn\r\n    //or collided with anymore).\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            resolve('resolved');\r\n        }, seconds * 1000);\r\n    });\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    }\r\n}\r\n\r\n//Determines if two objects are \"colliding\".\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width)) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height)) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n}\r\n\r\nfunction restartLevel() {\r\n    levelOne();\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener('keydown', e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener('keyup', e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nconst blockie = new Player();\r\n\r\nfunction loop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    };\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.width;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.height;\r\n    };\r\n\r\n    //Blockie's Interactions\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n        if (colliding) {\r\n            restartLevel();\r\n            break;\r\n        }\r\n    }\r\n\r\n    //Drawing\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n\r\n    drawHorizontalLasers();\r\n\r\n    //Recalls the loop for the next frame.\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\nlevelOne();\r\n\r\n//Starts the game.\r\nwindow.requestAnimationFrame(loop);"]}