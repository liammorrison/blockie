{"version":3,"sources":["../src/blockie.js"],"names":["canvas","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","Player","sideLength","spriteSideLength","x","width","y","height","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","blockie","checkSpritesColliding","xOne","yOne","widthOne","heightOne","xTwo","yTwo","widthTwo","heightTwo","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","loop","clearRect","cos","sin","floor","round","drawImage","window","requestAnimationFrame"],"mappings":"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","file":"blockie.js","sourcesContent":["const canvas = document.getElementById('game');\r\nconst context = canvas.getContext('2d');\r\ncontext.fillStyle = 'white';\r\n\r\n//Variables\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.sideLength = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.sideLength / 2;\r\n        this.y = canvas.height / 2 - this.sideLength / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie's sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement('img');\r\n        this.sprite.src = '../images/blockie.png';\r\n    };\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\n//Determines if two objects are \"colliding\".\r\nfunction checkSpritesColliding(xOne, yOne, widthOne, heightOne, xTwo, yTwo, widthTwo, heightTwo) {\r\n    if ((xTwo < xOne) && (xOne < xTwo + widthTwo)) {\r\n        colliding = true;\r\n    } else if ((xOne < xTwo) && (xTwo < xOne + widthOne)) {\r\n        colliding = true;\r\n    } else if ((yTwo < yOne) && (yOne < yTwo + heightTwo)) {\r\n        colliding = true;\r\n    } else if ((yOne < yTwo) && (yTwo < yOne + heightOne)) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener('keydown', e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener('keyup', e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nfunction loop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    };\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.sideLength) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.sideLength) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.sideLength;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.sideLength) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.sideLength) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.sideLength;\r\n    };\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.sideLength, blockie.sideLength);\r\n\r\n    //Recalls the loop for the next frame.\r\n    window.requestAnimationFrame(loop);\r\n};\r\n\r\n//Starts the game.\r\nwindow.requestAnimationFrame(loop);"]}