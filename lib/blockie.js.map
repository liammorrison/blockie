{"version":3,"sources":["../src/blockie.js"],"names":["error","console","log","currentLevel","levelOne","levelTwo","levelThree","levelFour","levelFive","levelSix","levelSeven","levelEight","levelNine","levelTen","levelEleven","levelTwelve","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","destroyCountdownTimer","currentLevelPoints","gameState","blockie","state","sx","displayMessage","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","updateLevelPoints","calculateTotalPoints","Promise","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","increaseLevel","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","cancelAwaitChain","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","createPassivePoint","ActivePoint","activePoints","createActivePoint","speed","initialWaitingSeconds","fireMovingHorizontalLaser","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","width","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","fireBomb","loopFireBombs","Bomb","bombs","Wall","walls","createWall","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","drawImage","canvas","getContext","lineWidth","totalPoints","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","collidingInstances","levelPoints","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","oneEigth","oneFourth","threeEigths","oneHalf","fiveEigths","threeFourths","sevenEigths","fullScreen","pointOne","pointTwo","pointThree","pointFour","pointFive","pointSix","pointSeven","pointEight","blockieAdjustment","initializeLevel","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","moveBlockie","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","createCountdownTimer","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xTestingDistance","yTestingDistance","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":";;AA0QA;;uEACA;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOA,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Q;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOJ,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeE,Q;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOL,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,U;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAON,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,S;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOP,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,S;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOR,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeM,Q;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOT,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeO,U;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOV,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeQ,U;;;;;;wEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOX,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeS,S;;;;;;yEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOZ,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeU,Q;;;;;;yEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOb,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeW,W;;;;;;yEAQf;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOd,KAAP,EAAc;AACZC,oCAAQC,GAAR,YAAqBC,YAArB;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeY,W;;;;;AAmBf;;yEACA,mBAA4BC,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI;AACA,6BAASC,CAAT,GAAa,CAAb,EAAgBA,IAAIC,gBAAgBC,MAApC,EAA4CF,GAA5C,EAAiD;AAC7CG,yCAAaF,gBAAgBD,CAAhB,CAAb;AACH;;AAEDC,wCAAgBG,MAAhB,CAAuB,CAAvB;;AAEA;AACA,6BAASJ,EAAT,GAAa,CAAb,EAAgBA,KAAIK,iBAAiBH,MAArC,EAA6CF,IAA7C,EAAkD;AAC9CM,0CAAcD,iBAAiBL,EAAjB,CAAd;AACH;;AAEDK,yCAAiBD,MAAjB,CAAwB,CAAxB;;AAEAG;AACA,6BAASP,GAAT,GAAa,CAAb,EAAgBA,MAAIQ,WAAWN,MAA/B,EAAuCF,KAAvC,EAA4C;AACxCS,4CAAgBD,WAAWR,GAAX,CAAhB;AACH;;AAEDU;;AAEA;AACAC,6CAAqB,CAArB;;AAEA;;AAzBJ,8BA0BQZ,WAAW,MA1BnB;AAAA;AAAA;AAAA;;AA2BQa,oCAAY,6BAAZ;;AAEA;AACAC,gCAAQC,KAAR,GAAgB,aAAhB;AACAD,gCAAQE,EAAR,GAAa,CAAb;;AA/BR;AAAA,+BAiCcC,eAAe,mCAAf,CAjCd;;AAAA;AAAA;AAAA;;AAAA;AAAA,8BAkCejB,WAAW,YAlC1B;AAAA;AAAA;AAAA;;AAmCQc,gCAAQC,KAAR,GAAgB,SAAhB;AACAG;AApCR;AAAA;;AAAA;AAAA,8BAqCelB,WAAW,gBArC1B;AAAA;AAAA;AAAA;;AAsCQa,oCAAY,iBAAZ;AAtCR;AAAA,+BAuCcM,aAAaC,2BAAb,EAA0C,IAA1C,CAvCd;;AAAA;AAAA;AAAA,+BAwCcH,eAAe,8BAAf,CAxCd;;AAAA;AAyCK;;AAzCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,Y;;;;;;yEA4Cf;AAAA;AAAA;AAAA;AAAA;AACIR,oCAAY,gBAAZ;;AAEAC,gCAAQQ,kBAAR,GAA6B,CAAC,GAA9B;;AAGA;AACAC,0CAAkBpC,YAAlB;AACAyB,6CAAqB,CAArB;AACAY;;AAEArC;;AAEA;AAbJ;AAAA,+BAcU,IAAIsC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIC,mBAAmB,IAAIC,QAAJ,EAAvB;AACAC,sCAAUC,IAAV,CAAeH,gBAAf;;AAEA,qCAASI,uBAAT,GAAmC;AAC/BJ,iDAAiBK,CAAjB,IAAsBC,KAAKC,GAAL,CAAS,CAAT,EAAarB,QAAQmB,CAAR,GAAYL,iBAAiBK,CAA7B,GAAiCL,iBAAiBQ,MAA/D,CAAtB;;AAEA,oCAAIR,iBAAiBK,CAAjB,GAAqBL,iBAAiBQ,MAAtC,KAAiDtB,QAAQmB,CAA7D,EAAgE;AAC5D;AACAI,2CAAOC,qBAAP,CAA6BN,uBAA7B;AACH,iCAHD,MAGO;AACHN,4CAAQ,UAAR;AACH;AACJ;;AAEDW,mCAAOC,qBAAP,CAA6BN,uBAA7B;AACH,yBAhBK,CAdV;;AAAA;AAAA;AAAA,+BAgCUf,eAAe,0BAAf,CAhCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAesB,a;;;;;AAiIf;;yEACA,mBAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEU,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIc,qBAAqBC,WAAW,YAAM;AACtC;AACAZ,0CAAUzB,MAAV,CAAiB,CAAjB;;AAEA;AACAsC,yCAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDL,OAAxD;AACA3B,4CAAY,mBAAZ;AACAa,wCAAQ,UAAR;AACH,6BARwB,EAQtB,IARsB,CAAzB;AASH,yBAVK,CAFV;;AAAA;AAAA;AAAA,+BAciB,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA,qCAASmB,aAAT,GAAyB;AACrB,oCAAIC,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAApB,EAAkC;AAC9B;AACA,2CAAOA,SAAS,EAAT,CAAP;AACA,2CAAOA,SAAS,EAAT,CAAP;;AAEAJ,6CAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwD,EAAxD;;AAEAhC,gDAAY,SAAZ;AACAC,4CAAQC,KAAR,GAAgB,SAAhB;;AAEAG;;AAEAQ,4CAAQ,UAAR;AACH,iCAbD,MAaO;AACH;AACAW,2CAAOC,qBAAP,CAA6BQ,aAA7B;AACH;AACJ;;AAEDT,mCAAOC,qBAAP,CAA6BQ,aAA7B;AACH,yBAvBY,CAdjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe7B,c;;;;;AAmHf;AACA;;yEACA,mBAAkC+B,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACIC,sCAFR,GAEyB,CAFzB;AAAA;AAAA,+BAIU,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAqB,8CAAkBE,eAAlB,GAAoCxB,OAApC;AACAsB,8CAAkBG,cAAlB,GAAmCxB,MAAnC;;AAEAqB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzCM,kDAAkBK,OAAlB,GAA4B,KAA5B;;AAEA3B,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBuB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAJV;;AAAA;AAAA,6BAiBQK,gBAjBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAmBU,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAqB,8CAAkBE,eAAlB,GAAoCxB,OAApC;AACAsB,8CAAkBG,cAAlB,GAAmCxB,MAAnC;;AAEAqB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzCM,kDAAkBK,OAAlB,GAA4B,IAA5B;;AAEA3B,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBuB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAnBV;;AAAA;AAAA,6BAgCQK,gBAhCR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkCU,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAqB,8CAAkBE,eAAlB,GAAoCxB,OAApC;AACAsB,8CAAkBG,cAAlB,GAAmCxB,MAAnC;;AAEAqB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzCM,kDAAkBK,OAAlB,GAA4B,KAA5B;;AAEA3B,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBuB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAlCV;;AAAA;AAAA,6BA+CQK,gBA/CR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkDiB,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAqB,8CAAkBE,eAAlB,GAAoCxB,OAApC;AACAsB,8CAAkBG,cAAlB,GAAmCxB,MAAnC;;AAEAqB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzC;AACAM,kDAAkBjC,KAAlB,GAA0B,QAA1B;AACAiC,kDAAkBK,OAAlB,GAA4B,IAA5B;AACA3B,wCAAQ,UAAR;AACH,6BAL2B,EAKzBuB,iBAAiB,IAAjB,GAAwB,IALC,CAA5B;AAMH,yBAXY,CAlDjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeM,kB;;;;;AAgEf;;yEACA,mBAAkCC,CAAlC,EAAqCvB,CAArC,EAAwCwB,cAAxC,EAAwDC,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQH,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACIM,gCARR,GAQmB,IAAIC,YAAJ,CAAiBL,CAAjB,EAAoBvB,CAApB,EAAuByB,aAAvB,CARnB;;AASII,sCAAc/B,IAAd,CAAmB6B,QAAnB;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQN,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAiC,qCAASV,eAAT,GAA2BxB,OAA3B;AACAkC,qCAAST,cAAT,GAA0BxB,MAA1B;;AAEA;AACA;AACAiC,qCAASG,sBAAT,GAAkCL,aAAlC;AACA,gCAAIM,iCAAiCC,YAAY,YAAM;AACnDL,yCAASG,sBAAT,IAAmC,KAAnC;AACH,6BAFoC,EAElC,CAFkC,CAArC;AAGAG,+CAAmBF,8BAAnB;;AAEAJ,qCAASR,OAAT,GAAmBV,WAAW,YAAM;AAChCyB,sDAAsBH,8BAAtB;;AAEA;AACA,oCAAII,gBAAgBN,cAAcO,OAAd,CAAsBT,QAAtB,CAApB;AACAE,8CAAczD,MAAd,CAAqB+D,aAArB,EAAoC,CAApC;AACA1C,wCAAQ,UAAR;AACH,6BAPkB,EAOhBgC,gBAAgB,IAPA,CAAnB;AAQH,yBArBY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeY,kB;;;;;AA0Cf;;yEACA,mBAAiCd,CAAjC,EAAoCvB,CAApC,EAAuCwB,cAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUE,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQH,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACIM,gCARR,GAQmB,IAAIW,WAAJ,CAAgBf,CAAhB,EAAmBvB,CAAnB,CARnB;;AASIuC,qCAAazC,IAAb,CAAkB6B,QAAlB;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQN,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAiC,qCAASV,eAAT,GAA2BxB,OAA3B;AACAkC,qCAAST,cAAT,GAA0BxB,MAA1B;AACH,yBAJY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe8C,iB;;;;;AAyBf;;yEACA,mBAA8CxC,CAA9C,EAAiDG,MAAjD,EAAyDsC,KAAzD,EAAgEC,qBAAhE,EAAuFlB,cAAvF,EAAuGC,aAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBgB,qBAAlB,CADV;;AAAA;AAAA,4BAIYrB,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKcsB,0BAA0B3C,CAA1B,EAA6BG,MAA7B,EAAqCsC,KAArC,EAA4CjB,cAA5C,EAA4DC,aAA5D,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAemB,8B;;;;;AAYf;;yEACA,mBAAyC5C,CAAzC,EAA4CG,MAA5C,EAAoDsC,KAApD,EAA2DjB,cAA3D,EAA2EC,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQH,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACIM,gCARR,GAQmB,IAAIkB,qBAAJ,CAA0B7C,CAA1B,EAA6BG,MAA7B,EAAqCsC,KAArC,CARnB;;AASIK,+CAAuBhD,IAAvB,CAA4B6B,QAA5B;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQN,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAiC,qCAASV,eAAT,GAA2BxB,OAA3B;AACAkC,qCAAST,cAAT,GAA0BxB,MAA1B;;AAEAiC,qCAASR,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAI0B,gBAAgBW,uBAAuBV,OAAvB,CAA+BT,QAA/B,CAApB;AACAmB,uDAAuB1E,MAAvB,CAA8B+D,aAA9B,EAA6C,CAA7C;AACA1C,wCAAQ,UAAR;AACH,6BALkB,EAKhBgC,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAekB,yB;;;;;AAgCf;;yEACA,mBAA4CpB,CAA5C,EAA+CwB,KAA/C,EAAsDN,KAAtD,EAA6DC,qBAA7D,EAAoFlB,cAApF,EAAoGC,aAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBgB,qBAAlB,CADV;;AAAA;AAAA,4BAIYrB,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKc2B,wBAAwBzB,CAAxB,EAA2BwB,KAA3B,EAAkCN,KAAlC,EAAyCjB,cAAzC,EAAyDC,aAAzD,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAewB,4B;;;;;AAYf;;yEACA,mBAAuC1B,CAAvC,EAA0CwB,KAA1C,EAAiDN,KAAjD,EAAwDjB,cAAxD,EAAwEC,aAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQH,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACIM,gCARR,GAQmB,IAAIuB,mBAAJ,CAAwB3B,CAAxB,EAA2BwB,KAA3B,EAAkCN,KAAlC,CARnB;;AASIU,6CAAqBrD,IAArB,CAA0B6B,QAA1B;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQN,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAiC,qCAASV,eAAT,GAA2BxB,OAA3B;AACAkC,qCAAST,cAAT,GAA0BxB,MAA1B;;AAEAiC,qCAASR,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAI0B,gBAAgBgB,qBAAqBf,OAArB,CAA6BT,QAA7B,CAApB;AACAwB,qDAAqB/E,MAArB,CAA4B+D,aAA5B,EAA2C,CAA3C;AACA1C,wCAAQ,UAAR;AACH,6BALkB,EAKhBgC,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeuB,uB;;;;;AAgCf;;yEACA,mBAA6BzB,CAA7B,EAAgCvB,CAAhC,EAAmC+C,KAAnC,EAA0C5C,MAA1C,EAAkDuC,qBAAlD,EAAyElB,cAAzE,EAAyFC,aAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBgB,qBAAlB,CADV;;AAAA;AAAA,4BAIYrB,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKc+B,SAAS7B,CAAT,EAAYvB,CAAZ,EAAe+C,KAAf,EAAsB5C,MAAtB,EAA8BqB,cAA9B,EAA8CC,aAA9C,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe4B,a;;;;;AAYf;;yEACA,mBAAwB9B,CAAxB,EAA2BvB,CAA3B,EAA8B+C,KAA9B,EAAqC5C,MAArC,EAA6CqB,cAA7C,EAA6DC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQH,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACIM,gCARR,GAQmB,IAAI2B,IAAJ,CAAS/B,CAAT,EAAYvB,CAAZ,EAAe+C,KAAf,EAAsB5C,MAAtB,CARnB;;AASIoD,8BAAMzD,IAAN,CAAW6B,QAAX;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQN,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAiC,qCAASV,eAAT,GAA2BxB,OAA3B;AACAkC,qCAAST,cAAT,GAA0BxB,MAA1B;;AAEAiC,qCAASR,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAI0B,gBAAgBoB,MAAMnB,OAAN,CAAcT,QAAd,CAApB;AACA4B,sCAAMnF,MAAN,CAAa+D,aAAb,EAA4B,CAA5B;AACA1C,wCAAQ,UAAR;AACH,6BALkB,EAKhBgC,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe2B,Q;;;;;AAgCf;;yEACA,mBAA0B7B,CAA1B,EAA6BvB,CAA7B,EAAgC+C,KAAhC,EAAuC5C,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACIwB,gCAFR,GAEmB,IAAI6B,IAAJ,CAASjC,CAAT,EAAYvB,CAAZ,EAAe+C,KAAf,EAAsB5C,MAAtB,CAFnB;;AAGIsD,8BAAM3D,IAAN,CAAW6B,QAAX;;AAEA;AALJ;AAAA,+BAMiB,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAiC,qCAASV,eAAT,GAA2BxB,OAA3B;AACAkC,qCAAST,cAAT,GAA0BxB,MAA1B;AACH,yBAJY,CANjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAegE,U;;;;;AAwaf;;AAEA;;yEACA,mBAA4BC,KAA5B,EAAmCC,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,0CADR,GAC6B,GAD7B;AAEQC,kCAFR,GAEqB,CAFrB;AAGQC,mCAHR,GAGsBJ,MAAMK,YAAN,GAAqBH,kBAH3C;;AAKI;;AACII,gCANR,GAMmBjC,YAAY,YAAM;AAC7B8B,0CAAcD,kBAAd;AACH,yBAFc,EAEZD,kBAAkB,IAFN,CANnB;AAAA,2DAUW,IAAIpE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,qCAASwE,YAAT,GAAwB;AACpBC,wCAAQC,SAAR,CAAkBT,KAAlB,EAAyBG,UAAzB,EAAqC,CAArC,EAAwCD,kBAAxC,EAA4DA,kBAA5D,EAAgF,CAAhF,EAAmF,CAAnF,EAAsFA,kBAAtF,EAA0GA,kBAA1G;;AAEA;AACA,oCAAIC,aAAaC,WAAjB,EAA8B;AAC1BtE,4CAAQ,UAAR;AACH,iCAFD,MAEO;AACH;AACAW,2CAAOC,qBAAP,CAA6B6D,YAA7B;AACH;AACJ;;AAED9D,mCAAOC,qBAAP,CAA6B6D,YAA7B;AACH,yBAdM,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAehF,Y;;;;;AA2Bf;;AAEA;;;;;;;AAl3CA;;AAEA,IAAMmF,SAAS3D,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMwD,UAAUE,OAAOC,UAAP,CAAkB,IAAlB,CAAhB;AACAH,QAAQI,SAAR,GAAoB,CAApB;;AAEA;;AAEA,IAAI3F,YAAY,SAAhB;;AAEA,IAAI1B,eAAe,CAAnB;;AAEA,IAAIyB,qBAAqB,CAAzB;AACA,IAAI6F,cAAc,CAAlB;;AAEA,IAAIC,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;;AAEA,IAAIC,qBAAqB,KAAzB;;AAEA,IAAIC,0BAA0B,KAA9B;AACA,IAAIC,wBAAwB,KAA5B;AACA,IAAIC,2BAA2B,KAA/B;AACA,IAAIC,0BAA0B,KAA9B;AACA,IAAIC,sBAAsB,KAA1B;AACA,IAAIC,sBAAsB,KAA1B;AACA,IAAIC,kBAAkB,KAAtB;;AAEA,IAAIC,qBAAqB,KAAzB;AACA,IAAIC,iBAAiB,IAArB;AACA,IAAIC,eAAe,EAAnB;AACA,IAAIC,sBAAsB,GAA1B;AACA,IAAIC,wBAAwB,GAA5B;;AAEA;AACA;AACA,IAAIlE,mBAAmB,KAAvB;;AAEA;;AAEA;AACA;;AAEA,IAAImE,mBAAmB9E,SAAS+E,aAAT,CAAuB,KAAvB,CAAvB;AACAD,iBAAiBE,GAAjB,GAAuB,gCAAvB;;AAEA,IAAIC,uBAAuBjF,SAAS+E,aAAT,CAAuB,KAAvB,CAA3B;AACAE,qBAAqBD,GAArB,GAA2B,oCAA3B;;AAEA,IAAIE,8BAA8BlF,SAAS+E,aAAT,CAAuB,KAAvB,CAAlC;AACAG,4BAA4BF,GAA5B,GAAkC,2CAAlC;;AAEA,IAAIvG,8BAA8BuB,SAAS+E,aAAT,CAAuB,KAAvB,CAAlC;AACAtG,4BAA4BuG,GAA5B,GAAkC,2CAAlC;;AAEA,IAAIG,YAAY,CAAhB;;AAEA,IAAIC,YAAY,CAAhB;;AAEA;;AAEA,IAAIhF,WAAW,EAAf;;AAEA,IAAIiF,kBAAkB,EAAtB;AACA,IAAIlE,gBAAgB,EAApB;AACA,IAAIU,eAAe,EAAnB;AACA,IAAIO,yBAAyB,EAA7B;AACA,IAAIK,uBAAuB,EAA3B;AACA,IAAII,QAAQ,EAAZ;AACA,IAAIE,QAAQ,EAAZ;AACA,IAAI5D,YAAY,EAAhB;;AAEA;AACA,IAAIrB,aAAa,EAAjB;;AAEA,IAAIP,kBAAkB,EAAtB;AACA,IAAII,mBAAmB,EAAvB;;AAEA,IAAI2H,qBAAqB,EAAzB;;AAEA,IAAIC,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAAlB;;AAEA;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKnD,KAAL,GAAa,EAAb;AACA,SAAK5C,MAAL,GAAc,EAAd;;AAEA,SAAKoB,CAAL,GAAS8C,OAAOtB,KAAP,GAAe,CAAf,GAAmB,KAAKA,KAAL,GAAa,CAAzC;AACA,SAAK/C,CAAL,GAASqE,OAAOlE,MAAP,GAAgB,CAAhB,GAAoB,KAAKA,MAAL,GAAc,CAA3C;;AAEA,SAAKsC,KAAL,GAAa,CAAb;AACA,SAAKpD,kBAAL,GAA0B,CAA1B;AACA,SAAK8G,kBAAL,GAA0B,CAA1B;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,eAAL,GAAuB,KAAKjF,CAA5B;AACA,SAAKkF,eAAL,GAAuB,KAAKzG,CAA5B;;AAEA,SAAKlB,KAAL,GAAa,SAAb;;AAEA,SAAK4H,MAAL,GAAclB,gBAAd;AACA,SAAKzG,EAAL,GAAU,CAAV;;AAEA;AACA,SAAK4H,oBAAL,GAA4B,CAA5B;AACH,C;;AACJ;;IAEKC,c,GACF,0BAAc;AAAA;;AACV;AACA,SAAK1F,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;AAED;AACA;;IAEMS,Y,GACF,sBAAYL,CAAZ,EAAevB,CAAf,EAAkB6G,kBAAlB,EAAsC;AAAA;;AAClC,SAAKtF,CAAL,GAASA,CAAT;AACA,SAAKvB,CAAL,GAASA,CAAT;AACA,SAAK+C,KAAL,GAAa,EAAb;AACA,SAAK5C,MAAL,GAAc,EAAd;;AAEA;AACA,SAAKrB,KAAL,GAAa,SAAb;AACA,SAAKsC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKH,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,OAAL;;AAEA;AACA,SAAK0F,kBAAL,GAA0BA,kBAA1B;AACA,SAAK/E,sBAAL,GAA8B,CAA9B;AACH,C;;AACJ;;IAEKQ,W,GACF,qBAAYf,CAAZ,EAAevB,CAAf,EAAkB6G,kBAAlB,EAAsC;AAAA;;AAClC,SAAKtF,CAAL,GAASA,CAAT;AACA,SAAKvB,CAAL,GAASA,CAAT;AACA,SAAK+C,KAAL,GAAa,EAAb;AACA,SAAK5C,MAAL,GAAc,EAAd;;AAEA;AACA,SAAKrB,KAAL,GAAa,SAAb;AACA,SAAKsC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKH,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEK0B,qB,GACF,+BAAY7C,CAAZ,EAAeG,MAAf,EAAuBsC,KAAvB,EAA8B;AAAA;;AAC1B,SAAKlB,CAAL,GAAS,CAAT;AACA,SAAKvB,CAAL,GAASA,CAAT;AACA,SAAK+C,KAAL,GAAasB,OAAOtB,KAApB;AACA,SAAK5C,MAAL,GAAcA,MAAd;AACA,SAAKsC,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAK3D,KAAL,GAAa,SAAb;AACA,SAAKsC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEK+B,mB,GACF,6BAAY3B,CAAZ,EAAewB,KAAf,EAAsBN,KAAtB,EAA6B;AAAA;;AACzB,SAAKlB,CAAL,GAASA,CAAT;AACA,SAAKvB,CAAL,GAAS,CAAT;AACA,SAAK+C,KAAL,GAAaA,KAAb;AACA,SAAK5C,MAAL,GAAckE,OAAOlE,MAArB;AACA,SAAKsC,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAK3D,KAAL,GAAa,SAAb;AACA,SAAKsC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKmC,I,GACF,cAAY/B,CAAZ,EAAevB,CAAf,EAAkB+C,KAAlB,EAAyB5C,MAAzB,EAAiC;AAAA;;AAC7B,SAAKoB,CAAL,GAASA,CAAT;AACA,SAAKvB,CAAL,GAASA,CAAT;AACA,SAAK+C,KAAL,GAAaA,KAAb;AACA,SAAK5C,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKrB,KAAL,GAAa,SAAb;AACA,SAAKsC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKqC,I,GACF,cAAYjC,CAAZ,EAAevB,CAAf,EAAkB+C,KAAlB,EAAyB5C,MAAzB,EAAiC;AAAA;;AAC7B,SAAKoB,CAAL,GAASA,CAAT;AACA,SAAKvB,CAAL,GAASA,CAAT;AACA,SAAK+C,KAAL,GAAaA,KAAb;AACA,SAAK5C,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKe,cAAL;AACA,SAAKC,OAAL;AACH,C;;IAGCvB,Q,GACF,oBAAc;AAAA;;AACV,SAAK2B,CAAL,GAAS1C,QAAQ0C,CAAR,GAAY,CAArB;AACA,SAAKvB,CAAL,GAAS,CAAC,EAAV;AACA,SAAK+C,KAAL,GAAa,EAAb;AACA,SAAK5C,MAAL,GAAc,EAAd;AACH,C;;AACJ;;AAED,IAAItB,UAAU,IAAIqH,MAAJ,EAAd;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAIY,WAAW,IAAI,EAAnB;AACA,IAAIC,YAAY,IAAI,EAApB;AACA,IAAIC,cAAc,KAAK,EAAvB;AACA,IAAIC,UAAU5C,OAAOtB,KAAP,GAAe,CAA7B;AACA,IAAImE,aAAa,KAAK,EAAtB;AACA,IAAIC,eAAe,KAAK,EAAxB;AACA,IAAIC,cAAc,KAAK,EAAvB;AACA,IAAIC,aAAa,KAAK,EAAtB;;AAEA,IAAIC,WAAW,IAAI,EAAnB;AACA,IAAIC,WAAW,IAAI,EAAnB;AACA,IAAIC,aAAa,KAAK,EAAtB;AACA,IAAIC,YAAY,KAAK,EAArB;AACA,IAAIC,YAAY,KAAK,EAArB;AACA,IAAIC,WAAW,KAAK,EAApB;AACA,IAAIC,aAAa,KAAK,EAAtB;AACA,IAAIC,aAAa,KAAK,EAAtB;;AAEA,IAAIC,oBAAoB,CAACjJ,QAAQkE,KAAT,GAAiB,CAAzC,CASC;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAQA;;AAED;AACA,SAASgF,eAAT,CAAyBC,QAAzB,EAAmCC,QAAnC,EAA6C;AACzCrJ,gBAAY,SAAZ;;AAEAC,YAAQ0C,CAAR,GAAYyG,QAAZ;AACAnJ,YAAQmB,CAAR,GAAYiI,QAAZ;;AAEA9C,yBAAqB,KAArB;AACAC,qBAAiB,IAAjB;AACH,EA6CA;;AAmCA;;AAED,SAASnG,YAAT,GAAwB;AACpB,YAAQ/B,YAAR;AACI,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,CAAL;AACIC;AACA;AACJ,aAAK,EAAL;AACIC;AACA;AACJ,aAAK,EAAL;AACIC;AACA;AACJ,aAAK,EAAL;AACIC;AACA;AApCR,KAqCC;AACJ;;AAED;;AAEA;AACA,SAASoK,gBAAT,CAA0BC,WAA1B,EAAuC;AACnC;AACA,QAAIC,qBAAqBD,YAAYjK,MAArC;;AAEA,SAAK,IAAIF,IAAIoK,qBAAqB,CAAlC,EAAqCpK,KAAK,CAA1C,EAA6CA,GAA7C,EAAkD;AAC9C;AACA,YAAI2D,WAAWwG,YAAYnK,CAAZ,CAAf;AACA2D,iBAASV,eAAT;AACA9C,qBAAawD,SAASR,OAAtB;AACAgH,oBAAY/J,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAASS,eAAT,CAAyB0J,WAAzB,EAAsC;AAClC;AACA,QAAIC,qBAAqBD,YAAYjK,MAArC;;AAEA,SAAK,IAAIF,IAAIoK,qBAAqB,CAAlC,EAAqCpK,KAAK,CAA1C,EAA6CA,GAA7C,EAAkD;AAC9C;AACA,YAAI2D,WAAWwG,YAAYnK,CAAZ,CAAf;AACA2D,iBAAST,cAAT;AACA/C,qBAAawD,SAASR,OAAtB;AACAgH,oBAAY/J,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAASqK,iBAAT,CAA2BlH,OAA3B,EAAoC;AAChClD,oBAAgB6B,IAAhB,CAAqBqB,OAArB;AACH;;AAED;AACA,SAASmH,oBAAT,CAA8BnH,OAA9B,EAAuC;AACnC,QAAIoH,sBAAsBtK,gBAAgBmE,OAAhB,CAAwBjB,OAAxB,CAA1B;AACAlD,oBAAgBG,MAAhB,CAAuBmK,mBAAvB,EAA4C,CAA5C;AACH;;AAED;AACA,SAAStG,kBAAT,CAA4BuG,QAA5B,EAAsC;AAClCnK,qBAAiByB,IAAjB,CAAsB0I,QAAtB;AACH;;AAED;AACA,SAAStG,qBAAT,CAA+BsG,QAA/B,EAAyC;AACrClK,kBAAckK,QAAd;AACA,QAAIC,uBAAuBpK,iBAAiB+D,OAAjB,CAAyBoG,QAAzB,CAA3B;AACAnK,qBAAiBD,MAAjB,CAAwBqK,oBAAxB,EAA8C,CAA9C;AACH,EAyCA;;AAED;;AAEA,SAASC,cAAT,GAA0B;AACtB7J,YAAQC,KAAR,GAAgB,oBAAhB;AACAD,YAAQ4D,KAAR,GAAgB4C,YAAhB;AACAF,yBAAqB,IAArB;AACAC,qBAAiB,KAAjB;;AAEA,QAAIuD,kBAAkBlI,WAAW,YAAM;AACnC0E,6BAAqB,KAArB;AACAtG,gBAAQC,KAAR,GAAgB,SAAhB;AACAwJ,6BAAqBK,eAArB;AACH,KAJqB,EAInBrD,sBAAsB,IAJH,CAAtB;AAKA+C,sBAAkBM,eAAlB;;AAEA;AACA;AACA9J,YAAQ8H,oBAAR,GAA+BpB,qBAA/B;AACA,QAAIqD,+BAA+B5G,YAAY,YAAM;AACjDnD,gBAAQ8H,oBAAR,IAAgC,KAAhC;AACH,KAFkC,EAEhC,CAFgC,CAAnC;AAGA1E,uBAAmB2G,4BAAnB;;AAEA,QAAIC,sBAAsBpI,WAAW,YAAM;AACvC2E,yBAAiB,IAAjB;AACAlD,8BAAsB0G,4BAAtB;AACAN,6BAAqBO,mBAArB;AACH,KAJyB,EAIvBtD,wBAAwB,IAJD,CAA1B;AAKA8C,sBAAkBQ,mBAAlB;AACH;;AAED;AACA,SAASC,iBAAT,GAA6B;AACzBjK,YAAQC,KAAR,GAAgB,SAAhB;AACAqG,yBAAqB,KAArB;AACAC,qBAAiB,IAAjB;;AAEA;AACA,WAAOtE,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACH;;AAED;AACA,SAASiI,WAAT,CAAqBxH,CAArB,EAAwBvB,CAAxB,EAA2B;AACvBnB,YAAQ0C,CAAR,GAAYA,CAAZ;AACA1C,YAAQmB,CAAR,GAAYA,CAAZ;AACH;;AAED;;AAEA;AACA;AACA,SAAS0B,iBAAT,CAA2BF,cAA3B,EAA2C;AACvC;AACA,QAAIG,WAAW,IAAIiF,cAAJ,EAAf;AACAb,oBAAgBjG,IAAhB,CAAqB6B,QAArB;;AAEA,WAAO,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACAiC,iBAASV,eAAT,GAA2BxB,OAA3B;AACAkC,iBAAST,cAAT,GAA0BxB,MAA1B;;AAEAiC,iBAASR,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,gBAAI0B,gBAAgB4D,gBAAgB3D,OAAhB,CAAwBT,QAAxB,CAApB;AACAoE,4BAAgB3H,MAAhB,CAAuB+D,aAAvB,EAAsC,CAAtC;AACA1C,oBAAQ,UAAR;AACH,SALkB,EAKhB+B,iBAAiB,IALD,CAAnB;AAMH,KAXM,CAAP;AAYH,EAkEA,CA2CA,CA0BA,CAaA,CAiCA,CAaA,CAiCA,CAaA,CAiCA,CAcA;;AAED;;AAEA,SAASjD,gBAAT,GAA4B;AACxBC,iBAAa,CACTuH,eADS,EAETlE,aAFS,EAGTU,YAHS,EAITO,sBAJS,EAKTK,oBALS,EAMTI,KANS,EAOTE,KAPS,CAAb;AASH;;AAED,SAASuF,2BAAT,GAAuC;AACnCxK,iBAAa,CACTuH,eADS,EAETlE,aAFS,EAGTU,YAHS,EAITO,sBAJS,EAKTK,oBALS,EAMTI,KANS,CAAb;AAQH;;AAED;AACA,SAAS0F,0BAAT,GAAsC;AAClC,SAAK,IAAIjL,IAAI,CAAb,EAAgBA,IAAI8E,uBAAuB5E,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAI8E,uBAAuB9E,CAAvB,EAA0Bc,KAA1B,KAAoC,SAAxC,EAAmD;AAC/CgE,mCAAuB9E,CAAvB,EAA0BgC,CAA1B,IAA+B8C,uBAAuB9E,CAAvB,EAA0ByE,KAAzD;AACH;AACJ;AACJ;;AAED;AACA,SAASyG,wBAAT,GAAoC;AAChC,SAAK,IAAIlL,IAAI,CAAb,EAAgBA,IAAImF,qBAAqBjF,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAImF,qBAAqBnF,CAArB,EAAwBc,KAAxB,KAAkC,SAAtC,EAAiD;AAC7CqE,iCAAqBnF,CAArB,EAAwBuD,CAAxB,IAA6B4B,qBAAqBnF,CAArB,EAAwByE,KAArD;AACH;AACJ;AACJ;;AAED;;AAEA,SAAS0G,cAAT,GAA0B;AACtB;AACA,QAAI,CAAC/D,cAAD,IAAmBxG,cAAc,SAArC,EAAgD;AAC5CuF,gBAAQiF,SAAR,GAAoB,SAApB;AACAjF,gBAAQkF,QAAR,CAAiBxK,QAAQ0C,CAAzB,EAA4B1C,QAAQmB,CAAR,GAAY,CAAxC,EAA2CnB,QAAQkE,KAAR,IAAiBlE,QAAQ8H,oBAAR,GAA+BpB,qBAAhD,CAA3C,EAAmH,CAAnH;AACH;;AAED;AACA,QAAI1G,QAAQC,KAAR,KAAkB,SAAtB,EAAiC;AAC7BD,gBAAQ6H,MAAR,GAAiBlB,gBAAjB;AACA;AACA;AACA3G,gBAAQE,EAAR,GAAaF,QAAQkE,KAAR,IAAiB9C,KAAKqJ,KAAL,CAAWzK,QAAQQ,kBAAR,GAA6B,EAAxC,IAA8C,CAA/D,CAAb;AACH,KALD,MAKO,IAAIR,QAAQC,KAAR,KAAkB,oBAAtB,EAA4C;AAC/CD,gBAAQ6H,MAAR,GAAiBd,2BAAjB;AACA/G,gBAAQE,EAAR,GAAa,CAAb;AACH,KAHM,MAGA,IAAIF,QAAQC,KAAR,KAAkB,aAAtB,EAAqC;AACxCD,gBAAQ6H,MAAR,GAAiBf,oBAAjB;;AAEA,YAAI4D,+BAA+B9I,WAAW,YAAM;AAChDnC,0BAAckL,yBAAd;AACAlB,iCAAqBkB,yBAArB;AACAlB,iCAAqBiB,4BAArB;AACH,SAJkC,EAIhC,MAAM,IAJ0B,CAAnC;AAKAlB,0BAAkBkB,4BAAlB;;AAEA,YAAIC,4BAA4BxH,YAAY,YAAM;AAC9CnD,oBAAQE,EAAR,IAAcF,QAAQkE,KAAtB;AACH,SAF+B,EAE7B,MAAM,IAFuB,CAAhC;AAGAsF,0BAAkBmB,yBAAlB;AACH;AACJ;;AAED,SAASC,WAAT,GAAuB;AACnBtF,YAAQC,SAAR,CAAkBvF,QAAQ6H,MAA1B,EAAkC7H,QAAQE,EAA1C,EAA8C,CAA9C,EAAiDF,QAAQkE,KAAzD,EAAgElE,QAAQsB,MAAxE,EAAgFtB,QAAQ0C,CAAxF,EAA2F1C,QAAQmB,CAAnG,EAAsGnB,QAAQkE,KAA9G,EAAqHlE,QAAQsB,MAA7H;AACH;;AAED,SAASuJ,iBAAT,GAA6B;AACzB,SAAK,IAAI1L,IAAI,CAAb,EAAgBA,IAAI6D,cAAc3D,MAAlC,EAA0CF,GAA1C,EAA+C;AAC3C,YAAI2L,kBAAkB9H,cAAc7D,CAAd,CAAtB;;AAEA;AACAmG,gBAAQiF,SAAR,GAAoB,SAApB;AACAjF,gBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAAhB,GAAoB,CAAxD,EAA2D2J,gBAAgB5G,KAAhB,IAAyB4G,gBAAgB7H,sBAAhB,GAAyC6H,gBAAgB9C,kBAAlF,CAA3D,EAAkK,CAAlK;;AAEA;AACA,YAAI8C,gBAAgBvI,OAApB,EAA6B;AACzB;AACA,gBAAIuI,gBAAgB7K,KAAhB,IAAyB,SAA7B,EAAwC;AACpCqF,wBAAQyF,WAAR,GAAsB,SAAtB;AACAzF,wBAAQ0F,UAAR,CAAmBF,gBAAgBpI,CAAnC,EAAsCoI,gBAAgB3J,CAAtD,EAAyD2J,gBAAgB5G,KAAzE,EAAgF4G,gBAAgBxJ,MAAhG;AACH,aAHD,MAGO,IAAIwJ,gBAAgB7K,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CqF,wBAAQiF,SAAR,GAAoB,SAApB;AACAjF,wBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAApD,EAAuD2J,gBAAgB5G,KAAvE,EAA8E4G,gBAAgBxJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS2J,gBAAT,GAA4B;AACxB,SAAK,IAAI9L,IAAI,CAAb,EAAgBA,IAAIuE,aAAarE,MAAjC,EAAyCF,GAAzC,EAA8C;AAC1C,YAAI2L,kBAAkBpH,aAAavE,CAAb,CAAtB;;AAEA;AACA,YAAI2L,gBAAgBvI,OAApB,EAA6B;AACzB;AACA,gBAAIuI,gBAAgB7K,KAAhB,IAAyB,SAA7B,EAAwC;AACpCqF,wBAAQyF,WAAR,GAAsB,SAAtB;AACAzF,wBAAQ0F,UAAR,CAAmBF,gBAAgBpI,CAAnC,EAAsCoI,gBAAgB3J,CAAtD,EAAyD2J,gBAAgB5G,KAAzE,EAAgF4G,gBAAgBxJ,MAAhG;AACH,aAHD,MAGO,IAAIwJ,gBAAgB7K,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CqF,wBAAQiF,SAAR,GAAoB,SAApB;AACAjF,wBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAApD,EAAuD2J,gBAAgB5G,KAAvE,EAA8E4G,gBAAgBxJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS4J,0BAAT,GAAsC;AAClC,SAAK,IAAI/L,IAAI,CAAb,EAAgBA,IAAI8E,uBAAuB5E,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAI2L,kBAAkB7G,uBAAuB9E,CAAvB,CAAtB;AACA,YAAI2L,gBAAgBvI,OAApB,EAA6B;AACzB;AACA,gBAAIuI,gBAAgB7K,KAAhB,IAAyB,SAA7B,EAAwC;AACpCqF,wBAAQiF,SAAR,GAAoB,SAApB;;AAEA;AACA;AACAjF,wBAAQ6F,SAAR;AACA7F,wBAAQ8F,MAAR,CAAeN,gBAAgBpI,CAAhB,GAAoB,EAAnC,EAAuCoI,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAhB,GAAyBF,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAApF;AACA0B,wBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoB,EAAnC,EAAuCoI,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAhB,GAAyBF,KAAKoK,GAAL,CAAS,CAAT,EAAYpK,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAApF;AACA0B,wBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoB,EAAnC,EAAuCoI,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAhB,GAAyBF,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAApF;AACA0B,wBAAQmG,IAAR;;AAEA;AACAnG,wBAAQ6F,SAAR;AACA7F,wBAAQ8F,MAAR,CAAeN,gBAAgB5G,KAAhB,GAAwB,EAAvC,EAA2C4G,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAhB,GAAyBF,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAAxF;AACA0B,wBAAQiG,MAAR,CAAeT,gBAAgB5G,KAAhB,GAAwB,EAAvC,EAA2C4G,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAhB,GAAyBF,KAAKoK,GAAL,CAAS,CAAT,EAAYpK,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAxF;AACA0B,wBAAQiG,MAAR,CAAeT,gBAAgB5G,KAAhB,GAAwB,EAAvC,EAA2C4G,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAhB,GAAyBF,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAAxF;AACA0B,wBAAQmG,IAAR;AACH,aAjBD,MAiBO,IAAIX,gBAAgB7K,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CqF,wBAAQiF,SAAR,GAAoB,SAApB;AACAjF,wBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAApD,EAAuD2J,gBAAgB5G,KAAvE,EAA8E4G,gBAAgBxJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASoK,wBAAT,GAAoC;AAChC,SAAK,IAAIvM,IAAI,CAAb,EAAgBA,IAAImF,qBAAqBjF,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAI2L,kBAAkBxG,qBAAqBnF,CAArB,CAAtB;AACA,YAAI2L,gBAAgBvI,OAApB,EAA6B;AACzB;AACA,gBAAIuI,gBAAgB7K,KAAhB,IAAyB,SAA7B,EAAwC;AACpCqF,wBAAQiF,SAAR,GAAoB,SAApB;;AAEA;AACA;AACAjF,wBAAQ6F,SAAR;AACA7F,wBAAQ8F,MAAR,CAAeN,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB9C,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkH,gBAAgB3J,CAAhB,GAAoB,EAAxI;AACAmE,wBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB9C,KAAKoK,GAAL,CAAS,CAAT,EAAYpK,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAA3D,EAA0GkH,gBAAgB3J,CAAhB,GAAoB,EAA9H;AACAmE,wBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB9C,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkH,gBAAgB3J,CAAhB,GAAoB,EAAxI;AACAmE,wBAAQmG,IAAR;;AAEA;AACAnG,wBAAQ6F,SAAR;AACA7F,wBAAQ8F,MAAR,CAAeN,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB9C,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkH,gBAAgBxJ,MAAhB,GAAyB,EAA7I;AACAgE,wBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB9C,KAAKoK,GAAL,CAAS,CAAT,EAAYpK,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAA3D,EAA0GkH,gBAAgBxJ,MAAhB,GAAyB,EAAnI;AACAgE,wBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB9C,KAAKiK,GAAL,CAASjK,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKkK,IAAL,CAAUR,gBAAgBlH,KAA1B,CAAZ,CAAT,CAA3D,EAAoHkH,gBAAgBxJ,MAAhB,GAAyB,EAA7I;AACAgE,wBAAQmG,IAAR;AACH,aAjBD,MAiBO,IAAIX,gBAAgB7K,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CqF,wBAAQiF,SAAR,GAAoB,SAApB;AACAjF,wBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAApD,EAAuD2J,gBAAgB5G,KAAvE,EAA8E4G,gBAAgBxJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASqK,SAAT,GAAqB;AACjB,SAAK,IAAIxM,IAAI,CAAb,EAAgBA,IAAIuF,MAAMrF,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,YAAI2L,kBAAkBpG,MAAMvF,CAAN,CAAtB;AACA,YAAI2L,gBAAgBvI,OAApB,EAA6B;AACzB;AACA,gBAAIuI,gBAAgB7K,KAAhB,IAAyB,SAA7B,EAAwC;AACpCqF,wBAAQyF,WAAR,GAAsB,SAAtB;AACAzF,wBAAQ0F,UAAR,CAAmBF,gBAAgBpI,CAAnC,EAAsCoI,gBAAgB3J,CAAtD,EAAyD2J,gBAAgB5G,KAAzE,EAAgF4G,gBAAgBxJ,MAAhG;AACH,aAHD,MAGO,IAAIwJ,gBAAgB7K,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CqF,wBAAQiF,SAAR,GAAoB,SAApB;AACAjF,wBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAApD,EAAuD2J,gBAAgB5G,KAAvE,EAA8E4G,gBAAgBxJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASsK,SAAT,GAAqB;AACjB,SAAK,IAAIzM,IAAI,CAAb,EAAgBA,IAAIyF,MAAMvF,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,YAAI2L,kBAAkBlG,MAAMzF,CAAN,CAAtB;AACAmG,gBAAQiF,SAAR,GAAoB,SAApB;AACAjF,gBAAQkF,QAAR,CAAiBM,gBAAgBpI,CAAjC,EAAoCoI,gBAAgB3J,CAApD,EAAuD2J,gBAAgB5G,KAAvE,EAA8E4G,gBAAgBxJ,MAA9F;AACH;AACJ;;AAED,SAASuK,aAAT,GAAyB;AACrB,SAAK,IAAI1M,IAAI,CAAb,EAAgBA,IAAI6B,UAAU3B,MAA9B,EAAsCF,GAAtC,EAA2C;AACvC,YAAI2L,kBAAkB9J,UAAU7B,CAAV,CAAtB;;AAEAmG,gBAAQiF,SAAR,GAAoB,SAApB;;AAEAjF,gBAAQ6F,SAAR;AACA7F,gBAAQ8F,MAAR,CAAeN,gBAAgBpI,CAA/B,EAAkCoI,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAAtE;AACAgE,gBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAhB,GAAwB,CAA3D,EAA8D4G,gBAAgB3J,CAA9E;AACAmE,gBAAQiG,MAAR,CAAeT,gBAAgBpI,CAAhB,GAAoBoI,gBAAgB5G,KAAnD,EAA0D4G,gBAAgB3J,CAAhB,GAAoB2J,gBAAgBxJ,MAA9F;AACAgE,gBAAQmG,IAAR;AACH;AACJ;;AAED;;AAEA,SAASK,wBAAT,CAAkCC,UAAlC,EAA8C;AAC1C,SAAK,IAAI5M,IAAI,CAAb,EAAgBA,IAAI4M,WAAW1M,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC6M,gCAAwBhM,OAAxB,EAAiC+L,WAAW5M,CAAX,CAAjC;AACH;AACJ;;AAED,SAAS8M,4BAAT,CAAsCC,YAAtC,EAAoDC,YAApD,EAAkEJ,UAAlE,EAA8E;AAC1EjG,yBAAqB,KAArB;;AAEA,SAAK,IAAI3G,IAAI,CAAb,EAAgBA,IAAI4M,WAAW1M,MAA/B,EAAuCF,GAAvC,EAA4C;AACxCiN,oCAA4BpM,OAA5B,EAAqCkM,YAArC,EAAmDC,YAAnD,EAAiEJ,WAAW5M,CAAX,CAAjE;AACH;AACJ;;AAED;AACA,SAAS6M,uBAAT,CAAiCK,WAAjC,EAA8CC,WAA9C,EAA2D;AACvD,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAY5J,CAAZ,IAAiB2J,YAAY3J,CAA9B,IAAqC2J,YAAY3J,CAAZ,IAAiB4J,YAAY5J,CAAZ,GAAgB4J,YAAYpI,KAAlF,IAA6FoI,YAAYrM,KAAZ,KAAsB,QAAvH,EAAkI;AAC9HsM,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKF,YAAY3J,CAAZ,IAAiB4J,YAAY5J,CAA9B,IAAqC4J,YAAY5J,CAAZ,IAAiB2J,YAAY3J,CAAZ,GAAgB2J,YAAYnI,KAAlF,IAA6FoI,YAAYrM,KAAZ,KAAsB,QAAvH,EAAkI;AACrIsM,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAYnL,CAAZ,IAAiBkL,YAAYlL,CAA9B,IAAqCkL,YAAYlL,CAAZ,IAAiBmL,YAAYnL,CAAZ,GAAgBmL,YAAYhL,MAAlF,IAA8FgL,YAAYrM,KAAZ,KAAsB,QAAxH,EAAmI;AAC/HuM,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKH,YAAYlL,CAAZ,IAAiBmL,YAAYnL,CAA9B,IAAqCmL,YAAYnL,CAAZ,IAAiBkL,YAAYlL,CAAZ,GAAgBkL,YAAY/K,MAAlF,IAA8FgL,YAAYrM,KAAZ,KAAsB,QAAxH,EAAmI;AACtIuM,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1BrF,2BAAmBlG,IAAnB,CAAwBqL,WAAxB;AACH;AACJ;;AAED;AACA;AACA,SAASF,2BAAT,CAAqCC,WAArC,EAAkDH,YAAlD,EAAgEC,YAAhE,EAA8EG,WAA9E,EAA2F;AACvF,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAY5J,CAAZ,IAAiBwJ,YAAlB,IAAoCA,gBAAgBI,YAAY5J,CAAZ,GAAgB4J,YAAYpI,KAApF,EAA4F;AACxFqI,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKL,gBAAgBI,YAAY5J,CAA7B,IAAoC4J,YAAY5J,CAAZ,IAAiBwJ,eAAeG,YAAYnI,KAApF,EAA4F;AAC/FqI,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAYnL,CAAZ,IAAiBgL,YAAlB,IAAoCA,gBAAgBG,YAAYnL,CAAZ,GAAgBmL,YAAYhL,MAApF,EAA6F;AACzFkL,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKL,gBAAgBG,YAAYnL,CAA7B,IAAoCmL,YAAYnL,CAAZ,IAAiBgL,eAAeE,YAAY/K,MAApF,EAA6F;AAChGkL,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1B1G,6BAAqB,IAArB;AACH;AACJ;;AAED;;AAEA,SAAS2G,mBAAT,GAA+B;AAC3B;AACA;AACA5K,aAAS6K,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtC;AACA;AACA,YAAIvG,mBAAJ,EAAyB;AACrB,mBAAOlE,SAAS,EAAT,CAAP;AACH;AACD,YAAImE,mBAAJ,EAAyB;AACrB,mBAAOnE,SAAS,EAAT,CAAP;AACH;AACD,YAAI8D,uBAAJ,EAA6B;AACzB,mBAAO9D,SAAS,EAAT,CAAP;AACH;AACD,YAAI+D,qBAAJ,EAA2B;AACvB,mBAAO/D,SAAS,EAAT,CAAP;AACH;AACD,YAAIgE,wBAAJ,EAA8B;AAC1B,mBAAOhE,SAAS,EAAT,CAAP;AACH;AACD,YAAIiE,uBAAJ,EAA6B;AACzB,mBAAOjE,SAAS,EAAT,CAAP;AACH;AACD,YAAIoE,eAAJ,EAAqB;AACjB,mBAAOpE,SAAS,EAAT,CAAP;AACH;;AAED,YAAI0K,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AAClB,gBAAI,CAACzG,mBAAL,EAA0B;AACtBlE,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACAzG,sCAAsB,IAAtB;AACH;AACJ,SALD,MAKO,IAAIwG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAACxG,mBAAL,EAA0B;AACtBnE,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACAxG,sCAAsB,IAAtB;AACH;AACJ,SALM,MAKA,IAAIuG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC7G,uBAAL,EAA8B;AAC1B9D,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACA7G,0CAA0B,IAA1B;AACH;AACJ,SALM,MAKA,IAAI4G,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC5G,qBAAL,EAA4B;AACxB/D,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACA5G,wCAAwB,IAAxB;AACH;AACJ,SALM,MAKA,IAAI2G,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC3G,wBAAL,EAA+B;AAC3BhE,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACA3G,2CAA2B,IAA3B;AACH;AACJ,SALM,MAKA,IAAI0G,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC1G,uBAAL,EAA8B;AAC1BjE,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACA1G,0CAA0B,IAA1B;AACH;AACJ,SALM,MAKA,IAAIyG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAACvG,eAAL,EAAsB;AAClBpE,yBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACAvG,kCAAkB,IAAlB;AACH;AACJ,SALM,MAKA;AACHpE,qBAAS0K,EAAEC,OAAX,IAAsB,IAAtB;AACH;AACJ,KA/DD;;AAiEA;AACA/K,aAAS6K,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC;AACA,YAAIC,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AAClB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACAzG,kCAAsB,KAAtB;AACH,SAHD,MAGO,IAAIwG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACAxG,kCAAsB,KAAtB;AACH,SAHM,MAGA,IAAIuG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACA7G,sCAA0B,KAA1B;AACH,SAHM,MAGA,IAAI4G,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACA5G,oCAAwB,KAAxB;AACH,SAHM,MAGA,IAAI2G,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACA3G,uCAA2B,KAA3B;AACH,SAHM,MAGA,IAAI0G,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACA1G,sCAA0B,KAA1B;AACH,SAHM,MAGA,IAAIyG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAO3K,SAAS0K,EAAEC,OAAX,CAAP;AACAvG,8BAAkB,KAAlB;AACH,SAHM,MAGA;AACH,mBAAOpE,SAAS0K,EAAEC,OAAX,CAAP;AACH;AACJ,KA1BD;AA2BH;;AAED;;AAEA;AACA,SAASC,SAAT,GAAqB;AACjB;AACA7F,gBAAY5F,KAAKC,GAAL,CAASE,OAAOuL,UAAP,GAAoB,GAA7B,EAAkCvL,OAAOwL,WAAP,GAAqB,GAAvD,CAAZ;;AAEA;AACA,QAAIC,gBAAgBnL,SAASC,cAAT,CAAwB,eAAxB,CAApB;AACAkL,kBAAcC,KAAd,CAAoBC,SAApB,GAAgC,WAAWlG,SAAX,GAAuB,GAAvD;;AAEA;AACAzF,WAAOC,qBAAP,CAA6BqL,SAA7B;AACH;;AAED;;AAEA,SAASpM,iBAAT,CAA2BpC,YAA3B,EAAyC;AACrC+I,gBAAY/I,eAAe,CAA3B,IAAgCyB,kBAAhC;AACH;;AAED,SAASY,oBAAT,GAAgC;AAC5BiF,kBAAc,CAAd;AACA,SAAK,IAAIxG,IAAI,CAAb,EAAgBA,IAAIiI,YAAY/H,MAAhC,EAAwCF,GAAxC,EAA6C;AACzCwG,uBAAeyB,YAAYjI,CAAZ,CAAf;AACH;AACJ,EAmCD,SAASgO,oBAAT,CAA8BC,YAA9B,EAA4C;AACxC,QAAIC,UAAUD,YAAd;;AAEA;AACA,QAAIE,0BAA0BzL,SAASC,cAAT,CAAwB,yBAAxB,CAA9B;AACAwL,4BAAwBL,KAAxB,CAA8BM,UAA9B,GAA2C,SAA3C;;AAEAtG,gBAAY9D,YAAY,YAAM;AAC1B;AACAkK;AACA,YAAIG,iBAAiBpM,KAAKqM,KAAL,CAAWJ,UAAU,EAArB,CAArB;AACA,YAAIK,iBAAiBL,UAAU,EAA/B;;AAEA;AACA,YAAIM,iBAAiB9L,SAASC,cAAT,CAAwB,gBAAxB,CAArB;AACA6L,uBAAe5L,SAAf,GAA8ByL,cAA9B,SAAgDE,cAAhD;;AAEA;AACA,YAAIL,WAAW,CAAf,EAAkB;AACdxN;AACAU,yBAAa,gBAAb;AACH;AACJ,KAfW,EAeT,IAfS,CAAZ;AAgBH;;AAED;AACA,SAASV,qBAAT,GAAiC;AAC7B,QAAIyN,0BAA0BzL,SAASC,cAAT,CAAwB,yBAAxB,CAA9B;AACAwL,4BAAwBL,KAAxB,CAA8BM,UAA9B,GAA2C,QAA3C;AACA9N,kBAAcwH,SAAd;AACH;;AAED,SAAS2G,qBAAT,CAA+BlL,CAA/B,EAAkCvB,CAAlC,EAAqC;AACjC,WAAOC,KAAKyM,KAAL,CAAW1M,CAAX,EAAcuB,CAAd,CAAP;AACH;;AAED,SAASoL,uBAAT,CAAiCC,OAAjC,EAA0C;AACtC,WAAOA,UAAU,GAAV,GAAgB3M,KAAK4M,EAA5B;AACH;;AAED;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACA,QAAIhM,SAAS,EAAT,CAAJ,EAAkB;AACd1B,qBAAa,YAAb;AACH;;AAED,QAAIR,cAAc,SAAlB,EAA6B;AACzB;;AAEA,YAAI,CAACuG,kBAAL,EAAyB;AACrB;AACAV,qBAAS,CAAT;AACAC,qBAAS,CAAT;;AAEA;AACA;AACA,gBAAI5D,SAAS,EAAT,CAAJ,EAAkB;AACd2D;AACH;;AAED;AACA,gBAAI3D,SAAS,EAAT,CAAJ,EAAkB;AACd2D;AACH;;AAED;AACA,gBAAI3D,SAAS,EAAT,CAAJ,EAAkB;AACd4D;AACH;;AAED;AACA,gBAAI5D,SAAS,EAAT,CAAJ,EAAkB;AACd4D;AACH;;AAED,gBAAI,CAAC5D,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAAjB,KAAkCsE,cAAlC,KAAqDX,WAAW,CAAX,IAAgBC,WAAW,CAAhF,CAAJ,EAAwF;AACpF;AACA;AACA,uBAAO5D,SAAS,EAAT,CAAP;;AAEA;AACA;AACA4H;AACH,aARD,MAQO,IAAI,CAAC5H,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAAhB,IAAgCA,SAAS,EAAT,CAAhC,IAAgDA,SAAS,EAAT,CAAjD,KAAkEsE,cAAtE,EAAsF;AACzF;AACA;AACAX,yBAAS,CAAT;AACAC,yBAAS,CAAT;;AAEA;AACA,oBAAI5D,SAAS,EAAT,CAAJ,EAAkB;AACd2D;AACH;;AAED;AACA,oBAAI3D,SAAS,EAAT,CAAJ,EAAkB;AACd2D;AACH;;AAED;AACA,oBAAI3D,SAAS,EAAT,CAAJ,EAAkB;AACd4D;AACH;;AAED;AACA,oBAAI5D,SAAS,EAAT,CAAJ,EAAkB;AACd4D;AACH;;AAEDgE;AACH,aA3BM,MA2BA;AACH7J,wBAAQ4D,KAAR,GAAgB,CAAhB;AACH;;AAED;AACA;AACA;AACA5D,oBAAQQ,kBAAR,GAA6B,CAAC,GAA9B;;AAEA,gBAAIoF,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9B;AACA7F,wBAAQsH,kBAAR,GAA6BsG,sBAAsBhI,MAAtB,EAA8BC,MAA9B,CAA7B;;AAEA;AACA7F,wBAAQQ,kBAAR,GAA6BsN,wBAAwB9N,QAAQsH,kBAAhC,CAA7B;;AAEA;AACAtH,wBAAQuH,EAAR,GAAanG,KAAK8M,GAAL,CAASlO,QAAQsH,kBAAjB,IAAuCtH,QAAQ4D,KAA5D;AACA5D,wBAAQwH,EAAR,GAAapG,KAAK+M,GAAL,CAASnO,QAAQsH,kBAAjB,IAAuCtH,QAAQ4D,KAA5D;;AAEA;AACA5D,wBAAQyH,SAAR,IAAqBzH,QAAQuH,EAA7B;AACAvH,wBAAQ0H,SAAR,IAAqB1H,QAAQwH,EAA7B;;AAEA;AACAxH,wBAAQuH,EAAR,GAAanG,KAAKqM,KAAL,CAAWzN,QAAQyH,SAAnB,CAAb;AACAzH,wBAAQwH,EAAR,GAAapG,KAAKqM,KAAL,CAAWzN,QAAQ0H,SAAnB,CAAb;;AAEA;AACA1H,wBAAQyH,SAAR,IAAqBzH,QAAQuH,EAA7B;AACAvH,wBAAQ0H,SAAR,IAAqB1H,QAAQwH,EAA7B;;AAEA;AACAxH,wBAAQ2H,eAAR,GAA0B3H,QAAQ0C,CAAR,GAAY1C,QAAQuH,EAA9C;AACAvH,wBAAQ4H,eAAR,GAA0B5H,QAAQmB,CAAR,GAAYnB,QAAQwH,EAA9C;AACH,aA1BD,MA0BO;AACH;AACAxH,wBAAQ2H,eAAR,GAA0B3H,QAAQ0C,CAAlC;AACA1C,wBAAQ4H,eAAR,GAA0B5H,QAAQmB,CAAlC;AACH;;AAED;;AAEA;AACA;;AAEA,gBAAInB,QAAQ2H,eAAR,IAA2B,CAA/B,EAAkC;AAC9B3H,wBAAQ2H,eAAR,GAA0B,CAA1B;AACH,aAFD,MAEO,IAAK3H,QAAQ2H,eAAR,GAA0B3H,QAAQkE,KAAnC,IAA6CsB,OAAOtB,KAAxD,EAA+D;AAClElE,wBAAQ2H,eAAR,GAA0BnC,OAAOtB,KAAP,GAAelE,QAAQkE,KAAjD;AACH;;AAED,gBAAIlE,QAAQ4H,eAAR,IAA2B,CAA/B,EAAkC;AAC9B5H,wBAAQ4H,eAAR,GAA0B,CAA1B;AACH,aAFD,MAEO,IAAK5H,QAAQ4H,eAAR,GAA0B5H,QAAQsB,MAAnC,IAA8CkE,OAAOlE,MAAzD,EAAiE;AACpEtB,wBAAQ4H,eAAR,GAA0BpC,OAAOlE,MAAP,GAAgBtB,QAAQsB,MAAlD;AACH;;AAED;;AAEA2K,yCAA6BjM,QAAQ2H,eAArC,EAAsD3H,QAAQ4H,eAA9D,EAA+EhD,KAA/E;;AAEA;AACA,gBAAIkB,kBAAJ,EAAwB;AACpB9F,wBAAQ2H,eAAR,GAA0B3H,QAAQ0C,CAAlC;AACA1C,wBAAQ4H,eAAR,GAA0B5H,QAAQmB,CAAlC;;AAEA,oBAAIiN,UAAU,CAAd;AACA,oBAAIC,UAAU,CAAd;AACA,oBAAIC,mBAAmB,CAAvB;AACA,oBAAIC,mBAAmB,CAAvB;;AAEA;AACA;AACA,oBAAInN,KAAKiK,GAAL,CAASrL,QAAQuH,EAAR,GAAa+G,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,8BAAUpO,QAAQuH,EAAR,GAAa+G,gBAAvB;AACH,iBAFD,MAEO;AACHF,8BAAUhN,KAAKkK,IAAL,CAAUtL,QAAQuH,EAAlB,CAAV;AACH;;AAED0E,6CAA6BjM,QAAQ2H,eAAR,GAA0ByG,OAAvD,EAAgEpO,QAAQ4H,eAAxE,EAAyFhD,KAAzF;;AAEA,uBAAO,CAACkB,kBAAD,IAAuB1E,KAAKiK,GAAL,CAASiD,gBAAT,KAA8BlN,KAAKiK,GAAL,CAASrL,QAAQuH,EAAjB,IAAuB,CAAnF,EAAsF;AAClFvH,4BAAQ2H,eAAR,IAA2ByG,OAA3B;AACAE,wCAAoBF,OAApB;;AAEA,wBAAIhN,KAAKiK,GAAL,CAASrL,QAAQuH,EAAR,GAAa+G,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,kCAAUpO,QAAQuH,EAAR,GAAa+G,gBAAvB;AACH,qBAFD,MAEO;AACHF,kCAAUhN,KAAKkK,IAAL,CAAUtL,QAAQuH,EAAlB,CAAV;AACH;;AAED0E,iDAA6BjM,QAAQ2H,eAAR,GAA0ByG,OAAvD,EAAgEpO,QAAQ4H,eAAxE,EAAyFhD,KAAzF;AACH;;AAED;AACA;AACA,oBAAIxD,KAAKiK,GAAL,CAASrL,QAAQwH,EAAR,GAAa+G,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,8BAAUrO,QAAQwH,EAAR,GAAa+G,gBAAvB;AACH,iBAFD,MAEO;AACHF,8BAAUjN,KAAKkK,IAAL,CAAUtL,QAAQwH,EAAlB,CAAV;AACH;;AAEDyE,6CAA6BjM,QAAQ2H,eAArC,EAAsD3H,QAAQ4H,eAAR,GAA0ByG,OAAhF,EAAyFzJ,KAAzF;;AAEA,uBAAO,CAACkB,kBAAD,IAAuB1E,KAAKiK,GAAL,CAASkD,gBAAT,KAA8BnN,KAAKiK,GAAL,CAASrL,QAAQwH,EAAjB,IAAuB,CAAnF,EAAsF;AAClFxH,4BAAQ4H,eAAR,IAA2ByG,OAA3B;AACAE,wCAAoBF,OAApB;;AAEA,wBAAIjN,KAAKiK,GAAL,CAASrL,QAAQwH,EAAR,GAAa+G,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,kCAAUrO,QAAQwH,EAAR,GAAa+G,gBAAvB;AACH,qBAFD,MAEO;AACHF,kCAAUjN,KAAKkK,IAAL,CAAUtL,QAAQwH,EAAlB,CAAV;AACH;;AAEDyE,iDAA6BjM,QAAQ2H,eAArC,EAAsD3H,QAAQ4H,eAAR,GAA0ByG,OAAhF,EAAyFzJ,KAAzF;AACH;AACJ;;AAED5E,oBAAQ0C,CAAR,GAAY1C,QAAQ2H,eAApB;AACA3H,oBAAQmB,CAAR,GAAYnB,QAAQ4H,eAApB;AACH;;AAED;;AAEAwC;AACAC;;AAEA;;AAEAlD,2BAAmB5H,MAAnB,CAA0B,CAA1B;;AAEA4K;AACA,aAAK,IAAIhL,IAAI,CAAb,EAAgBA,IAAIQ,WAAWN,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC2M,qCAAyBnM,WAAWR,CAAX,CAAzB;AACH;;AAED,aAAK,IAAIA,MAAI,CAAb,EAAgBA,MAAIgI,mBAAmB9H,MAAvC,EAA+CF,KAA/C,EAAoD;AAChD,gBAAIgI,mBAAmBhI,GAAnB,EAAsBqP,WAAtB,CAAkCC,IAAlC,KAA2C,cAA/C,EAA+D;AAC3D;AACA3O;;AAEA;AACA,oBAAI4O,iBAAiBvH,mBAAmBhI,GAAnB,CAArB;AACAuP,+BAAetM,eAAf;AACA9C,6BAAaoP,eAAepM,OAA5B;AACA,oBAAIgB,gBAAgBN,cAAcO,OAAd,CAAsBmL,cAAtB,CAApB;AACA1L,8BAAczD,MAAd,CAAqB+D,aAArB,EAAoC,CAApC;AACH,aAVD,MAUO,IAAI6D,mBAAmBhI,GAAnB,EAAsBqP,WAAtB,CAAkCC,IAAlC,KAA2C,aAA/C,EAA8D;AACjE;AACA3O;;AAEA;AACA,qBAAK,IAAIX,MAAI,CAAb,EAAgBA,MAAIC,gBAAgBC,MAApC,EAA4CF,KAA5C,EAAiD;AAC7CG,iCAAaF,gBAAgBD,GAAhB,CAAb;AACH;;AAEDC,gCAAgBG,MAAhB,CAAuB,CAAvB;;AAEA;AACA,qBAAK,IAAIJ,MAAI,CAAb,EAAgBA,MAAIK,iBAAiBH,MAArC,EAA6CF,KAA7C,EAAkD;AAC9CM,kCAAcD,iBAAiBL,GAAjB,CAAd;AACH;;AAEDK,iCAAiBD,MAAjB,CAAwB,CAAxB;;AAEA0K;;AAEAzH,mCAAmB,IAAnB;;AAEA9C;AACA,qBAAK,IAAIP,MAAI,CAAb,EAAgBA,MAAIQ,WAAWN,MAA/B,EAAuCF,KAAvC,EAA4C;AACxCkK,qCAAiB1J,WAAWR,GAAX,CAAjB;AACH;;AAED;AACA;AACH,aA7BM,MA6BA;AACHoB,6BAAa,MAAb;AACA;AACH;AACJ;AACJ;;AAED;AACAgB,WAAOC,qBAAP,CAA6ByM,QAA7B;AACH;;AAED;AACA;AACA,SAASU,WAAT,GAAuB;AACnB;AACA9M,aAASC,cAAT,CAAwB,eAAxB,EAAyCC,SAAzC,gBAAgEjC,kBAAhE;;AAEA;AACA+B,aAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,YAAY1D,YAAhE;;AAEA;AACAiH,YAAQsJ,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBpJ,OAAOtB,KAA/B,EAAsCsB,OAAOlE,MAA7C;;AAEA,QAAIvB,cAAc,mBAAd,IAAqCA,cAAc,iBAAvD,EAA0E;AACtEuK;AACAM;AACH;;AAED,QAAI7K,cAAc,SAAlB,EAA6B;AACzB6L;AACAf;AACAI;AACAC;AACAQ;AACAC;AACH,KAPD,MAOO,IAAI5L,cAAc,gBAAlB,EAAoC;AACvC8L;AACH;;AAED;AACAtK,WAAOC,qBAAP,CAA6BmN,WAA7B;AACH;;AAED;;AAEArQ;;AAEAmO;AACAlL,OAAOC,qBAAP,CAA6ByM,QAA7B;AACA1M,OAAOC,qBAAP,CAA6BmN,WAA7B;AACApN,OAAOC,qBAAP,CAA6BqL,SAA7B","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet currentLevelPoints = 0;\r\nlet totalPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet levelPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelThree() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFour() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFive() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSix() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSeven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEight() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelNine() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTen() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEleven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwelve() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        blockie.state = \"playing\";\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene, 0.17);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    updateLevelPoints(currentLevel);\r\n    currentLevelPoints = 0;\r\n    calculateTotalPoints();\r\n\r\n    currentLevel++;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n        case 3:\r\n            levelThree();\r\n            break;\r\n        case 4:\r\n            levelFour();\r\n            break;\r\n        case 5:\r\n            levelFive();\r\n            break;\r\n        case 6:\r\n            levelSix();\r\n            break;\r\n        case 7:\r\n            levelSeven();\r\n            break;\r\n        case 8:\r\n            levelEight();\r\n            break;\r\n        case 9:\r\n            levelNine();\r\n            break;\r\n        case 10:\r\n            levelTen();\r\n            break;\r\n        case 11:\r\n            levelEleven();\r\n            break;\r\n        case 12:\r\n            levelTwelve();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Placed here to draw Blockie with a PartyHat during increaseLevel().\r\n            partyHats.splice(0);\r\n\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Prevents dashing immediatley after restarting the game.\r\n                delete keysDown[16];\r\n                delete keysDown[32];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n};\r\n\r\n//Adjusts Blockie's location to prevent wall clipping in screen transitions.\r\nfunction moveBlockie(x, y) {\r\n    blockie.x = x;\r\n    blockie.y = y;\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Point Functions\r\n\r\nfunction updateLevelPoints(currentLevel) {\r\n    levelPoints[currentLevel - 1] = currentLevelPoints;\r\n};\r\n\r\nfunction calculateTotalPoints() {\r\n    totalPoints = 0;\r\n    for (let i = 0; i < levelPoints.length; i++) {\r\n        totalPoints += levelPoints[i];\r\n    };\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene, secondsPerFrame) {\r\n    let cutsceneSideLength = 512;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 0, 0, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            //Updates Blockie's location if he's touching a wall to the nearest open location.\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                    xChange = blockie.dx - xTestingDistance;\r\n                } else {\r\n                    xChange = Math.sign(blockie.dx);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    xTestingDistance += xChange;\r\n\r\n                    if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                        xChange = blockie.dx - xTestingDistance;\r\n                    } else {\r\n                        xChange = Math.sign(blockie.dx);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                    yChange = blockie.dy - yTestingDistance;\r\n                } else {\r\n                    yChange = Math.sign(blockie.dy);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                        yChange = blockie.dy - yTestingDistance;\r\n                    } else {\r\n                        yChange = Math.sign(blockie.dy);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}