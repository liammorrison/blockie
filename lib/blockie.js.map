{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","fireMovingHorizontalLaser","fireMovingVerticalLaser","Promise","all","console","log","changeLevel","levelOne","levelTwo","gameState","i","currentPromiseRejectFunctions","length","currentTimers","clearTimeout","splice","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","horizontalLasers","verticalLasers","bombs","movingHorizontalLasers","movingVerticalLasers","diplayingGameOverScreen","resumeGame","window","requestAnimationFrame","controlRestartingLevel","restartLevel","y","waitingSeconds","activeSeconds","stopWaiting","removeCurrentPromiseRejectFunction","removeCurrentTimer","addCurrentPromiseRejectFunction","addCurrentTimer","instance","horizontalLaser","push","setWarningTimers","endFiring","instanceIndex","indexOf","fireHorizontalLaser","x","verticalLaser","fireVerticalLaser","bomb","fireBomb","speed","movingHorizontalLaser","movingVerticalLaser","getContext","fillStyle","strokeStyle","lineWidth","KeysPressed","currentLevel","xInput","yInput","colliding","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","Player","spriteSideLength","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","visible","blockieX","blockieY","promise","timer","currentPromiseRejectFunctionIndex","currentTimerIndex","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawHorizontalLasers","currentInstance","strokeRect","fillRect","drawVerticalLasers","drawBombs","drawMovingHorizontalLasers","beginPath","moveTo","lineTo","Math","sign","fill","drawMovingVerticalLasers","checkCollisionsWithClass","classArray","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","gameLoop","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","drawingLoop","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\ncontext.strokeStyle = \"#FFFFFF\";\r\ncontext.lineWidth = 5;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet KeysPressed = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\n\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass movingHorizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n        this.speed = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingVerticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n        this.speed = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await fireMovingHorizontalLaser(24 * 16, 16, -1, 0.5, 4.5);\r\n        await fireMovingVerticalLaser(24 * 16, 16, -1, 0.5, 4.5);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(0, 16, 1, 0, 7),\r\n            fireMovingVerticalLaser(0, 16, 1, 0, 7)\r\n        ]);\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(canvas.height - 16, 16, -1.5, 0, 4),\r\n            fireMovingVerticalLaser(canvas.width - 16, 16, -1.5, 1.5, 4),\r\n            fireMovingHorizontalLaser(0, 16, 1.5, 3, 4),\r\n            fireMovingVerticalLaser(0, 16, 1.5, 4.5, 4)\r\n        ]);\r\n\r\n        console.log(\"Level completed.\");\r\n        changeLevel();\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await fireMovingHorizontalLaser(24 * 16, 16, -1, 0.5, 4.5);\r\n\r\n        console.log(\"Level completed.\");\r\n        changeLevel();\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n    colliding = false;\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Calls the reject function on every currently-running promise so that they stop hurting performance.\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    //Removes all references to instances from arrays.\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    bombs.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    //Restarts the game after the timer ends.\r\n    let resumeGame = setTimeout(() => {\r\n        diplayingGameOverScreen = false;\r\n        gameState = \"playing\";\r\n        blockie.state = \"playing\";\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\nfunction changeLevel() {\r\n    currentLevel++;\r\n\r\n    switch (currentLevel) {\r\n        case 2:\r\n            console.log(currentTimers);\r\n            console.log(currentPromiseRejectFunctions);\r\n            levelTwo();\r\n            break;\r\n    }\r\n}\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"Restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running promise to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(promise) {\r\n    currentPromiseRejectFunctions.push(promise);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise from the array of currently-running promises (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentPromiseRejectFunction(promise) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(promise);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all).\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all).\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new verticalLaser();\r\n    verticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all).\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new bomb();\r\n    bombs.push(instance);\r\n    instance.x = x;\r\n    instance.y = y;\r\n    instance.width = width;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all).\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new movingHorizontalLaser();\r\n    movingHorizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n    instance.speed = speed;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, activeSeconds) {\r\n    //waitingSeconds is used as a \"lag time\", meaning that the instance won't exist until its promise is resolved. This is meant to \r\n    //allow for instances to spawn at different times concurrently (using Promise.all).\r\n    await new Promise((resolve, reject) => {\r\n        let stopWaiting = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(stopWaiting);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(stopWaiting);\r\n    });\r\n\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new movingVerticalLaser();\r\n    movingVerticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n    instance.speed = speed;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    };\r\n};\r\n\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x + 8, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y);\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y);\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 24, currentInstance.y);\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.width - 8, currentInstance.y);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x, currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x, currentInstance.height - 8);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    checkCollisionsWithClass(horizontalLasers);\r\n\r\n    checkCollisionsWithClass(verticalLasers);\r\n\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n\r\n    if (colliding) {\r\n        restartLevel();\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (blockie.state === \"playing\") {\r\n            blockie.sprite = spBlockiePlaying;\r\n            //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n            //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n            blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n        } else if (blockie.state === \"recoveringFromDash\") {\r\n            blockie.sprite = spBlockieRecoveringFromDash;\r\n            blockie.sx = 0;\r\n        } else if (blockie.state === \"destructing\") {\r\n            blockie.sprite = spBlockieDestructing;\r\n\r\n            let endAnimateBlockieDestructing = setTimeout(() => {\r\n                clearInterval(animateBlockieDestructing);\r\n                removeCurrentTimer(animateBlockieDestructing);\r\n                removeCurrentTimer(endAnimateBlockieDestructing);\r\n            }, 1.5 * 1000);\r\n            addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n            let animateBlockieDestructing = setInterval(() => {\r\n                blockie.sx += blockie.spriteSideLength;\r\n            }, 0.5 * 1000);\r\n            addCurrentTimer(animateBlockieDestructing);\r\n        };\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n    }\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}