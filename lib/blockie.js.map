{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","fireVerticalLaser","console","log","levelOne","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","gameState","currentPromiseRejectFunctions","currentTimers","horizontalLasers","verticalLasers","Player","spriteSideLength","x","y","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","horizontalLaser","state","visible","verticalLaser","blockieX","blockieY","window","requestAnimationFrame","gameLoop","restartLevel","clearRect","innerHTML","i","length","clearTimeout","splice","setTimeout","controlRestartingLevel","addCurrentPromiseRejectFunction","promise","push","addCurrentTimer","timer","removeCurrentPromiseRejectFunction","currentPromiseRejectFunctionIndex","indexOf","removeCurrentTimer","currentTimerIndex","totalSeconds","instance","setWarningTimers","resolve","reject","endFiring","instanceIndex","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","drawHorizontalLasers","currentInstance","fillRect","drawVerticalLasers","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","cos","sin","floor","round","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\n\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie\"s sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement(\"img\");\r\n        this.sprite.src = \"../images/blockie.png\";\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(300, 16, 2),\r\n            fireHorizontalLaser(100, 16, 2),\r\n            fireVerticalLaser(100, 16, 2)\r\n        ]);\r\n\r\n        await fireHorizontalLaser(100, 16, 2);\r\n\r\n        console.log(\"Level completed.\");\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    window.requestAnimationFrame(gameLoop);\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nfunction restartLevel() {\r\n    //Draws only the game over screen.\r\n    gameState = \"restartingLevel\";\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n\r\n    //Calls the reject function on every currently-running promise so that they stop hurting performance.\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    //Removes all references to instances from arrays.\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n\r\n    //Restarts the game after the timer ends.\r\n    setTimeout(() => {\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        gameState = \"playing\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"Restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running promise to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(promise) {\r\n    currentPromiseRejectFunctions.push(promise);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise from the array of currently-running promises (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentPromiseRejectFunction(promise) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(promise);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireHorizontalLaser(y, height, totalSeconds) {\r\n    //Creates a horizontal laser instance and sets all of its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the Horizontal laser's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireVerticalLaser(x, width, totalSeconds) {\r\n    //Creates a horizontal laser instance and sets all of its key-value pairs.\r\n    let instance = new verticalLaser();\r\n    verticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the Horizontal laser's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n}\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillRect(currentInstance.x + 8, currentInstance.y, 8, currentInstance.height);\r\n                context.fillRect(currentInstance.width - 16, currentInstance.y, 8, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 8);\r\n                context.fillRect(currentInstance.x, currentInstance.height - 16, currentInstance.width, 8);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\n//Game loop\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener(\"keydown\", e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener(\"keyup\", e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nfunction gameLoop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    } else {\r\n        //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n        blockie.testXLocation = blockie.x;\r\n        blockie.testYLocation = blockie.y;\r\n    }\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.width;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.height;\r\n    };\r\n\r\n    //Drawing\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n\r\n    drawHorizontalLasers();\r\n    drawVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n        if (colliding) {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, verticalLasers[i]);\r\n        if (colliding) {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}