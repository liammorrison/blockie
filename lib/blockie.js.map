{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","console","log","levelOne","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","gameState","currentPromiseRejectFunctions","currentTimers","horizontalLasers","Player","spriteSideLength","x","y","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","horizontalLaser","blockieX","blockieY","window","requestAnimationFrame","gameLoop","restartLevel","clearRect","innerHTML","i","length","clearTimeout","splice","setTimeout","controlRestartingLevel","addCurrentPromiseRejectFunction","promise","push","addCurrentTimer","timer","removeCurrentPromiseRejectFunction","currentPromiseRejectFunctionIndex","indexOf","removeCurrentTimer","currentTimerIndex","seconds","promiseTimer","instance","instanceIndex","resolve","reject","drawHorizontalLasers","currentInstance","fillRect","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","cos","sin","floor","round","drawImage"],"mappings":";;AAwDA;;AAEA;;AAEA;;uEACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEQA,wCAAgBC,OAAOC,KAAP,GAAe,CAAf,GAAmBC,QAAQD,KAAR,GAAgB,CAAnD,EAAsDD,OAAOG,MAAP,GAAgB,CAAhB,GAAoBD,QAAQC,MAAR,GAAiB,CAA3F;;AAFR;AAAA,+BAIcC,QAAQC,GAAR,CAAY,CACdC,oBAAoB,GAApB,EAAyB,EAAzB,EAA6B,CAA7B,CADc,EAEdA,oBAAoB,GAApB,EAAyB,EAAzB,EAA6B,CAA7B,CAFc,CAAZ,CAJd;;AAAA;AAAA;AAAA,+BAScA,oBAAoB,GAApB,EAAyB,EAAzB,EAA6B,CAA7B,CATd;;AAAA;;AAWQC,gCAAQC,GAAR,CAAY,kBAAZ;AAXR;AAAA;;AAAA;AAAA;AAAA;;AAaQD,gCAAQC,GAAR,CAAY,kBAAZ;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Q;;;;;;;;;AA7Df;;AAEA,IAAMT,SAASU,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMC,UAAUZ,OAAOa,UAAP,CAAkB,IAAlB,CAAhB;AACAD,QAAQE,SAAR,GAAoB,OAApB;;AAEA;;AAEA,IAAIC,cAAc,EAAlB;AACA,IAAIC,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;AACA,IAAIC,YAAY,KAAhB;AACA,IAAIC,YAAY,SAAhB;;AAEA;;AAEA,IAAIC,gCAAgC,EAApC;AACA,IAAIC,gBAAgB,EAApB;AACA,IAAIC,mBAAmB,EAAvB;;AAEA;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKtB,KAAL,GAAa,EAAb;AACA,SAAKE,MAAL,GAAc,EAAd;AACA,SAAKqB,gBAAL,GAAwB,EAAxB;AACA,SAAKC,CAAL,GAASzB,OAAOC,KAAP,GAAe,CAAf,GAAmB,KAAKA,KAAL,GAAa,CAAzC;AACA,SAAKyB,CAAL,GAAS1B,OAAOG,MAAP,GAAgB,CAAhB,GAAoB,KAAKA,MAAL,GAAc,CAA3C;AACA,SAAKwB,EAAL,GAAU,CAAV;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKV,CAA1B;AACA,SAAKW,aAAL,GAAqB,KAAKV,CAA1B;;AAEA;AACA;AACA,SAAKW,MAAL,GAAc3B,SAAS4B,aAAT,CAAuB,KAAvB,CAAd;AACA,SAAKD,MAAL,CAAYE,GAAZ,GAAkB,uBAAlB;AACH,C;;AACJ;;IAEKC,e,GACF,2BAAc;AAAA;;AACV,SAAKf,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,GAAT;AACA,SAAKzB,KAAL,GAAaD,OAAOC,KAApB;AACA,SAAKE,MAAL,GAAc,EAAd;AACH,C;;AAwBJ;;AAED;AACA,SAASJ,eAAT,CAAyB0C,QAAzB,EAAmCC,QAAnC,EAA6C;AACzCC,WAAOC,qBAAP,CAA6BC,QAA7B;AACA3C,YAAQuB,CAAR,GAAYgB,QAAZ;AACAvC,YAAQwB,CAAR,GAAYgB,QAAZ;AACH;;AAED;AACA,SAASI,YAAT,GAAwB;AACpB;AACA3B,gBAAY,iBAAZ;AACAP,YAAQmC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB/C,OAAOC,KAA/B,EAAsCD,OAAOG,MAA7C;AACAO,aAASC,cAAT,CAAwB,kBAAxB,EAA4CqC,SAA5C,GAAwD,eAAxD;;AAEA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI5B,cAAc6B,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3CE,qBAAa9B,cAAc4B,CAAd,CAAb;AACH;;AAED,SAAK,IAAIA,KAAI,CAAb,EAAgBA,KAAI7B,8BAA8B8B,MAAlD,EAA0DD,IAA1D,EAA+D;AAC3D7B,sCAA8B6B,EAA9B;AACH;;AAED;AACA7B,kCAA8BgC,MAA9B,CAAqC,CAArC;AACA/B,kBAAc+B,MAAd,CAAqB,CAArB;AACA9B,qBAAiB8B,MAAjB,CAAwB,CAAxB;;AAEAC,eAAW,YAAM;AACb5C;AACAC,iBAASC,cAAT,CAAwB,kBAAxB,EAA4CqC,SAA5C,GAAwD,EAAxD;AACA7B,oBAAY,SAAZ;AACAwB,eAAOC,qBAAP,CAA6BU,sBAA7B;AACH,KALD,EAKG,IALH;AAMH;;AAED;;AAEA;AACA;AACA,SAASA,sBAAT,GAAkC;AAC9B,QAAInC,cAAc,iBAAlB,EAAqC;AACjCZ,gBAAQC,GAAR,CAAY,mBAAZ;AACH,KAFD,MAEO;AACHmC,eAAOC,qBAAP,CAA6BU,sBAA7B;AACH;AACJ;;AAED;AACA,SAASC,+BAAT,CAAyCC,OAAzC,EAAkD;AAC9CpC,kCAA8BqC,IAA9B,CAAmCD,OAAnC;AACH;;AAED;AACA,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC5BtC,kBAAcoC,IAAd,CAAmBE,KAAnB;AACH;;AAED;AACA,SAASC,kCAAT,CAA4CJ,OAA5C,EAAqD;AACjD,QAAIK,oCAAoCzC,8BAA8B0C,OAA9B,CAAsCN,OAAtC,CAAxC;AACApC,kCAA8BgC,MAA9B,CAAqCS,iCAArC,EAAwE,CAAxE;AACH;;AAED;AACA,SAASE,kBAAT,CAA4BJ,KAA5B,EAAmC;AAC/B,QAAIK,oBAAoB3C,cAAcyC,OAAd,CAAsBH,KAAtB,CAAxB;AACAtC,kBAAc+B,MAAd,CAAqBY,iBAArB,EAAwC,CAAxC;AACH;;AAED;;AAEA;AACA;AACA,SAAS1D,mBAAT,CAA6BoB,CAA7B,EAAgCvB,MAAhC,EAAwC8D,OAAxC,EAAiD;AAC7C,QAAIC,qBAAJ;;AAEA;AACA,QAAIC,WAAW,IAAI3B,eAAJ,EAAf;AACAlB,qBAAiBmC,IAAjB,CAAsBU,QAAtB;AACA,QAAIC,gBAAgB9C,iBAAiBwC,OAAjB,CAAyBK,QAAzB,CAApB;AACA7C,qBAAiB8C,aAAjB,EAAgC1C,CAAhC,GAAoCA,CAApC;AACAJ,qBAAiB8C,aAAjB,EAAgCjE,MAAhC,GAAyCA,MAAzC;;AAEA;AACA;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACiE,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,uBAAeb,WAAW,YAAM;AAC5BO,+CAAmCU,MAAnC;AACAP,+BAAmBG,YAAnB;;AAEAE,4BAAgB9C,iBAAiBwC,OAAjB,CAAyBK,QAAzB,CAAhB;AACA7C,6BAAiB8B,MAAjB,CAAwBgB,aAAxB,EAAuC,CAAvC;AACA7D,oBAAQC,GAAR,CAAY,mBAAZ;AACA6D,oBAAQ,UAAR;AACH,SARc,EAQZJ,UAAU,IARE,CAAf;;AAUAV,wCAAgCe,MAAhC;AACAZ,wBAAgBQ,YAAhB;AACH,KAbM,CAAP;AAcH;;AAED;;AAEA,SAASK,oBAAT,GAAgC;AAC5B,SAAK,IAAItB,IAAI,CAAb,EAAgBA,IAAI3B,iBAAiB4B,MAArC,EAA6CD,GAA7C,EAAkD;AAC9C,YAAIuB,kBAAkBlD,iBAAiB2B,CAAjB,CAAtB;AACArC,gBAAQ6D,QAAR,CAAiBD,gBAAgB/C,CAAjC,EAAoC+C,gBAAgB9C,CAApD,EAAuD8C,gBAAgBvE,KAAvE,EAA8EuE,gBAAgBrE,MAA9F;AACH;AACJ;;AAED;;AAEA;AACA,SAASuE,qBAAT,CAA+BC,WAA/B,EAA4CC,WAA5C,EAAyD;AACrD,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAYnD,CAAZ,IAAiBkD,YAAYlD,CAA9B,IAAqCkD,YAAYlD,CAAZ,IAAiBmD,YAAYnD,CAAZ,GAAgBmD,YAAY3E,KAAtF,EAA8F;AAC1F4E,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKF,YAAYlD,CAAZ,IAAiBmD,YAAYnD,CAA9B,IAAqCmD,YAAYnD,CAAZ,IAAiBkD,YAAYlD,CAAZ,GAAgBkD,YAAY1E,KAAtF,EAA8F;AACjG4E,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAYlD,CAAZ,IAAiBiD,YAAYjD,CAA9B,IAAqCiD,YAAYjD,CAAZ,IAAiBkD,YAAYlD,CAAZ,GAAgBkD,YAAYzE,MAAtF,EAA+F;AAC3F2E,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKH,YAAYjD,CAAZ,IAAiBkD,YAAYlD,CAA9B,IAAqCkD,YAAYlD,CAAZ,IAAiBiD,YAAYjD,CAAZ,GAAgBiD,YAAYxE,MAAtF,EAA+F;AAClG2E,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1B5D,oBAAY,IAAZ;AACH;AACJ;;AAED,SAAS6D,qBAAT,CAA+BtD,CAA/B,EAAkCC,CAAlC,EAAqC;AACjC,WAAOsD,KAAKC,KAAL,CAAWvD,CAAX,EAAcD,CAAd,CAAP;AACH;;AAED,SAASyD,uBAAT,CAAiCC,OAAjC,EAA0C;AACtC,WAAOA,UAAU,GAAV,GAAgBH,KAAKI,EAA5B;AACH;;AAED,IAAMlF,UAAU,IAAIqB,MAAJ,EAAhB;;AAEA;;AAEA;AACA;AACAb,SAAS2E,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtCtE,gBAAYuE,EAAEC,OAAd,IAAyB,IAAzB;AACH,CAFD;;AAIA;AACA7E,SAAS2E,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC,WAAOtE,YAAYuE,EAAEC,OAAd,CAAP;AACH,CAFD;;AAIA,SAAS1C,QAAT,GAAoB;AAChB;AACAjC,YAAQmC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB/C,OAAOC,KAA/B,EAAsCD,OAAOG,MAA7C;;AAEA;;AAEA;AACAa,aAAS,CAAT;AACAC,aAAS,CAAT;;AAEA;AACA;AACA;AACAf,YAAQ2B,kBAAR,GAA6B,CAAC,GAA9B;;AAEA;AACA,QAAId,YAAY,EAAZ,CAAJ,EAAqB;AACjBC,kBAAU,CAAV;AACH;;AAED,QAAID,YAAY,EAAZ,CAAJ,EAAqB;AACjBC,kBAAU,CAAV;AACH;;AAED,QAAID,YAAY,EAAZ,CAAJ,EAAqB;AACjBE,kBAAU,CAAV;AACH;;AAED,QAAIF,YAAY,EAAZ,CAAJ,EAAqB;AACjBE,kBAAU,CAAV;AACH;;AAED,QAAID,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9B;AACAf,gBAAQ4B,kBAAR,GAA6BiD,sBAAsB/D,MAAtB,EAA8BC,MAA9B,CAA7B;;AAEA;AACAf,gBAAQ2B,kBAAR,GAA6BqD,wBAAwBhF,QAAQ4B,kBAAhC,CAA7B;;AAEA;AACA5B,gBAAQ6B,EAAR,GAAaiD,KAAKQ,GAAL,CAAStF,QAAQ4B,kBAAjB,IAAuC5B,QAAQ0B,KAA5D;AACA1B,gBAAQ8B,EAAR,GAAagD,KAAKS,GAAL,CAASvF,QAAQ4B,kBAAjB,IAAuC5B,QAAQ0B,KAA5D;;AAEA;AACA1B,gBAAQ+B,SAAR,IAAqB/B,QAAQ6B,EAA7B;AACA7B,gBAAQgC,SAAR,IAAqBhC,QAAQ8B,EAA7B;;AAEA;AACA9B,gBAAQ6B,EAAR,GAAaiD,KAAKU,KAAL,CAAWxF,QAAQ+B,SAAnB,CAAb;AACA/B,gBAAQ8B,EAAR,GAAagD,KAAKU,KAAL,CAAWxF,QAAQgC,SAAnB,CAAb;;AAEA;AACAhC,gBAAQ+B,SAAR,IAAqB/B,QAAQ6B,EAA7B;AACA7B,gBAAQgC,SAAR,IAAqBhC,QAAQ8B,EAA7B;;AAEA;AACA9B,gBAAQiC,aAAR,GAAwBjC,QAAQuB,CAAR,GAAYvB,QAAQ6B,EAA5C;AACA7B,gBAAQkC,aAAR,GAAwBlC,QAAQwB,CAAR,GAAYxB,QAAQ8B,EAA5C;AACH,KA1BD,MA0BO;AACH;AACA9B,gBAAQiC,aAAR,GAAwBjC,QAAQuB,CAAhC;AACAvB,gBAAQkC,aAAR,GAAwBlC,QAAQwB,CAAhC;AACH;;AAED;AACA;AACA,QAAI,EAAExB,QAAQiC,aAAR,IAAyB,CAAzB,IAA+BjC,QAAQiC,aAAR,GAAwBjC,QAAQD,KAAjC,IAA2CD,OAAOC,KAAlF,CAAJ,EAA8F;AAC1FC,gBAAQuB,CAAR,GAAYvB,QAAQiC,aAApB;AACH,KAFD,MAEO,IAAIjC,QAAQiC,aAAR,IAAyB,CAA7B,EAAgC;AACnCjC,gBAAQuB,CAAR,GAAY,CAAZ;AACH,KAFM,MAEA,IAAKvB,QAAQiC,aAAR,GAAwBjC,QAAQD,KAAjC,IAA2CD,OAAOC,KAAtD,EAA6D;AAChEC,gBAAQuB,CAAR,GAAYzB,OAAOC,KAAP,GAAeC,QAAQD,KAAnC;AACH;;AAED,QAAI,EAAEC,QAAQkC,aAAR,IAAyB,CAAzB,IAA+BlC,QAAQkC,aAAR,GAAwBlC,QAAQC,MAAjC,IAA4CH,OAAOG,MAAnF,CAAJ,EAAgG;AAC5FD,gBAAQwB,CAAR,GAAYxB,QAAQkC,aAApB;AACH,KAFD,MAEO,IAAIlC,QAAQkC,aAAR,IAAyB,CAA7B,EAAgC;AACnClC,gBAAQwB,CAAR,GAAY,CAAZ;AACH,KAFM,MAEA,IAAKxB,QAAQkC,aAAR,GAAwBlC,QAAQC,MAAjC,IAA4CH,OAAOG,MAAvD,EAA+D;AAClED,gBAAQwB,CAAR,GAAY1B,OAAOG,MAAP,GAAgBD,QAAQC,MAApC;AACH;;AAED;;AAEA;AACA;AACAD,YAAQyB,EAAR,GAAazB,QAAQsB,gBAAR,IAA4BwD,KAAKW,KAAL,CAAWzF,QAAQ2B,kBAAR,GAA6B,EAAxC,IAA8C,CAA1E,CAAb;;AAEAjB,YAAQgF,SAAR,CAAkB1F,QAAQmC,MAA1B,EAAkCnC,QAAQyB,EAA1C,EAA8C,CAA9C,EAAiDzB,QAAQsB,gBAAzD,EAA2EtB,QAAQsB,gBAAnF,EAAqGtB,QAAQuB,CAA7G,EAAgHvB,QAAQwB,CAAxH,EAA2HxB,QAAQD,KAAnI,EAA0IC,QAAQC,MAAlJ;;AAEAoE;;AAEA;;AAEA;AACArD,gBAAY,KAAZ;;AAEA,SAAK,IAAI+B,IAAI,CAAb,EAAgBA,IAAI3B,iBAAiB4B,MAArC,EAA6CD,GAA7C,EAAkD;AAC9CyB,8BAAsBxE,OAAtB,EAA+BoB,iBAAiB2B,CAAjB,CAA/B;AACA,YAAI/B,SAAJ,EAAe;AACX4B;AACA;AACH;AACJ;;AAED;AACA,QAAI3B,cAAc,SAAlB,EAA6B;AACzBwB,eAAOC,qBAAP,CAA6BC,QAA7B;AACH;AACJ;;AAEDpC;;AAEAkC,OAAOC,qBAAP,CAA6BU,sBAA7B","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\nlet horizontalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie\"s sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement(\"img\");\r\n        this.sprite.src = \"../images/blockie.png\";\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 100;\r\n        this.width = canvas.width;\r\n        this.height = 32;\r\n    }\r\n}\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(300, 16, 4),\r\n            fireHorizontalLaser(100, 16, 3)\r\n        ]);\r\n\r\n        await fireHorizontalLaser(100, 16, 3);\r\n\r\n        console.log(\"Level completed.\");\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    }\r\n\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    window.requestAnimationFrame(gameLoop);\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n}\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to then restart the current level.\r\nfunction restartLevel() {\r\n    //Draws only the game over screen.\r\n    gameState = \"restartingLevel\";\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n\r\n    //Stops all timers (prevents promises from continuing).\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Destroys every instance.\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n    horizontalLasers.splice(0);\r\n\r\n    setTimeout(() => {\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        gameState = \"playing\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"Restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running promise to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(promise) {\r\n    currentPromiseRejectFunctions.push(promise);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise from the array of currently-running promises (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentPromiseRejectFunction(promise) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(promise);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance of a laser and adds it to an array so that it can be drawn and used in collision checking more easily.\r\n//When the timer ends, the instance is deleted.\r\nfunction fireHorizontalLaser(y, height, seconds) {\r\n    let promiseTimer;\r\n\r\n    //Creates an instance of an object, adds it to the end of its object's array, and assigns its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    let instanceIndex = horizontalLasers.indexOf(instance);\r\n    horizontalLasers[instanceIndex].y = y;\r\n    horizontalLasers[instanceIndex].height = height;\r\n\r\n    //Creates a timer that resolves promises in the levelController and deletes the instance from its array (so that it isn't drawn\r\n    //or collided with anymore).\r\n    return new Promise((resolve, reject) => {\r\n        promiseTimer = setTimeout(() => {\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(promiseTimer);\r\n\r\n            instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, seconds * 1000);\r\n\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(promiseTimer);\r\n    });\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    }\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Determines if two objects are \"colliding\".\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width)) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height)) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\n//Game loop\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener(\"keydown\", e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener(\"keyup\", e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nfunction gameLoop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    } else {\r\n        //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n        blockie.testXLocation = blockie.x;\r\n        blockie.testYLocation = blockie.y;\r\n    }\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.width;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.height;\r\n    };\r\n\r\n    //Drawing\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n\r\n    drawHorizontalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n        if (colliding) {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}