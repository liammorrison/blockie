{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","oneHalf","blockieAdjustment","pointSix","cancelAwaitChain","Promise","all","createWall","threeEigths","fullScreen","fiveEigths","createActivePoint","pointOne","loopFireMovingWalls","oneFourth","pointEight","fireContinuallyMovingWall","moveBlockie","oneEigth","sevenEigths","loopFireBombs","threeFourths","createPassivePoint","fireMovingWall","console","log","currentLevel","increaseLevel","levelOne","error","levelTwo","levelThree","levelFour","levelFive","levelSix","levelSeven","levelEight","levelNine","levelTen","levelEleven","levelTwelve","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllInstances","allInstances","rejectInstances","destroyCountdownTimer","currentLevelPoints","gameState","blockie","state","sx","displayMessage","resetBlockieState","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","updateLevelPoints","calculateTotalPoints","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","xSpeed","ySpeed","MovingPassivePoint","movingPassivePoints","fireMovingPassivePoint","ActivePoint","activePoints","MovingActivePoint","movingActivePoints","fireMovingActivePoint","speed","initialWaitingSeconds","fireMovingHorizontalLaser","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","width","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","fireBomb","Bomb","bombs","fireMovingBomb","loopFireMovingBombs","MovingBomb","movingBombs","Wall","walls","MovingWall","movingWalls","directionChangeSeconds","directionChangeTimeout","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","drawImage","canvas","getContext","lineWidth","totalPoints","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","allInteractiveInstances","allCollisionInstances","collidingInstances","levelPoints","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","xTarget","yTarget","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","pointTwo","pointThree","pointFour","pointFive","pointSeven","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","moveBlockieAwayFromMovingWalls","checkCollisionsWithClass","collidingMovingWallInstance","checkTestInstancesColliding","updateAllInteractiveInstances","updateAllCollisionInstances","moveMovingHorizontalLasers","moveMovingVerticalLasers","moveMovingPassivePoints","moveMovingActivePoints","moveMovingBombs","moveMovingWalls","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawMovingPassivePoints","drawActivePoints","drawMovingActivePoints","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawMovingBombs","drawWalls","drawMovingWalls","drawPartyHats","classArray","checkInstancesColliding","checkCollisionsWithClasses","classesArray","currentClass","checkTestCollisionsWithClasses","instanceOneX","instanceOneY","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","createCountdownTimer","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xDir","yDir","lastAvailableX","lastAvailableY","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet currentLevelPoints = 0;\r\nlet totalPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet movingPassivePoints = [];\r\nlet activePoints = [];\r\nlet movingActivePoints = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet movingBombs = [];\r\nlet walls = [];\r\nlet movingWalls = [];\r\nlet partyHats = [];\r\n\r\n//Used in for loops to apply a function to many objects.\r\nlet allInstances = [];\r\nlet allInteractiveInstances = [];\r\nlet allCollisionInstances = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet levelPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.xTarget = this.x;\r\n        this.yTarget = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass MovingPassivePoint {\r\n    constructor(x, y, xSpeed, ySpeed, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingActivePoint {\r\n    constructor(x, y, xSpeed, ySpeed, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingBomb {\r\n    constructor(x, y, width, height, xSpeed, ySpeed) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Walls are always \"firing\" and visible.\r\n        this.state = \"firing\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass MovingWall {\r\n    constructor(x, y, width, height, xSpeed, ySpeed) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.xSpeed = xSpeed;\r\n        this.ySpeed = ySpeed;\r\n\r\n        //Walls are always \"firing\" and visible.\r\n        this.state = \"firing\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(oneHalf + blockieAdjustment, pointSix + blockieAdjustment);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, fullScreen),\r\n            createWall(fiveEigths, 0, threeEigths, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 0, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 1.5, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 3, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 4.5, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 6, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 7.5, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 9, 0, 12),\r\n            loopFireMovingWalls(threeEigths, -2 * 16, oneFourth, 2 * 16, 0, 1.5, 10.5, 0, 12)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 2 * 16, fullScreen),\r\n            createWall(2 * 16, 0, 10 * 16, 6 * 16),\r\n            createWall(20 * 16, 0, 10 * 16, 6 * 16),\r\n            createWall(2 * 16, 13 * 16, 10 * 16, 6 * 16),\r\n            createWall(20 * 16, 13 * 16, 10 * 16, 6 * 16),\r\n            createWall(2 * 16, 26 * 16, 10 * 16, 6 * 16),\r\n            createWall(20 * 16, 26 * 16, 10 * 16, 6 * 16),\r\n            createWall(30 * 16, 0, 2 * 16, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointEight - 8, 0),\r\n\r\n            fireContinuallyMovingWall(2 * 16, 6 * 16, 7 * 17, 7 * 16, 1.5, 0, 0, 1.25),\r\n            fireContinuallyMovingWall(23 * 16, 6 * 16, 7 * 17, 7 * 16, -1.5, 0, 0, 1.25),\r\n            fireContinuallyMovingWall(2 * 16, 19 * 16, 7 * 16, 7 * 16, 1.5, 0, 0, 1.25),\r\n            fireContinuallyMovingWall(23 * 16, 19 * 16, 7 * 16, 7 * 16, -1.5, 0, 0, 1.25),\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(oneHalf + blockieAdjustment, pointEight + blockieAdjustment);\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, threeEigths, oneEigth),\r\n            createWall(fiveEigths, 0, threeEigths, oneEigth),\r\n            createWall(0, sevenEigths, threeEigths, oneEigth),\r\n            createWall(fiveEigths, sevenEigths, threeEigths, oneEigth),\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n\r\n            loopFireBombs(0, oneEigth, oneEigth, threeFourths, 0, 0, 1000000),\r\n            loopFireBombs(sevenEigths, oneEigth, oneEigth, threeFourths, 0, 0, 1000000),\r\n\r\n            fireContinuallyMovingWall(oneEigth, oneEigth, oneFourth, oneFourth, 1.5, 0, 0, 2.9),\r\n            fireContinuallyMovingWall(fiveEigths, threeEigths, oneFourth, oneFourth, -1.5, 0, 0, 2.9),\r\n            fireContinuallyMovingWall(oneEigth, fiveEigths, oneFourth, oneFourth, 1.5, 0, 0, 2.9),\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(oneHalf + blockieAdjustment, pointOne + blockieAdjustment);\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, oneEigth),\r\n            createWall(0, oneEigth, sevenEigths, 10 * 16),\r\n            createWall(oneEigth, 14 * 16, 10 * 16, oneEigth),\r\n            createWall(oneEigth, 18 * 16, threeFourths, 10 * 16),\r\n            createActivePoint(pointOne - 8, oneHalf - 8, 0),\r\n            createPassivePoint(oneHalf - 8, oneHalf - 8, 5, 144),\r\n\r\n            loopFireMovingWalls(sevenEigths, -3 * 16, oneEigth, 2 * 16, 0, 2, 0, 1, 2.31),\r\n            loopFireMovingWalls(sevenEigths, 33 * 16, oneEigth, 2 * 16, 0, -2, 0, 1, 2.31),\r\n\r\n            loopFireMovingWalls(13 * 16, 14 * 16, 2 * 16, oneEigth, 2, 0, 0.65, 1.56, 1.75),\r\n\r\n            loopFireMovingWalls(-3 * 16, sevenEigths, 2 * 16, oneEigth, 2, 0, 1.7, 1, 2.31),\r\n            loopFireMovingWalls(33 * 16, sevenEigths, 2 * 16, oneEigth, -2, 0, 1.7, 1, 2.31)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(pointOne + blockieAdjustment, oneHalf + blockieAdjustment);\r\n\r\n        await Promise.all([\r\n            fireMovingWall(-33 * 16, 0, fullScreen, fullScreen, 1.2, 0, 0.5, 15),\r\n\r\n            fireMovingWall(0, 0, 2 * 16, threeEigths, 0, -0.2, 0, 10),\r\n            fireMovingWall(0, fiveEigths, 2 * 16, fullScreen, 0, -0.2, 0, 10),\r\n\r\n            fireMovingWall(2 * 16, 0, 2 * 16, threeEigths, 0, -0.35, 0, 10),\r\n            fireMovingWall(2 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.35, 0, 10),\r\n\r\n            fireMovingWall(4 * 16, 0, 2 * 16, threeEigths, 0, -0.45, 0, 10),\r\n            fireMovingWall(4 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.45, 0, 10),\r\n\r\n            fireMovingWall(6 * 16, 0, 2 * 16, threeEigths, 0, -0.5, 0, 10),\r\n            fireMovingWall(6 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.5, 0, 10),\r\n\r\n            fireMovingWall(8 * 16, 0, 2 * 16, threeEigths, 0, -0.55, 0, 10),\r\n            fireMovingWall(8 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.55, 0, 10),\r\n\r\n            fireMovingWall(10 * 16, 0, 2 * 16, threeEigths, 0, -0.5, 0, 10),\r\n            fireMovingWall(10 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.5, 0, 10),\r\n\r\n            fireMovingWall(12 * 16, 0, 2 * 16, threeEigths, 0, -0.45, 0, 10),\r\n            fireMovingWall(12 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.45, 0, 10),\r\n\r\n            fireMovingWall(14 * 16, 0, 2 * 16, threeEigths, 0, -0.35, 0, 10),\r\n            fireMovingWall(14 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.35, 0, 10),\r\n\r\n            fireMovingWall(16 * 16, 0, 2 * 16, threeEigths, 0, -0.2, 0, 10),\r\n            fireMovingWall(16 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.2, 0, 10),\r\n\r\n            fireMovingWall(18 * 16, 0, 2 * 16, threeEigths, 0, -0.1, 0, 10),\r\n            fireMovingWall(18 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.1, 0, 10),\r\n\r\n            fireMovingWall(20 * 16, 0, 2 * 16, threeEigths, 0, -0.15, 0, 10),\r\n            fireMovingWall(20 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.15, 0, 10),\r\n\r\n            fireMovingWall(22 * 16, 0, 2 * 16, threeEigths, 0, -0.27, 0, 10),\r\n            fireMovingWall(22 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.27, 0, 10),\r\n\r\n            fireMovingWall(24 * 16, 0, 2 * 16, threeEigths, 0, -0.4, 0, 10),\r\n            fireMovingWall(24 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.4, 0, 10),\r\n\r\n            fireMovingWall(26 * 16, 0, 2 * 16, threeEigths, 0, -0.5, 0, 10),\r\n            fireMovingWall(26 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.5, 0, 10),\r\n\r\n            fireMovingWall(28 * 16, 0, 2 * 16, threeEigths, 0, -0.55, 0, 10),\r\n            fireMovingWall(28 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.55, 0, 10),\r\n\r\n            fireMovingWall(30 * 16, 0, 2 * 16, threeEigths, 0, -0.6, 0, 10),\r\n            fireMovingWall(30 * 16, fiveEigths, 2 * 16, fullScreen, 0, -0.6, 0, 10),\r\n\r\n            createActivePoint(pointEight - 8, pointOne - 8, 5.1)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        moveBlockie(pointEight + blockieAdjustment, pointOne + blockieAdjustment);\r\n\r\n        await Promise.all([\r\n            createActivePoint(pointOne - 8, pointEight - 8, 0),\r\n\r\n            createWall(0, 0, sevenEigths, oneEigth),\r\n\r\n            fireContinuallyMovingWall(-fullScreen, oneEigth, fullScreen, oneEigth, 1.5, 0, 0, 4.98),\r\n            fireContinuallyMovingWall(oneEigth, oneEigth, fullScreen, oneEigth, 1.5, 0, 0, 4.98),\r\n\r\n            createWall(0, oneFourth, fullScreen, 2 * 16),\r\n\r\n            fireContinuallyMovingWall(-oneEigth, 10 * 16, fullScreen, oneEigth, -1.5, 0, 0, 4.98),\r\n            fireContinuallyMovingWall(fullScreen, 10 * 16, fullScreen, oneEigth, -1.5, 0, 0, 4.98),\r\n\r\n            createWall(0, 14 * 16, fullScreen, 2 * 16),\r\n\r\n            createWall(0, oneHalf, 2 * 16, oneEigth),\r\n            loopFireBombs(2 * 16, oneHalf, oneEigth, oneEigth, 0, 4, 1),\r\n            createWall(6 * 16, oneHalf, 2 * 16, oneEigth),\r\n            loopFireBombs(8 * 16, oneHalf, oneEigth, oneEigth, 3, 4, 1),\r\n            createWall(12 * 16, oneHalf, 2 * 16, oneEigth),\r\n            loopFireBombs(14 * 16, oneHalf, oneEigth, oneEigth, 0, 4, 1),\r\n            createWall(18 * 16, oneHalf, 2 * 16, oneEigth),\r\n            loopFireBombs(20 * 16, oneHalf, oneEigth, oneEigth, 3, 4, 1),\r\n            createWall(24 * 16, oneHalf, 2 * 16, oneEigth),\r\n            loopFireBombs(26 * 16, oneHalf, oneEigth, oneEigth, 0, 4, 1),\r\n            createWall(30 * 16, oneHalf, 2 * 16, oneEigth),\r\n\r\n            createWall(0, 20 * 16, fullScreen, 2 * 16),\r\n\r\n            loopFireBombs(0, 22 * 16, oneFourth, oneEigth, 0, 0, 1000000),\r\n            fireContinuallyMovingWall(oneFourth, 22 * 16, 2 * 16, oneEigth, 2, 0, 0, 1.9),\r\n            loopFireBombs(threeFourths, 22 * 16, oneFourth, oneEigth, 0, 0, 1000000),\r\n\r\n            createWall(0, 26 * 16, fullScreen, 2 * 16),\r\n\r\n            loopFireBombs(0, sevenEigths, fullScreen, oneEigth, 0, 2, 1)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        console.log(`Level ${currentLevel} completed.`);\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelThree() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFour() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelFive() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSix() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelSeven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEight() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelNine() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTen() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelEleven() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwelve() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllInstances();\r\n    for (let i = 0; i < allInstances.length; i++) {\r\n        rejectInstances(allInstances[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        resetBlockieState();\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene, 0.17);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    updateLevelPoints(currentLevel);\r\n    currentLevelPoints = 0;\r\n    calculateTotalPoints();\r\n\r\n    currentLevel++;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n        case 3:\r\n            levelThree();\r\n            break;\r\n        case 4:\r\n            levelFour();\r\n            break;\r\n        case 5:\r\n            levelFive();\r\n            break;\r\n        case 6:\r\n            levelSix();\r\n            break;\r\n        case 7:\r\n            levelSeven();\r\n            break;\r\n        case 8:\r\n            levelEight();\r\n            break;\r\n        case 9:\r\n            levelNine();\r\n            break;\r\n        case 10:\r\n            levelTen();\r\n            break;\r\n        case 11:\r\n            levelEleven();\r\n            break;\r\n        case 12:\r\n            levelTwelve();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Placed here to draw Blockie with a PartyHat during increaseLevel().\r\n            partyHats.splice(0);\r\n\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                resetBlockieState();\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n};\r\n\r\n//Adjusts Blockie's location to prevent wall clipping in screen transitions.\r\nfunction moveBlockie(x, y) {\r\n    blockie.x = x;\r\n    blockie.y = y;\r\n};\r\n\r\nfunction moveBlockieAwayFromMovingWalls() {\r\n    //Loops through each moving wall that Blockie is touching and pushes Blockie away from it.\r\n    checkCollisionsWithClass(movingWalls);\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        let collidingMovingWallInstance = collidingInstances[i];\r\n        preventingMovement = false;\r\n\r\n        //Checks if Blockie would be not touching the current moving wall if he moved with the wall's xSpeed, and if so, \r\n        //\"pushes\" Blockie there.\r\n        preventingMovement = false;\r\n        checkTestInstancesColliding(blockie, blockie.x + collidingMovingWallInstance.xSpeed, blockie.y, collidingMovingWallInstance);\r\n        if (!preventingMovement) {\r\n            blockie.x += collidingMovingWallInstance.xSpeed;\r\n            break;\r\n        };\r\n\r\n        //Checks if Blockie would be not touching the current moving wall if he moved with the wall's ySpeed, and if so, \r\n        //\"pushes\" Blockie there.\r\n        preventingMovement = false;\r\n        checkTestInstancesColliding(blockie, blockie.x, blockie.y + collidingMovingWallInstance.ySpeed, collidingMovingWallInstance);\r\n        if (!preventingMovement) {\r\n            blockie.y += collidingMovingWallInstance.ySpeed;\r\n            break;\r\n        };\r\n    };\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingPassivePoint(x, y, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingPassivePoint(x, y, xSpeed, ySpeed, firingSeconds);\r\n    movingPassivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingPassivePoints.indexOf(instance);\r\n            movingPassivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingActivePoint(x, y, xSpeed, ySpeed, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingActivePoint(x, y, xSpeed, ySpeed);\r\n    movingActivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingHorizontalLaser(y, height, speed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingVerticalLaser(x, width, speed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireBomb(x, y, width, height, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingBombs(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingBomb(x, y, width, height, xSpeed, ySpeed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingBomb(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingBomb(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingBomb(x, y, width, height, xSpeed, ySpeed);\r\n    movingBombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingBombs.indexOf(instance);\r\n            movingBombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingWalls(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Fires the first instance with 0 waiting seconds because the initialWaitingSeconds has already been waited for.\r\n    await fireMovingWall(x, y, width, height, xSpeed, ySpeed, 0, firingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingWall(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingWall(x, y, width, height, xSpeed, ySpeed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingWall(x, y, width, height, xSpeed, ySpeed);\r\n    movingWalls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingWalls.indexOf(instance);\r\n            movingWalls.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireContinuallyMovingWall(x, y, width, height, xSpeed, ySpeed, initialWaitingSeconds, directionChangeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingWall(x, y, width, height, xSpeed, ySpeed);\r\n    movingWalls.push(instance);\r\n\r\n    //Creates a timeout for the instance's direction changing and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Continually switches the sign of the wall's speed over each interval of the set parameter of time.\r\n        function directionChangeTimeout() {\r\n            instance.timeout = setTimeout(() => {\r\n                directionChangeTimeout();\r\n\r\n                //Makes the wall switch directions.\r\n                instance.xSpeed *= -1;\r\n                instance.ySpeed *= -1;\r\n            }, directionChangeSeconds * 1000);\r\n        };\r\n\r\n        directionChangeTimeout();\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllInstances() {\r\n    allInstances = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        movingPassivePoints,\r\n        activePoints,\r\n        movingActivePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        movingBombs,\r\n        walls,\r\n        movingWalls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveInstances() {\r\n    allInteractiveInstances = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        movingPassivePoints,\r\n        activePoints,\r\n        movingActivePoints,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        movingBombs\r\n    ];\r\n};\r\n\r\nfunction updateAllCollisionInstances() {\r\n    allCollisionInstances = [\r\n        walls,\r\n        movingWalls\r\n    ];\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingPassivePoints() {\r\n    for (let i = 0; i < movingPassivePoints.length; i++) {\r\n        if (movingPassivePoints[i].state !== \"warning\") {\r\n            movingPassivePoints[i].x += movingPassivePoints[i].xSpeed;\r\n            movingPassivePoints[i].y += movingPassivePoints[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingActivePoints() {\r\n    for (let i = 0; i < movingActivePoints.length; i++) {\r\n        if (movingActivePoints[i].state !== \"warning\") {\r\n            movingActivePoints[i].x += movingActivePoints[i].xSpeed;\r\n            movingActivePoints[i].y += movingActivePoints[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingBombs() {\r\n    for (let i = 0; i < movingBombs.length; i++) {\r\n        if (movingBombs[i].state !== \"warning\") {\r\n            movingBombs[i].x += movingBombs[i].xSpeed;\r\n            movingBombs[i].y += movingBombs[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves instances by adding speed to their location every step.\r\nfunction moveMovingWalls() {\r\n    for (let i = 0; i < movingWalls.length; i++) {\r\n        if (movingWalls[i].state !== \"warning\") {\r\n            movingWalls[i].x += movingWalls[i].xSpeed;\r\n            movingWalls[i].y += movingWalls[i].ySpeed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingPassivePoints() {\r\n    for (let i = 0; i < movingPassivePoints.length; i++) {\r\n        let currentInstance = movingPassivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingActivePoints() {\r\n    for (let i = 0; i < movingActivePoints.length; i++) {\r\n        let currentInstance = movingActivePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingBombs() {\r\n    for (let i = 0; i < movingBombs.length; i++) {\r\n        let currentInstance = movingBombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawMovingWalls() {\r\n    for (let i = 0; i < movingWalls.length; i++) {\r\n        let currentInstance = movingWalls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    collidingInstances.splice(0);\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkCollisionsWithClasses(classesArray) {\r\n    collidingInstances.splice(0);\r\n\r\n    for (let i = 0; i < classesArray.length; i++) {\r\n        let currentClass = classesArray[i];\r\n        for (let i = 0; i < currentClass.length; i++) {\r\n            checkInstancesColliding(blockie, currentClass[i]);\r\n        };\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClasses(instanceOneX, instanceOneY, classesArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classesArray.length; i++) {\r\n        let currentClass = classesArray[i];\r\n        for (let i = 0; i < currentClass.length; i++) {\r\n            checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, currentClass[i]);\r\n        };\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    } else if (instanceOneX < 0 || canvas.width < (instanceOneX + instanceOne.width)) {\r\n        preventingMovement = true;\r\n    } else if (instanceOneY < 0 || canvas.height < (instanceOneY + instanceOne.height)) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Point Functions\r\n\r\nfunction updateLevelPoints(currentLevel) {\r\n    levelPoints[currentLevel - 1] = currentLevelPoints;\r\n};\r\n\r\nfunction calculateTotalPoints() {\r\n    totalPoints = 0;\r\n    for (let i = 0; i < levelPoints.length; i++) {\r\n        totalPoints += levelPoints[i];\r\n    };\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene, secondsPerFrame) {\r\n    let cutsceneSideLength = 512;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 0, 0, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Other Instances' Movements\r\n\r\n        moveMovingPassivePoints();\r\n        moveMovingActivePoints();\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n        moveMovingBombs();\r\n        moveMovingWalls();\r\n\r\n        //Collision Handling\r\n\r\n        //\"Pushes\" Blockie away from walls that just moved to his location. Needed to allow Blockie to move.\r\n        moveBlockieAwayFromMovingWalls();\r\n\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.xTarget = blockie.x + blockie.dx;\r\n                blockie.yTarget = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.xTarget = blockie.x;\r\n                blockie.yTarget = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            updateAllCollisionInstances();\r\n            checkTestCollisionsWithClasses(blockie.xTarget, blockie.yTarget, allCollisionInstances);\r\n\r\n            //Moves Blockie to an open space if he is trying to move into a collision instance.\r\n            if (preventingMovement) {\r\n                //Resets Blockie's target location to his current location because there is a 100% chance that space is clear.\r\n                blockie.xTarget = blockie.x;\r\n                blockie.yTarget = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xDir = Math.sign(blockie.dx);\r\n                let yDir = Math.sign(blockie.dy);\r\n                let lastAvailableX = blockie.xTarget;\r\n                let lastAvailableY = blockie.yTarget;\r\n\r\n                //Finds the last free space in the direction that Blockie is moving in. Stops checking for more spaces once \r\n                //Blockie has moved past his dx or dy each frame.\r\n                while (Math.abs(xChange) < Math.abs(blockie.dx) || Math.abs(yChange) < Math.abs(blockie.dy)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dx) - xChange < 1) {\r\n                        xChange += blockie.dx - xChange;\r\n                    } else {\r\n                        xChange += xDir;\r\n                    };\r\n\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dy) - yChange < 1) {\r\n                        yChange += blockie.dy - yChange;\r\n                    } else {\r\n                        yChange += yDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget + xChange, blockie.yTarget + yChange, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableX = blockie.xTarget + xChange;\r\n                        lastAvailableY = blockie.yTarget + yChange;\r\n                    };\r\n                };\r\n\r\n                //Sets Blockie's location to the last available one in the direction that he's moving in.\r\n                blockie.xTarget = lastAvailableX;\r\n                blockie.yTarget = lastAvailableY;\r\n\r\n                //Resets dx and dy to be relative to his new position.\r\n                blockie.dx = blockie.x + blockie.dx - blockie.xTarget;\r\n                blockie.dy = blockie.y + blockie.dy - blockie.yTarget;\r\n                xChange = 0;\r\n                yChange = 0;\r\n\r\n                //Independently checks along the x-axis for an available space after moving in Blockie's exact direction (this\r\n                //only activates when moving diagonally and allows for \"sliding\").\r\n                while (Math.abs(xChange) < Math.abs(blockie.dx)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dx) - xChange < 1) {\r\n                        xChange += blockie.dx - xChange;\r\n                    } else {\r\n                        xChange += xDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget + xChange, blockie.yTarget, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableX = blockie.xTarget + xChange;\r\n                    };\r\n                };\r\n\r\n                blockie.xTarget = lastAvailableX;\r\n\r\n                //Independently checks along the y-axis for an available space after moving in Blockie's exact direction (this\r\n                //only activates when moving diagonally and allows for \"sliding\").\r\n                while (Math.abs(yChange) < Math.abs(blockie.dy)) {\r\n                    //Allows for Blockie to move in non-integer increments.\r\n                    if (Math.abs(blockie.dy) - yChange < 1) {\r\n                        yChange += blockie.dy - yChange;\r\n                    } else {\r\n                        yChange += yDir;\r\n                    };\r\n\r\n                    //Checks if each increment is empty and replaces the last available location with it.\r\n                    checkTestCollisionsWithClasses(blockie.xTarget, blockie.yTarget + yChange, allCollisionInstances);\r\n                    if (!preventingMovement) {\r\n                        lastAvailableY = blockie.yTarget + yChange;\r\n                    };\r\n                };\r\n\r\n                blockie.yTarget = lastAvailableY;\r\n            };\r\n\r\n            blockie.x = blockie.xTarget;\r\n            blockie.y = blockie.yTarget;\r\n        };\r\n\r\n        //Collision Handling\r\n\r\n        //\"Pushes\" Blockie away from walls that he moved to.\r\n        moveBlockieAwayFromMovingWalls();\r\n\r\n        //Is Blockie Being Crushed?\r\n\r\n        //Checks if Blockie is colliding after everything has moved, and if so, restarts the level.\r\n        checkTestCollisionsWithClasses(blockie.x, blockie.y, allCollisionInstances);\r\n        if (preventingMovement) {\r\n            restartLevel(\"died\");\r\n        };\r\n\r\n        //Interactivity Handling\r\n\r\n        updateAllInteractiveInstances();\r\n        checkCollisionsWithClasses(allInteractiveInstances);\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"MovingPassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = movingPassivePoints.indexOf(collidingPoint);\r\n                movingPassivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\" || collidingInstances[i].constructor.name === \"MovingActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllInstances();\r\n                for (let i = 0; i < allInstances.length; i++) {\r\n                    resolveInstances(allInstances[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawPassivePoints();\r\n        drawMovingPassivePoints();\r\n        drawActivePoints();\r\n        drawMovingActivePoints();\r\n        drawWalls();\r\n        drawMovingWalls();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n        drawMovingBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}