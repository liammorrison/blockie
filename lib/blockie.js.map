{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","fireVerticalLaser","console","log","levelOne","gameState","i","currentPromiseRejectFunctions","length","currentTimers","clearTimeout","splice","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","horizontalLasers","verticalLasers","diplayingGameOverScreen","resumeGame","window","requestAnimationFrame","controlRestartingLevel","restartLevel","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","spBlockiePlaying","createElement","src","spBlockieDestructing","Player","spriteSideLength","x","y","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","horizontalLaser","visible","verticalLaser","blockieX","blockieY","gameLoop","addCurrentPromiseRejectFunction","promise","push","addCurrentTimer","timer","removeCurrentPromiseRejectFunction","currentPromiseRejectFunctionIndex","indexOf","removeCurrentTimer","currentTimerIndex","totalSeconds","instance","setWarningTimers","endFiring","instanceIndex","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","drawHorizontalLasers","currentInstance","fillRect","drawVerticalLasers","initializeKeyInputs","addEventListener","e","keyCode","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","cos","sin","floor","drawingLoop","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\n\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(300, 16, 2),\r\n            fireHorizontalLaser(100, 16, 2),\r\n            fireVerticalLaser(100, 16, 2)\r\n        ]);\r\n\r\n        await fireHorizontalLaser(100, 16, 2);\r\n\r\n        console.log(\"Level completed.\");\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Calls the reject function on every currently-running promise so that they stop hurting performance.\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    //Removes all references to instances from arrays.\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    //Restarts the game after the timer ends.\r\n    let resumeGame = setTimeout(() => {\r\n        diplayingGameOverScreen = false;\r\n        gameState = \"playing\";\r\n        blockie.state = \"playing\";\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"Restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running promise to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(promise) {\r\n    currentPromiseRejectFunctions.push(promise);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise from the array of currently-running promises (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentPromiseRejectFunction(promise) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(promise);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireHorizontalLaser(y, height, totalSeconds) {\r\n    //Creates a horizontal laser instance and sets all of its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the Horizontal laser's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireVerticalLaser(x, width, totalSeconds) {\r\n    //Creates a horizontal laser instance and sets all of its key-value pairs.\r\n    let instance = new verticalLaser();\r\n    verticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the Horizontal laser's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n}\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillRect(currentInstance.x + 8, currentInstance.y, 8, currentInstance.height);\r\n                context.fillRect(currentInstance.width - 16, currentInstance.y, 8, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 8);\r\n                context.fillRect(currentInstance.x, currentInstance.height - 16, currentInstance.width, 8);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of Blockie more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    } else {\r\n        //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n        blockie.testXLocation = blockie.x;\r\n        blockie.testYLocation = blockie.y;\r\n    }\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.width;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.height;\r\n    };\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n    };\r\n\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, verticalLasers[i]);\r\n    };\r\n\r\n    if (colliding) {\r\n        restartLevel();\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (blockie.state === \"playing\") {\r\n            blockie.sprite = spBlockiePlaying;\r\n            //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n            //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n            blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n        } else if (blockie.state === \"destructing\") {\r\n            blockie.sprite = spBlockieDestructing;\r\n\r\n            let endAnimateBlockieDestructing = setTimeout(() => {\r\n                clearInterval(animateBlockieDestructing);\r\n            }, 1000);\r\n\r\n            let animateBlockieDestructing = setInterval(() => {\r\n                blockie.sx += blockie.spriteSideLength;\r\n            }, 0.5 * 1000);\r\n        }\r\n\r\n        context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n    }\r\n\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}