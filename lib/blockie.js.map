{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","oneHalf","blockieAdjustment","createCountdownTimer","cancelAwaitChain","Promise","all","createWall","threeEigths","sevenEigths","oneEigth","oneFourth","fullScreen","createActivePoint","pointOne","createPassivePoint","pointEight","fireMovingVerticalLaser","loopFireBombs","fiveEigths","threeFourths","fireBomb","destroyCountdownTimer","console","log","currentLevel","increaseLevel","levelOne","error","levelTwo","levelThree","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","currentLevelPoints","gameState","blockie","state","sx","displayMessage","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","updateLevelPoints","calculateTotalPoints","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","initialWaitingSeconds","fireHorizontalLaser","loopFireHorizontalLasers","HorizontalLaser","horizontalLasers","width","fireVerticalLaser","loopFireVerticalLasers","VerticalLaser","verticalLasers","speed","fireMovingHorizontalLaser","loopFireMovingHorizontalLasers","MovingHorizontalLaser","movingHorizontalLasers","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","Bomb","bombs","Wall","walls","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","strokeStyle","drawImage","strokeRect","canvas","getContext","lineWidth","totalPoints","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","collidingInstances","levelPoints","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","pointTwo","pointThree","pointFour","pointFive","pointSix","pointSeven","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xTestingDistance","yTestingDistance","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet currentLevelPoints = 0;\r\nlet totalPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\nlet levelPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(oneHalf + blockieAdjustment, oneHalf + blockieAdjustment);\r\n\r\n        createCountdownTimer(35);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(threeEigths, 0, 2 * 16, sevenEigths),\r\n            createWall(oneEigth, 0, oneFourth, 14 * 16),\r\n            createWall(oneEigth, 18 * 16, oneFourth, 10 * 16),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createActivePoint(pointOne - 8, pointOne - 8, 0),\r\n            createPassivePoint(pointOne - 8, pointEight - 8, 0, 9),\r\n\r\n            fireMovingVerticalLaser(27 * 16, 16, -1, 2, 9),\r\n            fireMovingVerticalLaser(29 * 16, 16, -1, 2, 9),\r\n            fireMovingVerticalLaser(fullScreen - 16, 16, -1, 2, 9)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(oneEigth, 0, 10 * 16, sevenEigths),\r\n            createWall(18 * 16, 0, oneHalf, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n\r\n            loopFireBombs(0, 0, oneEigth, oneEigth, 0, 0.5, 0.5),\r\n            loopFireBombs(0, oneEigth, oneEigth, oneEigth, 0.5, 0.5, 0.5),\r\n            loopFireBombs(0, oneFourth, oneEigth, oneEigth, 1, 0.5, 0.5),\r\n            loopFireBombs(0, threeEigths, oneEigth, oneEigth, 1.5, 0.5, 0.5),\r\n            loopFireBombs(0, oneHalf, oneEigth, oneEigth, 0, 0.5, 0.5),\r\n            loopFireBombs(0, fiveEigths, oneEigth, oneEigth, 0.5, 0.5, 0.5),\r\n            loopFireBombs(0, threeFourths, oneEigth, oneEigth, 1, 0.5, 0.5),\r\n            loopFireBombs(0, sevenEigths, oneEigth, oneEigth, 1.5, 0.5, 0.5),\r\n\r\n            loopFireBombs(14 * 16, 0, oneEigth, oneEigth, 1.5, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, oneEigth, oneEigth, oneEigth, 1, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, oneFourth, oneEigth, oneEigth, 0.5, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, threeEigths, oneEigth, oneEigth, 0, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, oneHalf, oneEigth, oneEigth, 1.5, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, fiveEigths, oneEigth, oneEigth, 1, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, threeFourths, oneEigth, oneEigth, 0.5, 0.5, 0.5),\r\n            loopFireBombs(14 * 16, sevenEigths, oneEigth, oneEigth, 0, 0.5, 0.5),\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, fullScreen),\r\n            createWall(18 * 16, 0, 14 * 16, oneFourth),\r\n            createWall(18 * 16, oneFourth, 2 * 16, 12 * 16),\r\n            createWall(18 * 16, threeFourths, 6 * 16, oneFourth),\r\n            createWall(threeFourths, oneFourth, oneFourth, threeFourths),\r\n            createActivePoint(oneHalf - 8, 28 * 16 - 8, 0),\r\n            createPassivePoint(22 * 16 - 8, 10 * 16 - 8, 0, 5)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, 14 * 16),\r\n            createWall(0, 14 * 16, oneFourth, 20 * 16),\r\n            createWall(threeFourths, 14 * 16, oneFourth, 20 * 16),\r\n            createWall(oneFourth, 14 * 16, 6 * 16, 6 * 16),\r\n            createWall(18 * 16, 14 * 16, 6 * 16, 6 * 16),\r\n            createWall(oneFourth, 24 * 16, 6 * 16, 8 * 16),\r\n            createWall(18 * 16, 24 * 16, 6 * 16, 8 * 16),\r\n            createWall(14 * 16, pointEight, 4 * 16, 2 * 16),\r\n\r\n            fireBomb(14 * 16, 26 * 16, 4 * 16, 4 * 16, 0.5, 0.5),\r\n\r\n            fireBomb(14 * 16, 20 * 16, 4 * 16, 4 * 16, 2, 0.5),\r\n\r\n            fireBomb(14 * 16, 26 * 16, 4 * 16, 4 * 16, 3.5, 0.5),\r\n            fireBomb(8 * 16, 20 * 16, 4 * 16, 4 * 16, 3.5, 0.5),\r\n            fireBomb(20 * 16, 20 * 16, 4 * 16, 4 * 16, 3.5, 0.5),\r\n\r\n            createActivePoint(oneHalf - 8, oneHalf - 8, 5)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            fireBomb(16, oneEigth, 30 * 16, oneFourth, 0, 1),\r\n            fireBomb(16, fiveEigths, 30 * 16, oneFourth, 0.15, 1),\r\n\r\n            fireBomb(0, 16, oneEigth, 30 * 16, 2.2, 1),\r\n            fireBomb(threeEigths, 16, oneFourth, 30 * 16, 2.3, 1),\r\n            fireBomb(sevenEigths, 16, oneEigth, 30 * 16, 2.45, 1),\r\n\r\n            createActivePoint(oneHalf - 8, 8 * 16, 5.35),\r\n            fireBomb(oneEigth, 16, oneFourth, 30 * 16, 4.75, 1),\r\n            fireBomb(fiveEigths, 16, oneFourth, 30 * 16, 4.9, 1),\r\n            fireBomb(16, 0, 30 * 16, oneEigth, 5.05, 1),\r\n            fireBomb(16, threeEigths, 30 * 16, oneFourth, 5.2, 1),\r\n            fireBomb(16, sevenEigths, 30 * 16, oneEigth, 5.35, 1)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        destroyCountdownTimer();\r\n\r\n        console.log(`Level ${currentLevel} completed.`);\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\nasync function levelThree() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(`Level ${currentLevel} restarted.`);\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        blockie.state = \"playing\";\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    updateLevelPoints(currentLevel);\r\n    currentLevelPoints = 0;\r\n    calculateTotalPoints();\r\n\r\n    currentLevel++;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n        case 3:\r\n            levelThree();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Placed here to draw Blockie with a PartyHat during increaseLevel().\r\n            partyHats.splice(0);\r\n\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Prevents dashing immediatley after restarting the game.\r\n                delete keysDown[16];\r\n                delete keysDown[32];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireHorizontalLasers(y, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireHorizontalLaser(y, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireVerticalLasers(x, width, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireVerticalLaser(x, width, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 32, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 32, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Point Functions\r\n\r\nfunction updateLevelPoints(currentLevel) {\r\n    levelPoints[currentLevel - 1] = currentLevelPoints;\r\n};\r\n\r\nfunction calculateTotalPoints() {\r\n    totalPoints = 0;\r\n    for (let i = 0; i < levelPoints.length; i++) {\r\n        totalPoints += levelPoints[i];\r\n    };\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene) {\r\n    let secondsPerFrame = 0.15;\r\n    let cutsceneSideLength = 128;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            //Draws a border around the small cutscene in the center of the canvas.\r\n            context.strokeStyle = \"#FFFFFF\";\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 192, 192, cutsceneSideLength, cutsceneSideLength);\r\n            context.strokeRect(192, 192, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            //Updates Blockie's location if he's touching a wall to the nearest open location.\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                    xChange = blockie.dx - xTestingDistance;\r\n                } else {\r\n                    xChange = Math.sign(blockie.dx);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    xTestingDistance += xChange;\r\n\r\n                    if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                        xChange = blockie.dx - xTestingDistance;\r\n                    } else {\r\n                        xChange = Math.sign(blockie.dx);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                    yChange = blockie.dy - yTestingDistance;\r\n                } else {\r\n                    yChange = Math.sign(blockie.dy);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                        yChange = blockie.dy - yTestingDistance;\r\n                    } else {\r\n                        yChange = Math.sign(blockie.dy);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}