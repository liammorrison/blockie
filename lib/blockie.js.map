{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","console","log","levelOne","y","seconds","promiseTimer","instance","horizontalLaser","horizontalLasers","push","instanceIndex","indexOf","resolve","setTimeout","removeCurrentTimer","splice","addCurrentTimer","document","getElementById","context","getContext","fillStyle","KeysPressed","xInput","yInput","colliding","gameState","currentTimers","Player","spriteSideLength","x","sx","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","createElement","src","blockieX","blockieY","window","requestAnimationFrame","gameLoop","restartLevel","clearRect","innerHTML","i","length","clearTimeout","controlRestartingLevel","timer","currentTimerIndex","drawHorizontalLasers","currentInstance","fillRect","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","addEventListener","e","keyCode","cos","sin","floor","round","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\n\r\n//Variables\r\n\r\nlet KeysPressed = {};\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\n\r\n//Arrays\r\n\r\nlet currentTimers = [];\r\nlet horizontalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        //Loads Blockie\"s sprite map. It is one large sprite map to avoid loading many individual \r\n        //sprite files.\r\n        this.sprite = document.createElement(\"img\");\r\n        this.sprite.src = \"../images/blockie.png\";\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 100;\r\n        this.width = canvas.width;\r\n        this.height = 32;\r\n    }\r\n}\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n    await Promise.all([\r\n        fireHorizontalLaser(300, 16, 4),\r\n        fireHorizontalLaser(100, 16, 3)\r\n    ]);\r\n\r\n    await fireHorizontalLaser(100, 16, 3);\r\n\r\n    console.log(\"level is done\");\r\n};\r\n\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    window.requestAnimationFrame(gameLoop);\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n}\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to then restart the current level.\r\nfunction restartLevel() {\r\n    //Draws only the game over screen.\r\n    gameState = \"restartingLevel\";\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n\r\n    //Stops all timers (prevents promises from continuing).\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    //Destroys every instance.\r\n    currentTimers.splice(0);\r\n    horizontalLasers.splice(0);\r\n\r\n    setTimeout(() => {\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        gameState = \"playing\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a timer from the array of currently-running arrays (preferably after it's inside code has been ran).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance of a laser and adds it to an array so that it can be drawn and used in collision checking more easily.\r\n//When the timer ends, the instance is deleted.\r\nasync function fireHorizontalLaser(y, height, seconds) {\r\n    let promiseTimer;\r\n\r\n    //Creates an instance of an object, adds it to the end of its object's array, and assigns its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    let instanceIndex = horizontalLasers.indexOf(instance);\r\n    horizontalLasers[instanceIndex].y = y;\r\n    horizontalLasers[instanceIndex].height = height;\r\n\r\n    //Creates a timer that resolves promises in the levelController and deletes the instance from its array (so that it isn't drawn\r\n    //or collided with anymore).\r\n    return new Promise((resolve) => {\r\n        promiseTimer = setTimeout(() => {\r\n            removeCurrentTimer(promiseTimer);\r\n            instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            console.log(\"resolved\");\r\n            resolve(\"resolved\");\r\n        }, seconds * 1000);\r\n        addCurrentTimer(promiseTimer);\r\n    });\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    }\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Determines if two objects are \"colliding\".\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width)) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height)) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\nconst blockie = new Player();\r\n\r\n//Game loop\r\n\r\n//Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n//that capital letters can't cause unwanted movements.\r\ndocument.addEventListener(\"keydown\", e => {\r\n    KeysPressed[e.keyCode] = true;\r\n});\r\n\r\n//Deletes all currently unpressed keys from the KeysPressed object.\r\ndocument.addEventListener(\"keyup\", e => {\r\n    delete KeysPressed[e.keyCode];\r\n});\r\n\r\nfunction gameLoop() {\r\n    //Clears the canvas so that it can later be redrawn with updated locations and instances.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //Blockie's Movement\r\n\r\n    //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n    xInput = 0;\r\n    yInput = 0;\r\n\r\n    //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n    //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n    //clockwise direction continuously.\r\n    blockie.angleMovingDegrees = -180;\r\n\r\n    //Each key changes the angle of Blockie's movement.\r\n    if (KeysPressed[68]) {\r\n        xInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[65]) {\r\n        xInput -= 1;\r\n    };\r\n\r\n    if (KeysPressed[83]) {\r\n        yInput += 1;\r\n    };\r\n\r\n    if (KeysPressed[87]) {\r\n        yInput -= 1;\r\n    };\r\n\r\n    if (xInput !== 0 || yInput !== 0) {\r\n        //Finds the angle that Blockie is moving in radians based on the inputs.\r\n        blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n        //Converted to make the direction of the sprite more discernible.\r\n        blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n        //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n        blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n        blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n        //The SubPixels store the directional velocity.\r\n        blockie.xSubPixel += blockie.dx;\r\n        blockie.ySubPixel += blockie.dy;\r\n\r\n        //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n        blockie.dx = Math.floor(blockie.xSubPixel);\r\n        blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n        //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n        blockie.xSubPixel -= blockie.dx;\r\n        blockie.ySubPixel -= blockie.dy;\r\n\r\n        //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n        blockie.testXLocation = blockie.x + blockie.dx;\r\n        blockie.testYLocation = blockie.y + blockie.dy;\r\n    } else {\r\n        //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n        blockie.testXLocation = blockie.x;\r\n        blockie.testYLocation = blockie.y;\r\n    }\r\n\r\n    //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n    //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n    if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n        blockie.x = blockie.testXLocation;\r\n    } else if (blockie.testXLocation <= 0) {\r\n        blockie.x = 0;\r\n    } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n        blockie.x = canvas.width - blockie.width;\r\n    };\r\n\r\n    if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n        blockie.y = blockie.testYLocation;\r\n    } else if (blockie.testYLocation <= 0) {\r\n        blockie.y = 0;\r\n    } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n        blockie.y = canvas.height - blockie.height;\r\n    };\r\n\r\n    //Drawing\r\n\r\n    //sx is the location on the blockie.png sprite map and it determines the sprite's direction facing. \r\n    //It starts at the idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n    blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n\r\n    drawHorizontalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n        if (colliding) {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}