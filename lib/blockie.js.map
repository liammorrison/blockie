{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","fireVerticalLaser","fireBomb","fireMovingHorizontalLaser","fireMovingVerticalLaser","console","log","levelOne","gameState","i","currentPromiseRejectFunctions","length","currentTimers","clearTimeout","splice","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","horizontalLasers","verticalLasers","bombs","movingHorizontalLasers","movingVerticalLasers","diplayingGameOverScreen","resumeGame","window","requestAnimationFrame","controlRestartingLevel","restartLevel","getContext","fillStyle","strokeStyle","lineWidth","KeysPressed","xInput","yInput","colliding","shiftPressed","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","Player","spriteSideLength","x","y","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","horizontalLaser","visible","verticalLaser","bomb","movingHorizontalLaser","movingVerticalLaser","blockieX","blockieY","gameLoop","addCurrentPromiseRejectFunction","promise","push","addCurrentTimer","timer","removeCurrentPromiseRejectFunction","currentPromiseRejectFunctionIndex","indexOf","removeCurrentTimer","currentTimerIndex","totalSeconds","instance","setWarningTimers","endFiring","instanceIndex","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawHorizontalLasers","currentInstance","strokeRect","fillRect","drawVerticalLasers","drawBombs","drawMovingHorizontalLasers","beginPath","moveTo","lineTo","Math","sign","fill","drawMovingVerticalLasers","checkCollisionsWithClass","classArray","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","drawingLoop","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\ncontext.strokeStyle = \"#FFFFFF\";\r\ncontext.lineWidth = 5;\r\n\r\n//Variables\r\n\r\nlet KeysPressed = [];\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet shiftPressed = false;\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\n\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\nclass movingHorizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n        this.speed = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass movingVerticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n        this.speed = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(300, 16, 2),\r\n            fireHorizontalLaser(100, 16, 2),\r\n            fireVerticalLaser(100, 16, 2)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(100, 16, 2),\r\n            fireBomb(200, 200, 64, 64, 2),\r\n            fireMovingHorizontalLaser(350, 16, -2, 3),\r\n            fireMovingVerticalLaser(100, 32, 1, 4)\r\n        ]);\r\n\r\n        console.log(\"Level completed.\");\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n    colliding = false;\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n    shiftPressed = false;\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Calls the reject function on every currently-running promise so that they stop hurting performance.\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    //Removes all references to instances from arrays.\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    bombs.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    //Restarts the game after the timer ends.\r\n    let resumeGame = setTimeout(() => {\r\n        diplayingGameOverScreen = false;\r\n        gameState = \"playing\";\r\n        blockie.state = \"playing\";\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"Restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running promise to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(promise) {\r\n    currentPromiseRejectFunctions.push(promise);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise from the array of currently-running promises (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentPromiseRejectFunction(promise) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(promise);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireHorizontalLaser(y, height, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireVerticalLaser(x, width, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new verticalLaser();\r\n    verticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireBomb(x, y, width, height, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new bomb();\r\n    bombs.push(instance);\r\n    instance.x = x;\r\n    instance.y = y;\r\n    instance.width = width;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireMovingHorizontalLaser(y, height, speed, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new movingHorizontalLaser();\r\n    movingHorizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n    instance.speed = speed;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireMovingVerticalLaser(x, width, speed, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new movingVerticalLaser();\r\n    movingVerticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n    instance.speed = speed;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    };\r\n};\r\n\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x + 8, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y);\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y);\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 24, currentInstance.y);\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.sign(currentInstance.speed));\r\n                context.lineTo(currentInstance.width - 8, currentInstance.y);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x, currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x, currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.sign(currentInstance.speed), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x, currentInstance.height - 8);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    checkCollisionsWithClass(horizontalLasers);\r\n\r\n    checkCollisionsWithClass(verticalLasers);\r\n\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n\r\n    if (colliding) {\r\n        restartLevel();\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (blockie.state === \"playing\") {\r\n            blockie.sprite = spBlockiePlaying;\r\n            //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n            //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n            blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n        } else if (blockie.state === \"recoveringFromDash\") {\r\n            blockie.sprite = spBlockieRecoveringFromDash;\r\n            blockie.sx = 0;\r\n        } else if (blockie.state === \"destructing\") {\r\n            blockie.sprite = spBlockieDestructing;\r\n\r\n            let endAnimateBlockieDestructing = setTimeout(() => {\r\n                clearInterval(animateBlockieDestructing);\r\n                removeCurrentTimer(animateBlockieDestructing);\r\n                removeCurrentTimer(endAnimateBlockieDestructing);\r\n            }, 1.5 * 1000);\r\n            addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n            let animateBlockieDestructing = setInterval(() => {\r\n                blockie.sx += blockie.spriteSideLength;\r\n            }, 0.5 * 1000);\r\n            addCurrentTimer(animateBlockieDestructing);\r\n        };\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n    }\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}