{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","Promise","all","fireMovingHorizontalLaser","height","fireMovingVerticalLaser","console","log","increaseLevel","levelOne","currentLevel","error","levelTwo","gameState","i","currentTimers","length","clearTimeout","splice","rejectInstances","waitingTimers","points","horizontalLasers","verticalLasers","movingHorizontalLasers","movingVerticalLasers","bombs","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","diplayingGameOverScreen","resumeGame","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","instanceAffecting","instanceAffectingObjectArray","warningSeconds","timer","visible","externalReject","setWarningTimers","x","y","waitingSeconds","activeSeconds","setWaitingTimer","pointInstance","point","push","pointInstanceIndex","indexOf","externalResolve","createPoint","horizontalLaserInstance","horizontalLaser","horizontalLaserInstanceIndex","fireHorizontalLaser","verticalLaserInstance","verticalLaser","verticalLaserInstanceIndex","fireVerticalLaser","speed","movingHorizontalLaserInstance","movingHorizontalLaser","movingHorizontalLaserInstanceIndex","movingVerticalLaserInstance","movingVerticalLaser","movingVerticalLaserInstanceIndex","bombInstance","bomb","instance","bombInstanceIndex","fireBomb","getContext","lineWidth","KeysPressed","permanentPoints","currentLevelPoints","xInput","yInput","colliding","recoveringFromDash","allowDashAgain","dashDistance","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","collidingInstances","Player","spriteSideLength","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","waitingTimer","blockieX","blockieY","objectArray","initialArrayLength","addCurrentTimer","removeCurrentTimer","currentTimerIndex","waitingTimerInstance","waitingTimerInstanceIndex","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","Math","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage","drawPoints","currentInstance","strokeStyle","strokeRect","fillStyle","fillRect","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","min","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","checkCollisionsWithClass","classArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","constructor","name","collidingPoint","instanceIndex","drawingLoop"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet KeysPressed = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 80;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\nlet waitingTimers = [];\r\nlet points = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\n\r\nlet currentTimers = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass waitingTimer {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 24;\r\n        this.height = 24;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass movingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass movingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timer;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, 22 * 16);\r\n\r\n        await Promise.all([\r\n            fireMovingHorizontalLaser(canvas.height - 16, 16, -0.75, 0, 6),\r\n            fireMovingHorizontalLaser(0, 16, 0.5, 2, 4),\r\n            fireMovingHorizontalLaser(100, 16, 0.5, 3, 3),\r\n            fireMovingVerticalLaser(canvas.width - 16, 16, -0.75, 0, 6),\r\n            fireMovingVerticalLaser(0, 16, 0.5, 2, 4),\r\n            fireMovingVerticalLaser(100, 16, 0.5, 3, 3)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        console.log(\"Level 2 completed.\");\r\n        currentLevel++;\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    };\r\n\r\n    currentTimers.splice(0);\r\n\r\n    rejectInstances(waitingTimers);\r\n    rejectInstances(points);\r\n    rejectInstances(horizontalLasers);\r\n    rejectInstances(verticalLasers);\r\n    rejectInstances(movingHorizontalLasers);\r\n    rejectInstances(movingVerticalLasers);\r\n    rejectInstances(bombs);\r\n\r\n    //Removes all references to instances from arrays.\r\n    waitingTimers.splice(0);\r\n    points.splice(0);\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    movingHorizontalLasers.splice(0);\r\n    movingVerticalLasers.splice(0);\r\n    bombs.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let resumeGame = setTimeout(() => {\r\n            //Restarts the game.\r\n            diplayingGameOverScreen = false;\r\n            gameState = \"playing\";\r\n            blockie.state = \"playing\";\r\n            controlLevel();\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n            window.requestAnimationFrame(gameLoop);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction increaseLevel() {\r\n    currentLevel++;\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    permanentPoints += currentLevelPoints;\r\n\r\n    controlLevel();\r\n}\r\n\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timers and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timer);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers.\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a waitingTimer instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimer(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let waitingTimerInstance = new waitingTimer();\r\n    waitingTimers.push(waitingTimerInstance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        waitingTimerInstance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let waitingTimerInstanceIndex = waitingTimers.indexOf(waitingTimerInstance);\r\n            waitingTimers.splice(waitingTimerInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n\r\n        waitingTimerInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 2 times before firing. All warning timers are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimers(instanceAffecting, instanceAffectingObjectArray) {\r\n    let warningSeconds = 1;\r\n\r\n    //Each timer sets the affected instance's timer and reject function equal to a new \"blinking\" timer for a bit.\r\n    await new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n\r\n    //The function finally resolves once the second \"blink\" ends. The affected instance can then collide with Blockie.\r\n    return new Promise((resolve, reject) => {\r\n        instanceAffecting.timer = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n\r\n        instanceAffecting.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPoint(x, y, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let pointInstance = new point(x, y);\r\n    points.push(pointInstance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(pointInstance, points);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        pointInstance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let pointInstanceIndex = points.indexOf(pointInstance);\r\n            points.splice(pointInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        pointInstance.externalResolve = resolve;\r\n        pointInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let horizontalLaserInstance = new horizontalLaser(y, height);\r\n    horizontalLasers.push(horizontalLaserInstance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(horizontalLaserInstance, horizontalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        horizontalLaserInstance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let horizontalLaserInstanceIndex = horizontalLasers.indexOf(horizontalLaserInstance);\r\n            horizontalLasers.splice(horizontalLaserInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        horizontalLaserInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let verticalLaserInstance = new verticalLaser(x, width);\r\n    verticalLasers.push(verticalLaserInstance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(verticalLaserInstance, verticalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        verticalLaserInstance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let verticalLaserInstanceIndex = verticalLasers.indexOf(verticalLaserInstance);\r\n            verticalLasers.splice(verticalLaserInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        verticalLaserInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let movingHorizontalLaserInstance = new movingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(movingHorizontalLaserInstance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(movingHorizontalLaserInstance, movingHorizontalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        movingHorizontalLaserInstance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let movingHorizontalLaserInstanceIndex = movingHorizontalLasers.indexOf(movingHorizontalLaserInstance);\r\n            movingHorizontalLasers.splice(movingHorizontalLaserInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        movingHorizontalLaserInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let movingVerticalLaserInstance = new movingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(movingVerticalLaserInstance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(movingVerticalLaserInstance, movingVerticalLasers);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        movingVerticalLaserInstance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let movingVerticalLaserInstanceIndex = movingVerticalLasers.indexOf(movingVerticalLaserInstance);\r\n            movingVerticalLasers.splice(movingVerticalLaserInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        movingVerticalLaserInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, activeSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimer(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let bombInstance = new bomb(x, y, width, height);\r\n    bombs.push(bombInstance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimers(bombInstance, bombs);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        instance.timer = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let bombInstanceIndex = bombs.indexOf(bombInstance);\r\n            bombs.splice(bombInstanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, activeSeconds * 1000);\r\n\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        bombInstance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimer(animateBlockieDestructing);\r\n            removeCurrentTimer(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimer(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPoints() {\r\n    for (let i = 0; i < points.length; i++) {\r\n        let currentInstance = points[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"Lime\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"Lime\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x + 12, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 28, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 12, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 28, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 8, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 8, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 24);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 8);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 24);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9C17\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"##FF9C17\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = dashDistance;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    checkCollisionsWithClass(points);\r\n    checkCollisionsWithClass(horizontalLasers);\r\n    checkCollisionsWithClass(verticalLasers);\r\n    checkCollisionsWithClass(movingHorizontalLasers);\r\n    checkCollisionsWithClass(movingVerticalLasers);\r\n    checkCollisionsWithClass(bombs);\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"point\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            //Resolves the point's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timer);\r\n            let instanceIndex = points.indexOf(collidingPoint);\r\n            points.splice(instanceIndex, 1);\r\n        } else {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawPoints();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}