{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","blockie","width","center","height","Promise","all","createPassivePoint","createActivePoint","fireBomb","maxEdge","fireMovingVerticalLaser","fireMovingHorizontalLaser","console","log","increaseLevel","levelOne","currentLevel","error","levelTwo","gameState","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","canvas","document","getElementById","innerHTML","displayingGameOverScreen","resumePlaying","keysDown","removeEventListener","controlLevel","window","requestAnimationFrame","gameLoop","restartLevel","instanceAffecting","instanceAffectingObjectArray","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","y","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","push","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","HorizontalLaser","horizontalLasers","fireHorizontalLaser","VerticalLaser","verticalLasers","fireVerticalLaser","speed","MovingHorizontalLaser","movingHorizontalLasers","MovingVerticalLaser","movingVerticalLasers","Bomb","bombs","getContext","lineWidth","permanentPoints","currentLevelPoints","xInput","yInput","colliding","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","waitingTimeouts","collidingInstances","Player","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","spriteSideLength","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","moveMovingHorizontalLasers","moveMovingVerticalLasers","drawBlockie","fillStyle","fillRect","Math","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawImage","drawPassivePoints","currentInstance","strokeStyle","strokeRect","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","min","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","checkCollisionsWithClass","classArray","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","cos","sin","floor","constructor","name","collidingPoint","drawingLoop"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\nlet displayingGameOverScreen = false;\r\nlet keysDown = [];\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet colliding = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 88;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n        this.spriteSideLength = 16;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet center = canvas.width / 2;\r\nlet maxEdge = canvas.width;\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(8 * 16 - blockie.width / 2, center - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            createPassivePoint(center - 8, center - 8, 0, 6),\r\n            createActivePoint(23 * 16, center - 8, 0, 6),\r\n            fireBomb(2, 2, maxEdge - 4, 11 * 16 - 4, 0, 6),\r\n            fireBomb(2, 21 * 16 + 2, maxEdge - 4, 11 * 16 - 4, 0, 6),\r\n\r\n            fireMovingVerticalLaser(0, 32, 1, 1, 5)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createActivePoint(8 * 16, center - 8, 0, 5),\r\n            fireBomb(2, 2, maxEdge - 4, 11 * 16 - 4, 0, 5),\r\n            fireBomb(2, 21 * 16 + 2, maxEdge - 4, 11 * 16 - 4, 0, 5),\r\n\r\n            fireMovingVerticalLaser(30 * 16, 32, -1.75, 1, 4)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createPassivePoint(center - 8, 23 * 16, 0, 2.5),\r\n            fireMovingHorizontalLaser(8 * 16 - 8, 32, 1.4, 0, 1.75),\r\n            fireMovingVerticalLaser(0, 32, 1.4, 0, 3.5),\r\n\r\n            fireMovingHorizontalLaser(maxEdge - 32, 32, -1.4, 1.75, 3.5),\r\n\r\n            createPassivePoint(23 * 16, center - 8, 2.25, 2.5),\r\n\r\n            fireMovingVerticalLaser(maxEdge - 32, 32, -1.4, 3.5, 3.5),\r\n\r\n            createPassivePoint(center - 8, 8 * 16, 4.5, 2.5),\r\n\r\n            fireMovingHorizontalLaser(0, 32, 1.4, 5.25, 1.75)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            createActivePoint(center - 8, center - 8, 0, 6),\r\n            fireBomb(center - 32, center - 32, 64, 64, 0, 2)\r\n        ]);\r\n\r\n        console.log(\"Level 1 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n\r\n        console.log(\"Level 2 completed.\");\r\n        currentLevel++;\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    currentLevelPoints = 0;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    displayingGameOverScreen = true;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Restarts the game.\r\n                document.removeEventListener(\"keydown\", resumePlaying);\r\n                displayingGameOverScreen = false;\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n                controlLevel();\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n                window.requestAnimationFrame(gameLoop);\r\n                resolve(\"resolved\");\r\n            } else {\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\nfunction increaseLevel() {\r\n    currentLevel++;\r\n\r\n    //Points are only made permanent once a level is completed.\r\n    permanentPoints += currentLevelPoints;\r\n\r\n    controlLevel();\r\n}\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n}\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting, instanceAffectingObjectArray) {\r\n    let warningSeconds = 1;\r\n\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, passivePoints);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y, firingSeconds);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, activePoints);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = activePoints.indexOf(instance);\r\n            activePoints.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, horizontalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, verticalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingHorizontalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, movingVerticalLasers);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance, bombs);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [waitingTimeouts, passivePoints, activePoints, horizontalLasers, verticalLasers, movingHorizontalLasers,\r\n        movingVerticalLasers, bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction drawBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState !== \"restartingLevel\") {\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.spriteSideLength;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#FFFFFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#741EFF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkSpritesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Micellaneous Functions\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each WASD key changes the angle of Blockie's movement.\r\n        //Right\r\n        if (keysDown[68]) {\r\n            xInput++;\r\n        };\r\n\r\n        //Left\r\n        if (keysDown[65]) {\r\n            xInput--;\r\n        };\r\n\r\n        //Down\r\n        if (keysDown[83]) {\r\n            yInput++;\r\n        };\r\n\r\n        //Up\r\n        if (keysDown[87]) {\r\n            yInput--;\r\n        };\r\n\r\n        if (keysDown[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n            //animation.\r\n            initializeDash();\r\n        } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n            //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n            //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Right\r\n            if (keysDown[39]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[37]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[40]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[38]) {\r\n                yInput--;\r\n            };\r\n\r\n            initializeDash();\r\n        } else {\r\n            blockie.speed = 2;\r\n        };\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n    //Other Instances' Movements\r\n\r\n    moveMovingHorizontalLasers();\r\n    moveMovingVerticalLasers();\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n    collidingInstances.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        checkCollisionsWithClass(allObjects[i]);\r\n    };\r\n\r\n    for (let i = 0; i < collidingInstances.length; i++) {\r\n        if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n            let collidingPoint = collidingInstances[i];\r\n            collidingPoint.externalResolve();\r\n            clearTimeout(collidingPoint.timeout);\r\n            let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n            passivePoints.splice(instanceIndex, 1);\r\n        } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n            //Adds points to the current level's total.\r\n            currentLevelPoints++;\r\n\r\n            updateAllObjects();\r\n            for (let i = 0; i < allObjects.length; i++) {\r\n                resolveInstances(allObjects[i]);\r\n            };\r\n\r\n            //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n            break;\r\n        } else {\r\n            restartLevel();\r\n            break;\r\n        };\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!displayingGameOverScreen) {\r\n        //Updates the amount of points in the gameInfo div.\r\n        document.getElementById(\"currentPoints\").innerHTML = \"Points: \" + (permanentPoints + currentLevelPoints);\r\n\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        drawBlockie();\r\n    };\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);"]}