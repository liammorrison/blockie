{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","oneHalf","blockieAdjustment","sevenEigths","createCountdownTimer","cancelAwaitChain","Promise","all","createWall","fullScreen","createActivePoint","createPassivePoint","loopFireBombs","pointEight","fireMovingHorizontalLaser","pointOne","loopFireMovingHorizontalLasers","destroyCountdownTimer","console","log","increaseLevel","levelOne","error","levelTwo","reason","i","currentTimeouts","length","clearTimeout","splice","currentIntervals","clearInterval","updateAllObjects","allObjects","rejectInstances","currentLevelPoints","gameState","blockie","state","sx","displayMessage","controlLevel","playCutscene","spCountdownDestructionScene","restartLevel","angleMovingDegrees","currentLevel","permanentPoints","resolve","reject","partyHatInstance","PartyHat","partyHats","push","animateFinishedLevelHat","y","Math","min","height","window","requestAnimationFrame","message","drawGameOverScreen","setTimeout","document","getElementById","innerHTML","resumePlaying","keysDown","instanceAffecting","warningSeconds","externalResolve","externalReject","timeout","visible","setWarningTimeouts","x","waitingSeconds","firingSeconds","setWaitingTimeout","instance","PassivePoint","passivePoints","remainingFiringSeconds","remainingFiringSecondsInterval","setInterval","addCurrentInterval","removeCurrentInterval","instanceIndex","indexOf","ActivePoint","activePoints","initialWaitingSeconds","fireHorizontalLaser","loopFireHorizontalLasers","HorizontalLaser","horizontalLasers","width","fireVerticalLaser","loopFireVerticalLasers","VerticalLaser","verticalLasers","speed","MovingHorizontalLaser","movingHorizontalLasers","fireMovingVerticalLaser","loopFireMovingVerticalLasers","MovingVerticalLaser","movingVerticalLasers","fireBomb","Bomb","bombs","Wall","walls","scene","secondsPerFrame","cutsceneSideLength","cutscenesx","lastFramesx","naturalWidth","cutscene","drawCutscene","context","strokeStyle","drawImage","strokeRect","canvas","getContext","lineWidth","xInput","yInput","preventingMovement","arrowLeftAlreadyPressed","arrowUpAlreadyPressed","arrowRightAlreadyPressed","arrowDownAlreadyPressed","shiftAlreadyPressed","spaceAlreadyPressed","pAlreadyPressed","recoveringFromDash","allowDashAgain","dashDistance","dashRecoverySeconds","allowDashAgainSeconds","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","gameScale","countdown","waitingTimeouts","collidingInstances","Player","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","targetXLocation","targetYLocation","sprite","remainingDashSeconds","WaitingTimeout","totalFiringSeconds","oneEigth","oneFourth","threeEigths","fiveEigths","threeFourths","pointTwo","pointThree","pointFour","pointFive","pointSix","pointSeven","blockieX","blockieY","resolveInstances","objectArray","initialArrayLength","addCurrentTimeout","removeCurrentTimeout","currentTimeoutIndex","interval","currentIntervalIndex","initializeDash","endDashRecovery","remainingDashSecondsInterval","resetAllowDashAgain","resetBlockieState","updateAllInteractiveObjects","moveMovingHorizontalLasers","moveMovingVerticalLasers","animateBlockie","fillStyle","fillRect","round","endAnimateBlockieDestructing","animateBlockieDestructing","drawBlockie","drawPassivePoints","currentInstance","drawActivePoints","drawHorizontalLasers","drawVerticalLasers","drawMovingHorizontalLasers","beginPath","moveTo","abs","sign","lineTo","max","fill","drawMovingVerticalLasers","drawBombs","drawWalls","drawPartyHats","checkCollisionsWithClass","classArray","checkInstancesColliding","checkTestCollisionsWithClass","instanceOneX","instanceOneY","checkTestInstancesColliding","instanceOne","instanceTwo","xColliding","yColliding","initializeKeyInputs","addEventListener","e","keyCode","scaleGame","innerWidth","innerHeight","gameContainer","style","transform","totalSeconds","seconds","countdownTimerContainer","visibility","currentMinutes","floor","currentSeconds","countdownTimer","calculateAngleRadians","atan2","convertRadiansToDegrees","radians","PI","gameLoop","cos","sin","xChange","yChange","xTestingDistance","yTestingDistance","constructor","name","collidingPoint","drawingLoop","clearRect"],"mappings":";;AA4SA;;uEACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEQA,wCAAgBC,UAAUC,iBAA1B,EAA6CC,cAAcD,iBAA3D;;AAEAE,6CAAqB,GAArB;;AAEAC,2CAAmB,KAAnB;;AANR;AAAA,+BAQcC,QAAQC,GAAR,CAAY,CACdC,WAAW,CAAX,EAAc,CAAd,EAAiB,KAAK,EAAtB,EAA0BC,UAA1B,CADc,EAEdD,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,IAAI,EAA3B,EAA+B,KAAK,EAApC,CAFc,EAGdA,WAAW,KAAK,EAAhB,EAAoB,KAAK,EAAzB,EAA6B,IAAI,EAAjC,EAAqC,IAAI,EAAzC,CAHc,EAIdA,WAAW,KAAK,EAAhB,EAAoB,KAAK,EAAzB,EAA6B,IAAI,EAAjC,EAAqC,IAAI,EAAzC,CAJc,EAKdA,WAAW,KAAK,EAAhB,EAAoB,KAAK,EAAzB,EAA6B,IAAI,EAAjC,EAAqC,IAAI,EAAzC,CALc,EAMdA,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,KAAK,EAA5B,EAAgCC,UAAhC,CANc,EAOdC,kBAAkBT,UAAU,CAA5B,EAA+BA,UAAU,CAAzC,EAA4C,CAA5C,CAPc,EAQdU,mBAAmBV,UAAU,CAA7B,EAAgC,KAAK,EAAL,GAAU,CAA1C,EAA6C,CAA7C,EAAgD,EAAhD,CARc,CAAZ,CARd;;AAAA;;AAmBQI,2CAAmB,KAAnB;;AAnBR;AAAA,+BAqBcC,QAAQC,GAAR,CAAY,CACdC,WAAW,CAAX,EAAc,CAAd,EAAiBC,UAAjB,EAA6B,IAAI,EAAjC,CADc,EAEdD,WAAW,CAAX,EAAc,IAAI,EAAlB,EAAsBC,UAAtB,EAAkC,IAAI,EAAtC,CAFc,EAGdD,WAAW,CAAX,EAAc,KAAK,EAAnB,EAAuBC,UAAvB,EAAmC,IAAI,EAAvC,CAHc,EAIdD,WAAW,CAAX,EAAc,KAAK,EAAnB,EAAuBC,UAAvB,EAAmC,KAAK,EAAxC,CAJc,EAKdD,WAAW,CAAX,EAAc,CAAd,EAAiB,IAAI,EAArB,EAAyBC,UAAzB,CALc,EAMdD,WAAW,IAAI,EAAf,EAAmB,CAAnB,EAAsB,IAAI,EAA1B,EAA8BC,UAA9B,CANc,EAOdD,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,IAAI,EAA3B,EAA+BC,UAA/B,CAPc,EAQdD,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,IAAI,EAA3B,EAA+BC,UAA/B,CARc,EASdD,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,IAAI,EAA3B,EAA+BC,UAA/B,CATc,EAUdD,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,IAAI,EAA3B,EAA+BC,UAA/B,CAVc,EAWdE,mBAAmB,IAAI,EAAJ,GAAS,CAA5B,EAA+BV,UAAU,CAAzC,EAA4C,CAA5C,EAA+C,EAA/C,CAXc,EAYdU,mBAAmB,KAAK,EAAL,GAAU,CAA7B,EAAgCV,UAAU,CAA1C,EAA6C,CAA7C,EAAgD,EAAhD,CAZc,EAadW,cAAc,IAAI,EAAlB,EAAsB,IAAI,EAA1B,EAA8B,IAAI,EAAlC,EAAsC,IAAI,EAA1C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,CAbc,EAcdA,cAAc,KAAK,EAAnB,EAAuB,IAAI,EAA3B,EAA+B,IAAI,EAAnC,EAAuC,IAAI,EAA3C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAdc,EAedA,cAAc,IAAI,EAAlB,EAAsB,IAAI,EAA1B,EAA8B,IAAI,EAAlC,EAAsC,IAAI,EAA1C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,CAfc,EAgBdA,cAAc,KAAK,EAAnB,EAAuB,IAAI,EAA3B,EAA+B,IAAI,EAAnC,EAAuC,IAAI,EAA3C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAhBc,EAiBdA,cAAc,KAAK,EAAnB,EAAuB,IAAI,EAA3B,EAA+B,IAAI,EAAnC,EAAuC,IAAI,EAA3C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAjBc,EAkBdA,cAAc,IAAI,EAAlB,EAAsB,KAAK,EAA3B,EAA+B,IAAI,EAAnC,EAAuC,IAAI,EAA3C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,CAlBc,EAmBdA,cAAc,KAAK,EAAnB,EAAuB,KAAK,EAA5B,EAAgC,IAAI,EAApC,EAAwC,IAAI,EAA5C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,CAnBc,EAqBdF,kBAAkBT,UAAU,CAA5B,EAA+B,IAAI,EAAJ,GAAS,CAAxC,EAA2C,CAA3C,CArBc,CAAZ,CArBd;;AAAA;;AA6CQI,2CAAmB,KAAnB;;AA7CR;AAAA,+BA+CcC,QAAQC,GAAR,CAAY,CACdC,WAAW,CAAX,EAAc,CAAd,EAAiB,KAAK,EAAtB,EAA0BC,UAA1B,CADc,EAEdD,WAAW,KAAK,EAAhB,EAAoB,CAApB,EAAuB,KAAK,EAA5B,EAAgCC,UAAhC,CAFc,EAGdC,kBAAkBT,UAAU,CAA5B,EAA+BY,aAAa,CAA5C,EAA+C,CAA/C,CAHc,EAIdC,0BAA0BL,aAAa,EAAvC,EAA2C,EAA3C,EAA+C,CAAC,GAAhD,EAAqD,CAArD,EAAwD,CAAxD,CAJc,CAAZ,CA/Cd;;AAAA;;AAsDQJ,2CAAmB,KAAnB;;AAtDR;AAAA,+BAwDcC,QAAQC,GAAR,CAAY,CACdG,kBAAkBT,UAAU,CAA5B,EAA+Bc,WAAW,CAA1C,EAA6C,CAA7C,CADc,EAEdC,+BAA+B,CAA/B,EAAkC,EAAlC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAFc,EAGdA,+BAA+B,CAA/B,EAAkC,EAAlC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAHc,EAIdA,+BAA+B,CAA/B,EAAkC,EAAlC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAJc,EAKdA,+BAA+B,CAA/B,EAAkC,EAAlC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CALc,CAAZ,CAxDd;;AAAA;;AAgEQX,2CAAmB,KAAnB;;AAEAY;;AAEAC,gCAAQC,GAAR,CAAY,oBAAZ;AACAC;AArER;AAAA;;AAAA;AAAA;AAAA;;AAuEQF,gCAAQC,GAAR,CAAY,oBAAZ;;AAvER;AAwEK;;AAxEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeE,Q;;;;;AA2Ef;;wEACA;AAAA;AAAA;AAAA;AAAA;AACI,4BAAI,CAEH,CAFD,CAEE,OAAOC,KAAP,EAAc;AACZJ,oCAAQC,GAAR,CAAY,oBAAZ;AACH;;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,Q;;;;;AAmBf;;wEACA,kBAA4BC,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI;AACA,6BAASC,CAAT,GAAa,CAAb,EAAgBA,IAAIC,gBAAgBC,MAApC,EAA4CF,GAA5C,EAAiD;AAC7CG,yCAAaF,gBAAgBD,CAAhB,CAAb;AACH;;AAEDC,wCAAgBG,MAAhB,CAAuB,CAAvB;;AAEA;AACA,6BAASJ,EAAT,GAAa,CAAb,EAAgBA,KAAIK,iBAAiBH,MAArC,EAA6CF,IAA7C,EAAkD;AAC9CM,0CAAcD,iBAAiBL,EAAjB,CAAd;AACH;;AAEDK,yCAAiBD,MAAjB,CAAwB,CAAxB;;AAEAG;AACA,6BAASP,GAAT,GAAa,CAAb,EAAgBA,MAAIQ,WAAWN,MAA/B,EAAuCF,KAAvC,EAA4C;AACxCS,4CAAgBD,WAAWR,GAAX,CAAhB;AACH;;AAEDR;;AAEA;AACAkB,6CAAqB,CAArB;;AAEA;;AAzBJ,8BA0BQX,WAAW,MA1BnB;AAAA;AAAA;AAAA;;AA2BQY,oCAAY,6BAAZ;;AAEA;AACAC,gCAAQC,KAAR,GAAgB,aAAhB;AACAD,gCAAQE,EAAR,GAAa,CAAb;;AA/BR;AAAA,+BAiCcC,eAAe,mCAAf,CAjCd;;AAAA;AAAA;AAAA;;AAAA;AAAA,8BAkCehB,WAAW,YAlC1B;AAAA;AAAA;AAAA;;AAmCQa,gCAAQC,KAAR,GAAgB,SAAhB;AACAG;AApCR;AAAA;;AAAA;AAAA,8BAqCejB,WAAW,gBArC1B;AAAA;AAAA;AAAA;;AAsCQY,oCAAY,iBAAZ;AAtCR;AAAA,+BAuCcM,aAAaC,2BAAb,CAvCd;;AAAA;AAAA;AAAA,+BAwCcH,eAAe,8BAAf,CAxCd;;AAAA;AAyCK;;AAzCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,Y;;;;;;wEA4Cf;AAAA;AAAA;AAAA;AAAA;AACIR,oCAAY,gBAAZ;;AAEAC,gCAAQQ,kBAAR,GAA6B,CAAC,GAA9B;AACAC;AACA;AACAC,2CAAmBZ,kBAAnB;AACAA,6CAAqB,CAArB;;AAEA;AATJ;AAAA,+BAUU,IAAI7B,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIC,mBAAmB,IAAIC,QAAJ,EAAvB;AACAC,sCAAUC,IAAV,CAAeH,gBAAf;;AAEA,qCAASI,uBAAT,GAAmC;AAC/BJ,iDAAiBK,CAAjB,IAAsBC,KAAKC,GAAL,CAAS,CAAT,EAAapB,QAAQkB,CAAR,GAAYL,iBAAiBK,CAA7B,GAAiCL,iBAAiBQ,MAA/D,CAAtB;;AAEA,oCAAIR,iBAAiBK,CAAjB,GAAqBL,iBAAiBQ,MAAtC,KAAiDrB,QAAQkB,CAA7D,EAAgE;AAC5D;AACAI,2CAAOC,qBAAP,CAA6BN,uBAA7B;AACH,iCAHD,MAGO;AACHF,8CAAUvB,MAAV,CAAiB,CAAjB;AACAmB,4CAAQ,UAAR;AACH;AACJ;;AAEDW,mCAAOC,qBAAP,CAA6BN,uBAA7B;AACH,yBAjBK,CAVV;;AAAA;AAAA;AAAA,+BA6BUd,eAAe,0BAAf,CA7BV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAepB,a;;;;;AAgGf;;wEACA,kBAA8ByC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEU,IAAIvD,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACnC,gCAAIa,qBAAqBC,WAAW,YAAM;AACtC;AACAC,yCAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDL,OAAxD;AACAzB,4CAAY,mBAAZ;AACAY,wCAAQ,UAAR;AACH,6BALwB,EAKtB,IALsB,CAAzB;AAMH,yBAPK,CAFV;;AAAA;AAAA;AAAA,+BAWiB,IAAI1C,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA,qCAASkB,aAAT,GAAyB;AACrB,oCAAIC,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAApB,EAAkC;AAC9B;AACA,2CAAOA,SAAS,EAAT,CAAP;AACA,2CAAOA,SAAS,EAAT,CAAP;;AAEAJ,6CAASC,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwD,EAAxD;;AAEA9B,gDAAY,SAAZ;AACAC,4CAAQC,KAAR,GAAgB,SAAhB;;AAEAG;;AAEAO,4CAAQ,UAAR;AACH,iCAbD,MAaO;AACH;AACAW,2CAAOC,qBAAP,CAA6BO,aAA7B;AACH;AACJ;;AAEDR,mCAAOC,qBAAP,CAA6BO,aAA7B;AACH,yBAvBY,CAXjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe3B,c;;;;;AA0Gf;AACA;;wEACA,kBAAkC6B,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACIC,sCAFR,GAEyB,CAFzB;AAAA;AAAA,+BAIU,IAAIhE,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAoB,8CAAkBE,eAAlB,GAAoCvB,OAApC;AACAqB,8CAAkBG,cAAlB,GAAmCvB,MAAnC;;AAEAoB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzCM,kDAAkBK,OAAlB,GAA4B,KAA5B;;AAEA1B,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBsB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAJV;;AAAA;AAAA,6BAiBQjE,gBAjBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAmBU,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAoB,8CAAkBE,eAAlB,GAAoCvB,OAApC;AACAqB,8CAAkBG,cAAlB,GAAmCvB,MAAnC;;AAEAoB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzCM,kDAAkBK,OAAlB,GAA4B,IAA5B;;AAEA1B,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBsB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAnBV;;AAAA;AAAA,6BAgCQjE,gBAhCR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkCU,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACnC;AACAoB,8CAAkBE,eAAlB,GAAoCvB,OAApC;AACAqB,8CAAkBG,cAAlB,GAAmCvB,MAAnC;;AAEAoB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzCM,kDAAkBK,OAAlB,GAA4B,KAA5B;;AAEA1B,wCAAQ,UAAR;AACH,6BAJ2B,EAIzBsB,iBAAiB,IAAjB,GAAwB,IAJC,CAA5B;AAKH,yBAVK,CAlCV;;AAAA;AAAA,6BA+CQjE,gBA/CR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkDiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACAoB,8CAAkBE,eAAlB,GAAoCvB,OAApC;AACAqB,8CAAkBG,cAAlB,GAAmCvB,MAAnC;;AAEAoB,8CAAkBI,OAAlB,GAA4BV,WAAW,YAAM;AACzC;AACAM,kDAAkB/B,KAAlB,GAA0B,QAA1B;AACA+B,kDAAkBK,OAAlB,GAA4B,IAA5B;AACA1B,wCAAQ,UAAR;AACH,6BAL2B,EAKzBsB,iBAAiB,IAAjB,GAAwB,IALC,CAA5B;AAMH,yBAXY,CAlDjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,kB;;;;;AAgEf;;wEACA,kBAAkCC,CAAlC,EAAqCrB,CAArC,EAAwCsB,cAAxC,EAAwDC,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAIC,YAAJ,CAAiBL,CAAjB,EAAoBrB,CAApB,EAAuBuB,aAAvB,CARnB;;AASII,sCAAc7B,IAAd,CAAmB2B,QAAnB;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;;AAEA;AACA;AACA+B,qCAASG,sBAAT,GAAkCL,aAAlC;AACA,gCAAIM,iCAAiCC,YAAY,YAAM;AACnDL,yCAASG,sBAAT,IAAmC,KAAnC;AACH,6BAFoC,EAElC,CAFkC,CAArC;AAGAG,+CAAmBF,8BAAnB;;AAEAJ,qCAASP,OAAT,GAAmBV,WAAW,YAAM;AAChCwB,sDAAsBH,8BAAtB;;AAEA;AACA,oCAAII,gBAAgBN,cAAcO,OAAd,CAAsBT,QAAtB,CAApB;AACAE,8CAAcrD,MAAd,CAAqB2D,aAArB,EAAoC,CAApC;AACAxC,wCAAQ,UAAR;AACH,6BAPkB,EAOhB8B,gBAAgB,IAPA,CAAnB;AAQH,yBArBY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAenE,kB;;;;;AA0Cf;;wEACA,kBAAiCiE,CAAjC,EAAoCrB,CAApC,EAAuCsB,cAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUE,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAIU,WAAJ,CAAgBd,CAAhB,EAAmBrB,CAAnB,CARnB;;AASIoC,qCAAatC,IAAb,CAAkB2B,QAAlB;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;AACH,yBAJY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAevC,iB;;;;;AAyBf;;wEACA,kBAAwC6C,CAAxC,EAA2CG,MAA3C,EAAmDkC,qBAAnD,EAA0Ef,cAA1E,EAA0FC,aAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBa,qBAAlB,CADV;;AAAA;AAAA,4BAIYvF,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKcwF,oBAAoBtC,CAApB,EAAuBG,MAAvB,EAA+BmB,cAA/B,EAA+CC,aAA/C,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAegB,wB;;;;;AAYf;;yEACA,mBAAmCvC,CAAnC,EAAsCG,MAAtC,EAA8CmB,cAA9C,EAA8DC,aAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAIe,eAAJ,CAAoBxC,CAApB,EAAuBG,MAAvB,CARnB;;AASIsC,yCAAiB3C,IAAjB,CAAsB2B,QAAtB;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;;AAEA+B,qCAASP,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAIyB,gBAAgBQ,iBAAiBP,OAAjB,CAAyBT,QAAzB,CAApB;AACAgB,iDAAiBnE,MAAjB,CAAwB2D,aAAxB,EAAuC,CAAvC;AACAxC,wCAAQ,UAAR;AACH,6BALkB,EAKhB8B,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAee,mB;;;;;AAgCf;;yEACA,mBAAsCjB,CAAtC,EAAyCqB,KAAzC,EAAgDL,qBAAhD,EAAuEf,cAAvE,EAAuFC,aAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBa,qBAAlB,CADV;;AAAA;AAAA,4BAIYvF,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKc6F,kBAAkBtB,CAAlB,EAAqBqB,KAArB,EAA4BpB,cAA5B,EAA4CC,aAA5C,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeqB,sB;;;;;AAYf;;yEACA,mBAAiCvB,CAAjC,EAAoCqB,KAApC,EAA2CpB,cAA3C,EAA2DC,aAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAIoB,aAAJ,CAAkBxB,CAAlB,EAAqBqB,KAArB,CARnB;;AASII,uCAAehD,IAAf,CAAoB2B,QAApB;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;;AAEA+B,qCAASP,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAIyB,gBAAgBa,eAAeZ,OAAf,CAAuBT,QAAvB,CAApB;AACAqB,+CAAexE,MAAf,CAAsB2D,aAAtB,EAAqC,CAArC;AACAxC,wCAAQ,UAAR;AACH,6BALkB,EAKhB8B,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeoB,iB;;;;;AAgCf;;yEACA,mBAA8C3C,CAA9C,EAAiDG,MAAjD,EAAyD4C,KAAzD,EAAgEV,qBAAhE,EAAuFf,cAAvF,EAAuGC,aAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBa,qBAAlB,CADV;;AAAA;AAAA,4BAIYvF,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKcS,0BAA0ByC,CAA1B,EAA6BG,MAA7B,EAAqC4C,KAArC,EAA4CzB,cAA5C,EAA4DC,aAA5D,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe9D,8B;;;;;AAYf;;yEACA,mBAAyCuC,CAAzC,EAA4CG,MAA5C,EAAoD4C,KAApD,EAA2DzB,cAA3D,EAA2EC,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAIuB,qBAAJ,CAA0BhD,CAA1B,EAA6BG,MAA7B,EAAqC4C,KAArC,CARnB;;AASIE,+CAAuBnD,IAAvB,CAA4B2B,QAA5B;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;;AAEA+B,qCAASP,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAIyB,gBAAgBgB,uBAAuBf,OAAvB,CAA+BT,QAA/B,CAApB;AACAwB,uDAAuB3E,MAAvB,CAA8B2D,aAA9B,EAA6C,CAA7C;AACAxC,wCAAQ,UAAR;AACH,6BALkB,EAKhB8B,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAehE,yB;;;;;AAgCf;;yEACA,mBAA4C8D,CAA5C,EAA+CqB,KAA/C,EAAsDK,KAAtD,EAA6DV,qBAA7D,EAAoFf,cAApF,EAAoGC,aAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBa,qBAAlB,CADV;;AAAA;AAAA,4BAIYvF,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKcoG,wBAAwB7B,CAAxB,EAA2BqB,KAA3B,EAAkCK,KAAlC,EAAyCzB,cAAzC,EAAyDC,aAAzD,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe4B,4B;;;;;AAYf;;yEACA,mBAAuC9B,CAAvC,EAA0CqB,KAA1C,EAAiDK,KAAjD,EAAwDzB,cAAxD,EAAwEC,aAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAI2B,mBAAJ,CAAwB/B,CAAxB,EAA2BqB,KAA3B,EAAkCK,KAAlC,CARnB;;AASIM,6CAAqBvD,IAArB,CAA0B2B,QAA1B;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;;AAEA+B,qCAASP,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAIyB,gBAAgBoB,qBAAqBnB,OAArB,CAA6BT,QAA7B,CAApB;AACA4B,qDAAqB/E,MAArB,CAA4B2D,aAA5B,EAA2C,CAA3C;AACAxC,wCAAQ,UAAR;AACH,6BALkB,EAKhB8B,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe2B,uB;;;;;AAgCf;;yEACA,mBAA6B7B,CAA7B,EAAgCrB,CAAhC,EAAmC0C,KAAnC,EAA0CvC,MAA1C,EAAkDkC,qBAAlD,EAAyEf,cAAzE,EAAyFC,aAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,kBAAkBa,qBAAlB,CADV;;AAAA;AAAA,4BAIYvF,gBAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKcwG,SAASjC,CAAT,EAAYrB,CAAZ,EAAe0C,KAAf,EAAsBvC,MAAtB,EAA8BmB,cAA9B,EAA8CC,aAA9C,CALd;;AAAA;AAAA;AAAA;;AAAA;AAMK;;AAED;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAelE,a;;;;;AAYf;;yEACA,mBAAwBgE,CAAxB,EAA2BrB,CAA3B,EAA8B0C,KAA9B,EAAqCvC,MAArC,EAA6CmB,cAA7C,EAA6DC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUC,kBAAkBF,cAAlB,CAFV;;AAAA;AAAA,6BAKQxE,gBALR;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOI;AACI2E,gCARR,GAQmB,IAAI8B,IAAJ,CAASlC,CAAT,EAAYrB,CAAZ,EAAe0C,KAAf,EAAsBvC,MAAtB,CARnB;;AASIqD,8BAAM1D,IAAN,CAAW2B,QAAX;;AAEA;AAXJ;AAAA,+BAYUL,mBAAmBK,QAAnB,CAZV;;AAAA;AAAA,6BAeQ3E,gBAfR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAkBiB,IAAIC,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;;AAEA+B,qCAASP,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,oCAAIyB,gBAAgBuB,MAAMtB,OAAN,CAAcT,QAAd,CAApB;AACA+B,sCAAMlF,MAAN,CAAa2D,aAAb,EAA4B,CAA5B;AACAxC,wCAAQ,UAAR;AACH,6BALkB,EAKhB8B,gBAAgB,IALA,CAAnB;AAMH,yBAXY,CAlBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe+B,Q;;;;;AAgCf;;yEACA,mBAA0BjC,CAA1B,EAA6BrB,CAA7B,EAAgC0C,KAAhC,EAAuCvC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACIsB,gCAFR,GAEmB,IAAIgC,IAAJ,CAASpC,CAAT,EAAYrB,CAAZ,EAAe0C,KAAf,EAAsBvC,MAAtB,CAFnB;;AAGIuD,8BAAM5D,IAAN,CAAW2B,QAAX;;AAEA;AALJ;AAAA,+BAMiB,IAAI1E,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AAC1C;AACA+B,qCAAST,eAAT,GAA2BvB,OAA3B;AACAgC,qCAASR,cAAT,GAA0BvB,MAA1B;AACH,yBAJY,CANjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAezC,U;;;;;AAicf;;AAEA;;yEACA,mBAA4B0G,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,uCADR,GAC0B,IAD1B;AAEQC,0CAFR,GAE6B,GAF7B;AAGQC,kCAHR,GAGqB,CAHrB;AAIQC,mCAJR,GAIsBJ,MAAMK,YAAN,GAAqBH,kBAJ3C;;AAMI;;AACII,gCAPR,GAOmBnC,YAAY,YAAM;AAC7BgC,0CAAcD,kBAAd;AACH,yBAFc,EAEZD,kBAAkB,IAFN,CAPnB;AAAA,2DAWW,IAAI7G,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACpC,qCAASwE,YAAT,GAAwB;AACpB;AACAC,wCAAQC,WAAR,GAAsB,SAAtB;AACAD,wCAAQE,SAAR,CAAkBV,KAAlB,EAAyBG,UAAzB,EAAqC,CAArC,EAAwCD,kBAAxC,EAA4DA,kBAA5D,EAAgF,GAAhF,EAAqF,GAArF,EAA0FA,kBAA1F,EAA8GA,kBAA9G;AACAM,wCAAQG,UAAR,CAAmB,GAAnB,EAAwB,GAAxB,EAA6BT,kBAA7B,EAAiDA,kBAAjD;;AAEA;AACA,oCAAIC,aAAaC,WAAjB,EAA8B;AAC1BtE,4CAAQ,UAAR;AACH,iCAFD,MAEO;AACH;AACAW,2CAAOC,qBAAP,CAA6B6D,YAA7B;AACH;AACJ;;AAED9D,mCAAOC,qBAAP,CAA6B6D,YAA7B;AACH,yBAjBM,CAXX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe/E,Y;;;;;AA+Bf;;AAEA;;;;;;;AAv9CA;;AAEA,IAAMoF,SAAS9D,SAASC,cAAT,CAAwB,MAAxB,CAAf;AACA,IAAMyD,UAAUI,OAAOC,UAAP,CAAkB,IAAlB,CAAhB;AACAL,QAAQM,SAAR,GAAoB,CAApB;;AAEA;;AAEA,IAAI5F,YAAY,SAAhB;;AAEA,IAAIU,eAAe,CAAnB;;AAEA,IAAIC,kBAAkB,CAAtB;AACA,IAAIZ,qBAAqB,CAAzB;;AAEA,IAAI8F,SAAS,CAAb;AACA,IAAIC,SAAS,CAAb;;AAEA,IAAIC,qBAAqB,KAAzB;;AAEA,IAAIC,0BAA0B,KAA9B;AACA,IAAIC,wBAAwB,KAA5B;AACA,IAAIC,2BAA2B,KAA/B;AACA,IAAIC,0BAA0B,KAA9B;AACA,IAAIC,sBAAsB,KAA1B;AACA,IAAIC,sBAAsB,KAA1B;AACA,IAAIC,kBAAkB,KAAtB;;AAEA,IAAIC,qBAAqB,KAAzB;AACA,IAAIC,iBAAiB,IAArB;AACA,IAAIC,eAAe,EAAnB;AACA,IAAIC,sBAAsB,GAA1B;AACA,IAAIC,wBAAwB,GAA5B;;AAEA;AACA;AACA,IAAI1I,mBAAmB,KAAvB;;AAEA;;AAEA;AACA;;AAEA,IAAI2I,mBAAmBhF,SAASiF,aAAT,CAAuB,KAAvB,CAAvB;AACAD,iBAAiBE,GAAjB,GAAuB,gCAAvB;;AAEA,IAAIC,uBAAuBnF,SAASiF,aAAT,CAAuB,KAAvB,CAA3B;AACAE,qBAAqBD,GAArB,GAA2B,oCAA3B;;AAEA,IAAIE,8BAA8BpF,SAASiF,aAAT,CAAuB,KAAvB,CAAlC;AACAG,4BAA4BF,GAA5B,GAAkC,2CAAlC;;AAEA,IAAIvG,8BAA8BqB,SAASiF,aAAT,CAAuB,KAAvB,CAAlC;AACAtG,4BAA4BuG,GAA5B,GAAkC,2CAAlC;;AAEA,IAAIG,YAAY,CAAhB;;AAEA,IAAIC,YAAY,CAAhB;;AAEA;;AAEA,IAAIlF,WAAW,EAAf;;AAEA,IAAImF,kBAAkB,EAAtB;AACA,IAAIrE,gBAAgB,EAApB;AACA,IAAIS,eAAe,EAAnB;AACA,IAAIK,mBAAmB,EAAvB;AACA,IAAIK,iBAAiB,EAArB;AACA,IAAIG,yBAAyB,EAA7B;AACA,IAAII,uBAAuB,EAA3B;AACA,IAAIG,QAAQ,EAAZ;AACA,IAAIE,QAAQ,EAAZ;AACA,IAAI7D,YAAY,EAAhB;;AAEA;AACA,IAAInB,aAAa,EAAjB;;AAEA,IAAIP,kBAAkB,EAAtB;AACA,IAAII,mBAAmB,EAAvB;;AAEA,IAAI0H,qBAAqB,EAAzB;;AAEA;;IAEMC,M,GACF,kBAAc;AAAA;;AACV,SAAKxD,KAAL,GAAa,EAAb;AACA,SAAKvC,MAAL,GAAc,EAAd;;AAEA,SAAKkB,CAAL,GAASkD,OAAO7B,KAAP,GAAe,CAAf,GAAmB,KAAKA,KAAL,GAAa,CAAzC;AACA,SAAK1C,CAAL,GAASuE,OAAOpE,MAAP,GAAgB,CAAhB,GAAoB,KAAKA,MAAL,GAAc,CAA3C;;AAEA,SAAK4C,KAAL,GAAa,CAAb;AACA,SAAKzD,kBAAL,GAA0B,CAA1B;AACA,SAAK6G,kBAAL,GAA0B,CAA1B;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,eAAL,GAAuB,KAAKnF,CAA5B;AACA,SAAKoF,eAAL,GAAuB,KAAKzG,CAA5B;;AAEA,SAAKjB,KAAL,GAAa,SAAb;;AAEA,SAAK2H,MAAL,GAAcjB,gBAAd;AACA,SAAKzG,EAAL,GAAU,CAAV;;AAEA;AACA,SAAK2H,oBAAL,GAA4B,CAA5B;AACH,C;;AACJ;;IAEKC,c,GACF,0BAAc;AAAA;;AACV;AACA,SAAK3F,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;AAED;AACA;;IAEMQ,Y,GACF,sBAAYL,CAAZ,EAAerB,CAAf,EAAkB6G,kBAAlB,EAAsC;AAAA;;AAClC,SAAKxF,CAAL,GAASA,CAAT;AACA,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAK0C,KAAL,GAAa,EAAb;AACA,SAAKvC,MAAL,GAAc,EAAd;;AAEA;AACA,SAAKpB,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKH,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,OAAL;;AAEA;AACA,SAAK2F,kBAAL,GAA0BA,kBAA1B;AACA,SAAKjF,sBAAL,GAA8B,CAA9B;AACH,C;;AACJ;;IAEKO,W,GACF,qBAAYd,CAAZ,EAAerB,CAAf,EAAkB6G,kBAAlB,EAAsC;AAAA;;AAClC,SAAKxF,CAAL,GAASA,CAAT;AACA,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAK0C,KAAL,GAAa,EAAb;AACA,SAAKvC,MAAL,GAAc,EAAd;;AAEA;AACA,SAAKpB,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKH,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKsB,e,GACF,yBAAYxC,CAAZ,EAAeG,MAAf,EAAuB;AAAA;;AACnB,SAAKkB,CAAL,GAAS,CAAT;AACA,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAK0C,KAAL,GAAa6B,OAAO7B,KAApB;AACA,SAAKvC,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKpB,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEK2B,a,GACF,uBAAYxB,CAAZ,EAAeqB,KAAf,EAAsB;AAAA;;AAClB,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAKrB,CAAL,GAAS,CAAT;AACA,SAAK0C,KAAL,GAAaA,KAAb;AACA,SAAKvC,MAAL,GAAcoE,OAAOpE,MAArB;;AAEA;AACA,SAAKpB,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEK8B,qB,GACF,+BAAYhD,CAAZ,EAAeG,MAAf,EAAuB4C,KAAvB,EAA8B;AAAA;;AAC1B,SAAK1B,CAAL,GAAS,CAAT;AACA,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAK0C,KAAL,GAAa6B,OAAO7B,KAApB;AACA,SAAKvC,MAAL,GAAcA,MAAd;AACA,SAAK4C,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAKhE,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKkC,mB,GACF,6BAAY/B,CAAZ,EAAeqB,KAAf,EAAsBK,KAAtB,EAA6B;AAAA;;AACzB,SAAK1B,CAAL,GAASA,CAAT;AACA,SAAKrB,CAAL,GAAS,CAAT;AACA,SAAK0C,KAAL,GAAaA,KAAb;AACA,SAAKvC,MAAL,GAAcoE,OAAOpE,MAArB;AACA,SAAK4C,KAAL,GAAaA,KAAb;;AAEA;AACA,SAAKhE,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKqC,I,GACF,cAAYlC,CAAZ,EAAerB,CAAf,EAAkB0C,KAAlB,EAAyBvC,MAAzB,EAAiC;AAAA;;AAC7B,SAAKkB,CAAL,GAASA,CAAT;AACA,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAK0C,KAAL,GAAaA,KAAb;AACA,SAAKvC,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKpB,KAAL,GAAa,SAAb;AACA,SAAKoC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKF,cAAL;AACA,SAAKC,OAAL;AACH,C;;AACJ;;IAEKuC,I,GACF,cAAYpC,CAAZ,EAAerB,CAAf,EAAkB0C,KAAlB,EAAyBvC,MAAzB,EAAiC;AAAA;;AAC7B,SAAKkB,CAAL,GAASA,CAAT;AACA,SAAKrB,CAAL,GAASA,CAAT;AACA,SAAK0C,KAAL,GAAaA,KAAb;AACA,SAAKvC,MAAL,GAAcA,MAAd;;AAEA;AACA,SAAKc,cAAL;AACA,SAAKC,OAAL;AACH,C;;IAGCtB,Q,GACF,oBAAc;AAAA;;AACV,SAAKyB,CAAL,GAASvC,QAAQuC,CAAR,GAAY,CAArB;AACA,SAAKrB,CAAL,GAAS,CAAC,EAAV;AACA,SAAK0C,KAAL,GAAa,EAAb;AACA,SAAKvC,MAAL,GAAc,EAAd;AACH,C;;AACJ;;AAED,IAAIrB,UAAU,IAAIoH,MAAJ,EAAd;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAIY,WAAW,IAAI,EAAnB;AACA,IAAIC,YAAY,IAAI,EAApB;AACA,IAAIC,cAAc,KAAK,EAAvB;AACA,IAAItK,UAAU6H,OAAO7B,KAAP,GAAe,CAA7B;AACA,IAAIuE,aAAa,KAAK,EAAtB;AACA,IAAIC,eAAe,KAAK,EAAxB;AACA,IAAItK,cAAc,KAAK,EAAvB;AACA,IAAIM,aAAa,KAAK,EAAtB;;AAEA,IAAIM,WAAW,IAAI,EAAnB;AACA,IAAI2J,WAAW,IAAI,EAAnB;AACA,IAAIC,aAAa,KAAK,EAAtB;AACA,IAAIC,YAAY,KAAK,EAArB;AACA,IAAIC,YAAY,KAAK,EAArB;AACA,IAAIC,WAAW,KAAK,EAApB;AACA,IAAIC,aAAa,KAAK,EAAtB;AACA,IAAIlK,aAAa,KAAK,EAAtB;;AAEA,IAAIX,oBAAoB,CAACmC,QAAQ4D,KAAT,GAAiB,CAAzC,CA4EC,CASA;;AAED;AACA,SAASjG,eAAT,CAAyBgL,QAAzB,EAAmCC,QAAnC,EAA6C;AACzC7I,gBAAY,SAAZ;;AAEAC,YAAQuC,CAAR,GAAYoG,QAAZ;AACA3I,YAAQkB,CAAR,GAAY0H,QAAZ;;AAEAtC,yBAAqB,KAArB;AACAC,qBAAiB,IAAjB;AACH,EA6CA;;AAgCA;;AAED,SAASnG,YAAT,GAAwB;AACpB,YAAQK,YAAR;AACI,aAAK,CAAL;AACIzB;AACA;AACJ,aAAK,CAAL;AACIE;AACA;AANR,KAOC;AACJ;;AAED;;AAEA;AACA,SAAS2J,gBAAT,CAA0BC,WAA1B,EAAuC;AACnC;AACA,QAAIC,qBAAqBD,YAAYxJ,MAArC;;AAEA,SAAK,IAAIF,IAAI2J,qBAAqB,CAAlC,EAAqC3J,KAAK,CAA1C,EAA6CA,GAA7C,EAAkD;AAC9C;AACA,YAAIuD,WAAWmG,YAAY1J,CAAZ,CAAf;AACAuD,iBAAST,eAAT;AACA3C,qBAAaoD,SAASP,OAAtB;AACA0G,oBAAYtJ,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAASS,eAAT,CAAyBiJ,WAAzB,EAAsC;AAClC;AACA,QAAIC,qBAAqBD,YAAYxJ,MAArC;;AAEA,SAAK,IAAIF,IAAI2J,qBAAqB,CAAlC,EAAqC3J,KAAK,CAA1C,EAA6CA,GAA7C,EAAkD;AAC9C;AACA,YAAIuD,WAAWmG,YAAY1J,CAAZ,CAAf;AACAuD,iBAASR,cAAT;AACA5C,qBAAaoD,SAASP,OAAtB;AACA0G,oBAAYtJ,MAAZ,CAAmBJ,CAAnB,EAAsB,CAAtB;AACH;AACJ;;AAED;AACA,SAAS4J,iBAAT,CAA2B5G,OAA3B,EAAoC;AAChC/C,oBAAgB2B,IAAhB,CAAqBoB,OAArB;AACH;;AAED;AACA,SAAS6G,oBAAT,CAA8B7G,OAA9B,EAAuC;AACnC,QAAI8G,sBAAsB7J,gBAAgB+D,OAAhB,CAAwBhB,OAAxB,CAA1B;AACA/C,oBAAgBG,MAAhB,CAAuB0J,mBAAvB,EAA4C,CAA5C;AACH;;AAED;AACA,SAASjG,kBAAT,CAA4BkG,QAA5B,EAAsC;AAClC1J,qBAAiBuB,IAAjB,CAAsBmI,QAAtB;AACH;;AAED;AACA,SAASjG,qBAAT,CAA+BiG,QAA/B,EAAyC;AACrCzJ,kBAAcyJ,QAAd;AACA,QAAIC,uBAAuB3J,iBAAiB2D,OAAjB,CAAyB+F,QAAzB,CAA3B;AACA1J,qBAAiBD,MAAjB,CAAwB4J,oBAAxB,EAA8C,CAA9C;AACH,EAsCA;;AAED;;AAEA,SAASC,cAAT,GAA0B;AACtBrJ,YAAQC,KAAR,GAAgB,oBAAhB;AACAD,YAAQiE,KAAR,GAAgBuC,YAAhB;AACAF,yBAAqB,IAArB;AACAC,qBAAiB,KAAjB;;AAEA,QAAI+C,kBAAkB5H,WAAW,YAAM;AACnC4E,6BAAqB,KAArB;AACAtG,gBAAQC,KAAR,GAAgB,SAAhB;AACAgJ,6BAAqBK,eAArB;AACH,KAJqB,EAInB7C,sBAAsB,IAJH,CAAtB;AAKAuC,sBAAkBM,eAAlB;;AAEA;AACA;AACAtJ,YAAQ6H,oBAAR,GAA+BnB,qBAA/B;AACA,QAAI6C,+BAA+BvG,YAAY,YAAM;AACjDhD,gBAAQ6H,oBAAR,IAAgC,KAAhC;AACH,KAFkC,EAEhC,CAFgC,CAAnC;AAGA5E,uBAAmBsG,4BAAnB;;AAEA,QAAIC,sBAAsB9H,WAAW,YAAM;AACvC6E,yBAAiB,IAAjB;AACArD,8BAAsBqG,4BAAtB;AACAN,6BAAqBO,mBAArB;AACH,KAJyB,EAIvB9C,wBAAwB,IAJD,CAA1B;AAKAsC,sBAAkBQ,mBAAlB;AACH;;AAED;AACA,SAASC,iBAAT,GAA6B;AACzBzJ,YAAQC,KAAR,GAAgB,SAAhB;AACAqG,yBAAqB,KAArB;AACAC,qBAAiB,IAAjB;;AAEA;AACA,WAAOxE,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACA,WAAOA,SAAS,EAAT,CAAP;AACH;;AAED;;AAEA;AACA;AACA,SAASW,iBAAT,CAA2BF,cAA3B,EAA2C;AACvC;AACA,QAAIG,WAAW,IAAImF,cAAJ,EAAf;AACAZ,oBAAgBlG,IAAhB,CAAqB2B,QAArB;;AAEA,WAAO,IAAI1E,OAAJ,CAAY,UAAC0C,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA+B,iBAAST,eAAT,GAA2BvB,OAA3B;AACAgC,iBAASR,cAAT,GAA0BvB,MAA1B;;AAEA+B,iBAASP,OAAT,GAAmBV,WAAW,YAAM;AAChC;AACA,gBAAIyB,gBAAgB+D,gBAAgB9D,OAAhB,CAAwBT,QAAxB,CAApB;AACAuE,4BAAgB1H,MAAhB,CAAuB2D,aAAvB,EAAsC,CAAtC;AACAxC,oBAAQ,UAAR;AACH,SALkB,EAKhB6B,iBAAiB,IALD,CAAnB;AAMH,KAXM,CAAP;AAYH,EAkEA,CA2CA,CA0BA,CAaA,CAiCA,CAaA,CAiCA,CAaA,CAiCA,CAaA,CAiCA,CAaA,CAiCA,CAcA;;AAED;;AAEA,SAAS7C,gBAAT,GAA4B;AACxBC,iBAAa,CACTsH,eADS,EAETrE,aAFS,EAGTS,YAHS,EAITK,gBAJS,EAKTK,cALS,EAMTG,sBANS,EAOTI,oBAPS,EAQTG,KARS,EASTE,KATS,CAAb;AAWH;;AAED,SAAS8E,2BAAT,GAAuC;AACnC9J,iBAAa,CACTsH,eADS,EAETrE,aAFS,EAGTS,YAHS,EAITK,gBAJS,EAKTK,cALS,EAMTG,sBANS,EAOTI,oBAPS,EAQTG,KARS,CAAb;AAUH;;AAED;AACA,SAASiF,0BAAT,GAAsC;AAClC,SAAK,IAAIvK,IAAI,CAAb,EAAgBA,IAAI+E,uBAAuB7E,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAI+E,uBAAuB/E,CAAvB,EAA0Ba,KAA1B,KAAoC,SAAxC,EAAmD;AAC/CkE,mCAAuB/E,CAAvB,EAA0B8B,CAA1B,IAA+BiD,uBAAuB/E,CAAvB,EAA0B6E,KAAzD;AACH;AACJ;AACJ;;AAED;AACA,SAAS2F,wBAAT,GAAoC;AAChC,SAAK,IAAIxK,IAAI,CAAb,EAAgBA,IAAImF,qBAAqBjF,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAImF,qBAAqBnF,CAArB,EAAwBa,KAAxB,KAAkC,SAAtC,EAAiD;AAC7CsE,iCAAqBnF,CAArB,EAAwBmD,CAAxB,IAA6BgC,qBAAqBnF,CAArB,EAAwB6E,KAArD;AACH;AACJ;AACJ;;AAED;;AAEA,SAAS4F,cAAT,GAA0B;AACtB;AACA,QAAI,CAACtD,cAAD,IAAmBxG,cAAc,SAArC,EAAgD;AAC5CsF,gBAAQyE,SAAR,GAAoB,SAApB;AACAzE,gBAAQ0E,QAAR,CAAiB/J,QAAQuC,CAAzB,EAA4BvC,QAAQkB,CAAR,GAAY,CAAxC,EAA2ClB,QAAQ4D,KAAR,IAAiB5D,QAAQ6H,oBAAR,GAA+BnB,qBAAhD,CAA3C,EAAmH,CAAnH;AACH;;AAED;AACA,QAAI1G,QAAQC,KAAR,KAAkB,SAAtB,EAAiC;AAC7BD,gBAAQ4H,MAAR,GAAiBjB,gBAAjB;AACA;AACA;AACA3G,gBAAQE,EAAR,GAAaF,QAAQ4D,KAAR,IAAiBzC,KAAK6I,KAAL,CAAWhK,QAAQQ,kBAAR,GAA6B,EAAxC,IAA8C,CAA/D,CAAb;AACH,KALD,MAKO,IAAIR,QAAQC,KAAR,KAAkB,oBAAtB,EAA4C;AAC/CD,gBAAQ4H,MAAR,GAAiBb,2BAAjB;AACA/G,gBAAQE,EAAR,GAAa,CAAb;AACH,KAHM,MAGA,IAAIF,QAAQC,KAAR,KAAkB,aAAtB,EAAqC;AACxCD,gBAAQ4H,MAAR,GAAiBd,oBAAjB;;AAEA,YAAImD,+BAA+BvI,WAAW,YAAM;AAChDhC,0BAAcwK,yBAAd;AACAjB,iCAAqBiB,yBAArB;AACAjB,iCAAqBgB,4BAArB;AACH,SAJkC,EAIhC,MAAM,IAJ0B,CAAnC;AAKAjB,0BAAkBiB,4BAAlB;;AAEA,YAAIC,4BAA4BlH,YAAY,YAAM;AAC9ChD,oBAAQE,EAAR,IAAcF,QAAQ4D,KAAtB;AACH,SAF+B,EAE7B,MAAM,IAFuB,CAAhC;AAGAoF,0BAAkBkB,yBAAlB;AACH;AACJ;;AAED,SAASC,WAAT,GAAuB;AACnB9E,YAAQE,SAAR,CAAkBvF,QAAQ4H,MAA1B,EAAkC5H,QAAQE,EAA1C,EAA8C,CAA9C,EAAiDF,QAAQ4D,KAAzD,EAAgE5D,QAAQqB,MAAxE,EAAgFrB,QAAQuC,CAAxF,EAA2FvC,QAAQkB,CAAnG,EAAsGlB,QAAQ4D,KAA9G,EAAqH5D,QAAQqB,MAA7H;AACH;;AAED,SAAS+I,iBAAT,GAA6B;AACzB,SAAK,IAAIhL,IAAI,CAAb,EAAgBA,IAAIyD,cAAcvD,MAAlC,EAA0CF,GAA1C,EAA+C;AAC3C,YAAIiL,kBAAkBxH,cAAczD,CAAd,CAAtB;;AAEA;AACAiG,gBAAQyE,SAAR,GAAoB,SAApB;AACAzE,gBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAAhB,GAAoB,CAAxD,EAA2DmJ,gBAAgBzG,KAAhB,IAAyByG,gBAAgBvH,sBAAhB,GAAyCuH,gBAAgBtC,kBAAlF,CAA3D,EAAkK,CAAlK;;AAEA;AACA,YAAIsC,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQC,WAAR,GAAsB,SAAtB;AACAD,wBAAQG,UAAR,CAAmB6E,gBAAgB9H,CAAnC,EAAsC8H,gBAAgBnJ,CAAtD,EAAyDmJ,gBAAgBzG,KAAzE,EAAgFyG,gBAAgBhJ,MAAhG;AACH,aAHD,MAGO,IAAIgJ,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASiJ,gBAAT,GAA4B;AACxB,SAAK,IAAIlL,IAAI,CAAb,EAAgBA,IAAIkE,aAAahE,MAAjC,EAAyCF,GAAzC,EAA8C;AAC1C,YAAIiL,kBAAkB/G,aAAalE,CAAb,CAAtB;;AAEA;AACA,YAAIiL,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQC,WAAR,GAAsB,SAAtB;AACAD,wBAAQG,UAAR,CAAmB6E,gBAAgB9H,CAAnC,EAAsC8H,gBAAgBnJ,CAAtD,EAAyDmJ,gBAAgBzG,KAAzE,EAAgFyG,gBAAgBhJ,MAAhG;AACH,aAHD,MAGO,IAAIgJ,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASkJ,oBAAT,GAAgC;AAC5B,SAAK,IAAInL,IAAI,CAAb,EAAgBA,IAAIuE,iBAAiBrE,MAArC,EAA6CF,GAA7C,EAAkD;AAC9C,YAAIiL,kBAAkB1G,iBAAiBvE,CAAjB,CAAtB;AACA,YAAIiL,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQC,WAAR,GAAsB,SAAtB;AACAD,wBAAQG,UAAR,CAAmB6E,gBAAgB9H,CAAhB,GAAoB,EAAvC,EAA2C8H,gBAAgBnJ,CAA3D,EAA8D,EAA9D,EAAkEmJ,gBAAgBhJ,MAAlF;AACAgE,wBAAQG,UAAR,CAAmB6E,gBAAgBzG,KAAhB,GAAwB,EAA3C,EAA+CyG,gBAAgBnJ,CAA/D,EAAkE,EAAlE,EAAsEmJ,gBAAgBhJ,MAAtF;AACH,aAJD,MAIO,IAAIgJ,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASmJ,kBAAT,GAA8B;AAC1B,SAAK,IAAIpL,IAAI,CAAb,EAAgBA,IAAI4E,eAAe1E,MAAnC,EAA2CF,GAA3C,EAAgD;AAC5C,YAAIiL,kBAAkBrG,eAAe5E,CAAf,CAAtB;AACA,YAAIiL,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQC,WAAR,GAAsB,SAAtB;AACAD,wBAAQG,UAAR,CAAmB6E,gBAAgB9H,CAAnC,EAAsC8H,gBAAgBnJ,CAAhB,GAAoB,EAA1D,EAA8DmJ,gBAAgBzG,KAA9E,EAAqF,EAArF;AACAyB,wBAAQG,UAAR,CAAmB6E,gBAAgB9H,CAAnC,EAAsC8H,gBAAgBhJ,MAAhB,GAAyB,EAA/D,EAAmEgJ,gBAAgBzG,KAAnF,EAA0F,EAA1F;AACH,aAJD,MAIO,IAAIyG,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAASoJ,0BAAT,GAAsC;AAClC,SAAK,IAAIrL,IAAI,CAAb,EAAgBA,IAAI+E,uBAAuB7E,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,YAAIiL,kBAAkBlG,uBAAuB/E,CAAvB,CAAtB;AACA,YAAIiL,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQyE,SAAR,GAAoB,SAApB;;AAEA;AACA;AACAzE,wBAAQqF,SAAR;AACArF,wBAAQsF,MAAR,CAAeN,gBAAgB9H,CAAhB,GAAoB,EAAnC,EAAuC8H,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAhB,GAAyBF,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAApF;AACAoB,wBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB,EAAnC,EAAuC8H,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAhB,GAAyBF,KAAK4J,GAAL,CAAS,CAAT,EAAY5J,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAApF;AACAoB,wBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB,EAAnC,EAAuC8H,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAhB,GAAyBF,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAApF;AACAoB,wBAAQ2F,IAAR;;AAEA;AACA3F,wBAAQqF,SAAR;AACArF,wBAAQsF,MAAR,CAAeN,gBAAgBzG,KAAhB,GAAwB,EAAvC,EAA2CyG,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAhB,GAAyBF,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAAxF;AACAoB,wBAAQyF,MAAR,CAAeT,gBAAgBzG,KAAhB,GAAwB,EAAvC,EAA2CyG,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAhB,GAAyBF,KAAK4J,GAAL,CAAS,CAAT,EAAY5J,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAxF;AACAoB,wBAAQyF,MAAR,CAAeT,gBAAgBzG,KAAhB,GAAwB,EAAvC,EAA2CyG,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAhB,GAAyBF,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAAxF;AACAoB,wBAAQ2F,IAAR;AACH,aAjBD,MAiBO,IAAIX,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS4J,wBAAT,GAAoC;AAChC,SAAK,IAAI7L,IAAI,CAAb,EAAgBA,IAAImF,qBAAqBjF,MAAzC,EAAiDF,GAAjD,EAAsD;AAClD,YAAIiL,kBAAkB9F,qBAAqBnF,CAArB,CAAtB;AACA,YAAIiL,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQyE,SAAR,GAAoB,SAApB;;AAEA;AACA;AACAzE,wBAAQqF,SAAR;AACArF,wBAAQsF,MAAR,CAAeN,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwBzC,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAA3D,EAAoHoG,gBAAgBnJ,CAAhB,GAAoB,EAAxI;AACAmE,wBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwBzC,KAAK4J,GAAL,CAAS,CAAT,EAAY5J,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAA3D,EAA0GoG,gBAAgBnJ,CAAhB,GAAoB,EAA9H;AACAmE,wBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwBzC,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAA3D,EAAoHoG,gBAAgBnJ,CAAhB,GAAoB,EAAxI;AACAmE,wBAAQ2F,IAAR;;AAEA;AACA3F,wBAAQqF,SAAR;AACArF,wBAAQsF,MAAR,CAAeN,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwBzC,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAA3D,EAAoHoG,gBAAgBhJ,MAAhB,GAAyB,EAA7I;AACAgE,wBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwBzC,KAAK4J,GAAL,CAAS,CAAT,EAAY5J,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAA3D,EAA0GoG,gBAAgBhJ,MAAhB,GAAyB,EAAnI;AACAgE,wBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwBzC,KAAKyJ,GAAL,CAASzJ,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAK0J,IAAL,CAAUR,gBAAgBpG,KAA1B,CAAZ,CAAT,CAA3D,EAAoHoG,gBAAgBhJ,MAAhB,GAAyB,EAA7I;AACAgE,wBAAQ2F,IAAR;AACH,aAjBD,MAiBO,IAAIX,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS6J,SAAT,GAAqB;AACjB,SAAK,IAAI9L,IAAI,CAAb,EAAgBA,IAAIsF,MAAMpF,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,YAAIiL,kBAAkB3F,MAAMtF,CAAN,CAAtB;AACA,YAAIiL,gBAAgBhI,OAApB,EAA6B;AACzB;AACA,gBAAIgI,gBAAgBpK,KAAhB,IAAyB,SAA7B,EAAwC;AACpCoF,wBAAQC,WAAR,GAAsB,SAAtB;AACAD,wBAAQG,UAAR,CAAmB6E,gBAAgB9H,CAAnC,EAAsC8H,gBAAgBnJ,CAAtD,EAAyDmJ,gBAAgBzG,KAAzE,EAAgFyG,gBAAgBhJ,MAAhG;AACH,aAHD,MAGO,IAAIgJ,gBAAgBpK,KAAhB,IAAyB,QAA7B,EAAuC;AAC1CoF,wBAAQyE,SAAR,GAAoB,SAApB;AACAzE,wBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;AACJ;AACJ;;AAED,SAAS8J,SAAT,GAAqB;AACjB,SAAK,IAAI/L,IAAI,CAAb,EAAgBA,IAAIwF,MAAMtF,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,YAAIiL,kBAAkBzF,MAAMxF,CAAN,CAAtB;AACAiG,gBAAQyE,SAAR,GAAoB,SAApB;AACAzE,gBAAQ0E,QAAR,CAAiBM,gBAAgB9H,CAAjC,EAAoC8H,gBAAgBnJ,CAApD,EAAuDmJ,gBAAgBzG,KAAvE,EAA8EyG,gBAAgBhJ,MAA9F;AACH;AACJ;;AAED,SAAS+J,aAAT,GAAyB;AACrB,SAAK,IAAIhM,IAAI,CAAb,EAAgBA,IAAI2B,UAAUzB,MAA9B,EAAsCF,GAAtC,EAA2C;AACvC,YAAIiL,kBAAkBtJ,UAAU3B,CAAV,CAAtB;;AAEAiG,gBAAQyE,SAAR,GAAoB,SAApB;;AAEAzE,gBAAQqF,SAAR;AACArF,gBAAQsF,MAAR,CAAeN,gBAAgB9H,CAA/B,EAAkC8H,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAAtE;AACAgE,gBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAhB,GAAwB,CAA3D,EAA8DyG,gBAAgBnJ,CAA9E;AACAmE,gBAAQyF,MAAR,CAAeT,gBAAgB9H,CAAhB,GAAoB8H,gBAAgBzG,KAAnD,EAA0DyG,gBAAgBnJ,CAAhB,GAAoBmJ,gBAAgBhJ,MAA9F;AACAgE,gBAAQ2F,IAAR;AACH;AACJ;;AAED;;AAEA,SAASK,wBAAT,CAAkCC,UAAlC,EAA8C;AAC1C,SAAK,IAAIlM,IAAI,CAAb,EAAgBA,IAAIkM,WAAWhM,MAA/B,EAAuCF,GAAvC,EAA4C;AACxCmM,gCAAwBvL,OAAxB,EAAiCsL,WAAWlM,CAAX,CAAjC;AACH;AACJ;;AAED,SAASoM,4BAAT,CAAsCC,YAAtC,EAAoDC,YAApD,EAAkEJ,UAAlE,EAA8E;AAC1ExF,yBAAqB,KAArB;;AAEA,SAAK,IAAI1G,IAAI,CAAb,EAAgBA,IAAIkM,WAAWhM,MAA/B,EAAuCF,GAAvC,EAA4C;AACxCuM,oCAA4B3L,OAA5B,EAAqCyL,YAArC,EAAmDC,YAAnD,EAAiEJ,WAAWlM,CAAX,CAAjE;AACH;AACJ;;AAED;AACA,SAASmM,uBAAT,CAAiCK,WAAjC,EAA8CC,WAA9C,EAA2D;AACvD,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAYtJ,CAAZ,IAAiBqJ,YAAYrJ,CAA9B,IAAqCqJ,YAAYrJ,CAAZ,IAAiBsJ,YAAYtJ,CAAZ,GAAgBsJ,YAAYjI,KAAlF,IAA6FiI,YAAY5L,KAAZ,KAAsB,QAAvH,EAAkI;AAC9H6L,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKF,YAAYrJ,CAAZ,IAAiBsJ,YAAYtJ,CAA9B,IAAqCsJ,YAAYtJ,CAAZ,IAAiBqJ,YAAYrJ,CAAZ,GAAgBqJ,YAAYhI,KAAlF,IAA6FiI,YAAY5L,KAAZ,KAAsB,QAAvH,EAAkI;AACrI6L,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAY3K,CAAZ,IAAiB0K,YAAY1K,CAA9B,IAAqC0K,YAAY1K,CAAZ,IAAiB2K,YAAY3K,CAAZ,GAAgB2K,YAAYxK,MAAlF,IAA8FwK,YAAY5L,KAAZ,KAAsB,QAAxH,EAAmI;AAC/H8L,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKH,YAAY1K,CAAZ,IAAiB2K,YAAY3K,CAA9B,IAAqC2K,YAAY3K,CAAZ,IAAiB0K,YAAY1K,CAAZ,GAAgB0K,YAAYvK,MAAlF,IAA8FwK,YAAY5L,KAAZ,KAAsB,QAAxH,EAAmI;AACtI8L,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1B5E,2BAAmBnG,IAAnB,CAAwB6K,WAAxB;AACH;AACJ;;AAED;AACA;AACA,SAASF,2BAAT,CAAqCC,WAArC,EAAkDH,YAAlD,EAAgEC,YAAhE,EAA8EG,WAA9E,EAA2F;AACvF,QAAIC,aAAa,KAAjB;AACA,QAAIC,aAAa,KAAjB;;AAEA,QAAKF,YAAYtJ,CAAZ,IAAiBkJ,YAAlB,IAAoCA,gBAAgBI,YAAYtJ,CAAZ,GAAgBsJ,YAAYjI,KAApF,EAA4F;AACxFkI,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKL,gBAAgBI,YAAYtJ,CAA7B,IAAoCsJ,YAAYtJ,CAAZ,IAAiBkJ,eAAeG,YAAYhI,KAApF,EAA4F;AAC/FkI,qBAAa,IAAb;AACH;;AAED,QAAKD,YAAY3K,CAAZ,IAAiBwK,YAAlB,IAAoCA,gBAAgBG,YAAY3K,CAAZ,GAAgB2K,YAAYxK,MAApF,EAA6F;AACzF0K,qBAAa,IAAb;AACH,KAFD,MAEO,IAAKL,gBAAgBG,YAAY3K,CAA7B,IAAoC2K,YAAY3K,CAAZ,IAAiBwK,eAAeE,YAAYvK,MAApF,EAA6F;AAChG0K,qBAAa,IAAb;AACH;;AAED;AACA,QAAID,cAAcC,UAAlB,EAA8B;AAC1BjG,6BAAqB,IAArB;AACH;AACJ;;AAED;;AAEA,SAASkG,mBAAT,GAA+B;AAC3B;AACA;AACArK,aAASsK,gBAAT,CAA0B,SAA1B,EAAqC,aAAK;AACtC;AACA;AACA,YAAI9F,mBAAJ,EAAyB;AACrB,mBAAOpE,SAAS,EAAT,CAAP;AACH;AACD,YAAIqE,mBAAJ,EAAyB;AACrB,mBAAOrE,SAAS,EAAT,CAAP;AACH;AACD,YAAIgE,uBAAJ,EAA6B;AACzB,mBAAOhE,SAAS,EAAT,CAAP;AACH;AACD,YAAIiE,qBAAJ,EAA2B;AACvB,mBAAOjE,SAAS,EAAT,CAAP;AACH;AACD,YAAIkE,wBAAJ,EAA8B;AAC1B,mBAAOlE,SAAS,EAAT,CAAP;AACH;AACD,YAAImE,uBAAJ,EAA6B;AACzB,mBAAOnE,SAAS,EAAT,CAAP;AACH;AACD,YAAIsE,eAAJ,EAAqB;AACjB,mBAAOtE,SAAS,EAAT,CAAP;AACH;;AAED,YAAImK,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AAClB,gBAAI,CAAChG,mBAAL,EAA0B;AACtBpE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACAhG,sCAAsB,IAAtB;AACH;AACJ,SALD,MAKO,IAAI+F,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC/F,mBAAL,EAA0B;AACtBrE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACA/F,sCAAsB,IAAtB;AACH;AACJ,SALM,MAKA,IAAI8F,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAACpG,uBAAL,EAA8B;AAC1BhE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACApG,0CAA0B,IAA1B;AACH;AACJ,SALM,MAKA,IAAImG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAACnG,qBAAL,EAA4B;AACxBjE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACAnG,wCAAwB,IAAxB;AACH;AACJ,SALM,MAKA,IAAIkG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAClG,wBAAL,EAA+B;AAC3BlE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACAlG,2CAA2B,IAA3B;AACH;AACJ,SALM,MAKA,IAAIiG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAACjG,uBAAL,EAA8B;AAC1BnE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACAjG,0CAA0B,IAA1B;AACH;AACJ,SALM,MAKA,IAAIgG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,gBAAI,CAAC9F,eAAL,EAAsB;AAClBtE,yBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACA9F,kCAAkB,IAAlB;AACH;AACJ,SALM,MAKA;AACHtE,qBAASmK,EAAEC,OAAX,IAAsB,IAAtB;AACH;AACJ,KA/DD;;AAiEA;AACAxK,aAASsK,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;AACpC;AACA,YAAIC,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AAClB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACAhG,kCAAsB,KAAtB;AACH,SAHD,MAGO,IAAI+F,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACA/F,kCAAsB,KAAtB;AACH,SAHM,MAGA,IAAI8F,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACApG,sCAA0B,KAA1B;AACH,SAHM,MAGA,IAAImG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACAnG,oCAAwB,KAAxB;AACH,SAHM,MAGA,IAAIkG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACAlG,uCAA2B,KAA3B;AACH,SAHM,MAGA,IAAIiG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACAjG,sCAA0B,KAA1B;AACH,SAHM,MAGA,IAAIgG,EAAEC,OAAF,KAAc,EAAlB,EAAsB;AACzB,mBAAOpK,SAASmK,EAAEC,OAAX,CAAP;AACA9F,8BAAkB,KAAlB;AACH,SAHM,MAGA;AACH,mBAAOtE,SAASmK,EAAEC,OAAX,CAAP;AACH;AACJ,KA1BD;AA2BH;;AAED;;AAEA;AACA,SAASC,SAAT,GAAqB;AACjB;AACApF,gBAAY7F,KAAKC,GAAL,CAASE,OAAO+K,UAAP,GAAoB,GAA7B,EAAkC/K,OAAOgL,WAAP,GAAqB,GAAvD,CAAZ;;AAEA;AACA,QAAIC,gBAAgB5K,SAASC,cAAT,CAAwB,eAAxB,CAApB;AACA2K,kBAAcC,KAAd,CAAoBC,SAApB,GAAgC,WAAWzF,SAAX,GAAuB,GAAvD;;AAEA;AACA1F,WAAOC,qBAAP,CAA6B6K,SAA7B;AACH,EAuCD,SAASrO,oBAAT,CAA8B2O,YAA9B,EAA4C;AACxC,QAAIC,UAAUD,YAAd;;AAEA;AACA,QAAIE,0BAA0BjL,SAASC,cAAT,CAAwB,yBAAxB,CAA9B;AACAgL,4BAAwBJ,KAAxB,CAA8BK,UAA9B,GAA2C,SAA3C;;AAEA5F,gBAAYjE,YAAY,YAAM;AAC1B;AACA2J;AACA,YAAIG,iBAAiB3L,KAAK4L,KAAL,CAAWJ,UAAU,EAArB,CAArB;AACA,YAAIK,iBAAiBL,UAAU,EAA/B;;AAEA;AACA,YAAIM,iBAAiBtL,SAASC,cAAT,CAAwB,gBAAxB,CAArB;AACAqL,uBAAepL,SAAf,GAA8BiL,cAA9B,SAAgDE,cAAhD;;AAEA;AACA,YAAIL,WAAW,CAAf,EAAkB;AACd/N;AACA2B,yBAAa,gBAAb;AACH;AACJ,KAfW,EAeT,IAfS,CAAZ;AAgBH;;AAED;AACA,SAAS3B,qBAAT,GAAiC;AAC7B,QAAIgO,0BAA0BjL,SAASC,cAAT,CAAwB,yBAAxB,CAA9B;AACAgL,4BAAwBJ,KAAxB,CAA8BK,UAA9B,GAA2C,QAA3C;AACAnN,kBAAcuH,SAAd;AACH;;AAED,SAASiG,qBAAT,CAA+B3K,CAA/B,EAAkCrB,CAAlC,EAAqC;AACjC,WAAOC,KAAKgM,KAAL,CAAWjM,CAAX,EAAcqB,CAAd,CAAP;AACH;;AAED,SAAS6K,uBAAT,CAAiCC,OAAjC,EAA0C;AACtC,WAAOA,UAAU,GAAV,GAAgBlM,KAAKmM,EAA5B;AACH;;AAED;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACA,QAAIxL,SAAS,EAAT,CAAJ,EAAkB;AACdxB,qBAAa,YAAb;AACH;;AAED,QAAIR,cAAc,SAAlB,EAA6B;AACzB;;AAEA,YAAI,CAACuG,kBAAL,EAAyB;AACrB;AACAV,qBAAS,CAAT;AACAC,qBAAS,CAAT;;AAEA;AACA;AACA,gBAAI9D,SAAS,EAAT,CAAJ,EAAkB;AACd6D;AACH;;AAED;AACA,gBAAI7D,SAAS,EAAT,CAAJ,EAAkB;AACd6D;AACH;;AAED;AACA,gBAAI7D,SAAS,EAAT,CAAJ,EAAkB;AACd8D;AACH;;AAED;AACA,gBAAI9D,SAAS,EAAT,CAAJ,EAAkB;AACd8D;AACH;;AAED,gBAAI,CAAC9D,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAAjB,KAAkCwE,cAAlC,KAAqDX,WAAW,CAAX,IAAgBC,WAAW,CAAhF,CAAJ,EAAwF;AACpF;AACA;AACA,uBAAO9D,SAAS,EAAT,CAAP;;AAEA;AACA;AACAsH;AACH,aARD,MAQO,IAAI,CAACtH,SAAS,EAAT,KAAgBA,SAAS,EAAT,CAAhB,IAAgCA,SAAS,EAAT,CAAhC,IAAgDA,SAAS,EAAT,CAAjD,KAAkEwE,cAAtE,EAAsF;AACzF;AACA;AACAX,yBAAS,CAAT;AACAC,yBAAS,CAAT;;AAEA;AACA,oBAAI9D,SAAS,EAAT,CAAJ,EAAkB;AACd6D;AACH;;AAED;AACA,oBAAI7D,SAAS,EAAT,CAAJ,EAAkB;AACd6D;AACH;;AAED;AACA,oBAAI7D,SAAS,EAAT,CAAJ,EAAkB;AACd8D;AACH;;AAED;AACA,oBAAI9D,SAAS,EAAT,CAAJ,EAAkB;AACd8D;AACH;;AAEDwD;AACH,aA3BM,MA2BA;AACHrJ,wBAAQiE,KAAR,GAAgB,CAAhB;AACH;;AAED;AACA;AACA;AACAjE,oBAAQQ,kBAAR,GAA6B,CAAC,GAA9B;;AAEA,gBAAIoF,WAAW,CAAX,IAAgBC,WAAW,CAA/B,EAAkC;AAC9B;AACA7F,wBAAQqH,kBAAR,GAA6B6F,sBAAsBtH,MAAtB,EAA8BC,MAA9B,CAA7B;;AAEA;AACA7F,wBAAQQ,kBAAR,GAA6B4M,wBAAwBpN,QAAQqH,kBAAhC,CAA7B;;AAEA;AACArH,wBAAQsH,EAAR,GAAanG,KAAKqM,GAAL,CAASxN,QAAQqH,kBAAjB,IAAuCrH,QAAQiE,KAA5D;AACAjE,wBAAQuH,EAAR,GAAapG,KAAKsM,GAAL,CAASzN,QAAQqH,kBAAjB,IAAuCrH,QAAQiE,KAA5D;;AAEA;AACAjE,wBAAQwH,SAAR,IAAqBxH,QAAQsH,EAA7B;AACAtH,wBAAQyH,SAAR,IAAqBzH,QAAQuH,EAA7B;;AAEA;AACAvH,wBAAQsH,EAAR,GAAanG,KAAK4L,KAAL,CAAW/M,QAAQwH,SAAnB,CAAb;AACAxH,wBAAQuH,EAAR,GAAapG,KAAK4L,KAAL,CAAW/M,QAAQyH,SAAnB,CAAb;;AAEA;AACAzH,wBAAQwH,SAAR,IAAqBxH,QAAQsH,EAA7B;AACAtH,wBAAQyH,SAAR,IAAqBzH,QAAQuH,EAA7B;;AAEA;AACAvH,wBAAQ0H,eAAR,GAA0B1H,QAAQuC,CAAR,GAAYvC,QAAQsH,EAA9C;AACAtH,wBAAQ2H,eAAR,GAA0B3H,QAAQkB,CAAR,GAAYlB,QAAQuH,EAA9C;AACH,aA1BD,MA0BO;AACH;AACAvH,wBAAQ0H,eAAR,GAA0B1H,QAAQuC,CAAlC;AACAvC,wBAAQ2H,eAAR,GAA0B3H,QAAQkB,CAAlC;AACH;;AAED;;AAEA;AACA;;AAEA,gBAAIlB,QAAQ0H,eAAR,IAA2B,CAA/B,EAAkC;AAC9B1H,wBAAQ0H,eAAR,GAA0B,CAA1B;AACH,aAFD,MAEO,IAAK1H,QAAQ0H,eAAR,GAA0B1H,QAAQ4D,KAAnC,IAA6C6B,OAAO7B,KAAxD,EAA+D;AAClE5D,wBAAQ0H,eAAR,GAA0BjC,OAAO7B,KAAP,GAAe5D,QAAQ4D,KAAjD;AACH;;AAED,gBAAI5D,QAAQ2H,eAAR,IAA2B,CAA/B,EAAkC;AAC9B3H,wBAAQ2H,eAAR,GAA0B,CAA1B;AACH,aAFD,MAEO,IAAK3H,QAAQ2H,eAAR,GAA0B3H,QAAQqB,MAAnC,IAA8CoE,OAAOpE,MAAzD,EAAiE;AACpErB,wBAAQ2H,eAAR,GAA0BlC,OAAOpE,MAAP,GAAgBrB,QAAQqB,MAAlD;AACH;;AAED;;AAEAmK,yCAA6BxL,QAAQ0H,eAArC,EAAsD1H,QAAQ2H,eAA9D,EAA+E/C,KAA/E;;AAEA;AACA,gBAAIkB,kBAAJ,EAAwB;AACpB9F,wBAAQ0H,eAAR,GAA0B1H,QAAQuC,CAAlC;AACAvC,wBAAQ2H,eAAR,GAA0B3H,QAAQkB,CAAlC;;AAEA,oBAAIwM,UAAU,CAAd;AACA,oBAAIC,UAAU,CAAd;AACA,oBAAIC,mBAAmB,CAAvB;AACA,oBAAIC,mBAAmB,CAAvB;;AAEA;AACA;AACA,oBAAI1M,KAAKyJ,GAAL,CAAS5K,QAAQsH,EAAR,GAAasG,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,8BAAU1N,QAAQsH,EAAR,GAAasG,gBAAvB;AACH,iBAFD,MAEO;AACHF,8BAAUvM,KAAK0J,IAAL,CAAU7K,QAAQsH,EAAlB,CAAV;AACH;;AAEDkE,6CAA6BxL,QAAQ0H,eAAR,GAA0BgG,OAAvD,EAAgE1N,QAAQ2H,eAAxE,EAAyF/C,KAAzF;;AAEA,uBAAO,CAACkB,kBAAD,IAAuB3E,KAAKyJ,GAAL,CAASgD,gBAAT,KAA8BzM,KAAKyJ,GAAL,CAAS5K,QAAQsH,EAAjB,IAAuB,CAAnF,EAAsF;AAClFtH,4BAAQ0H,eAAR,IAA2BgG,OAA3B;AACAE,wCAAoBF,OAApB;;AAEA,wBAAIvM,KAAKyJ,GAAL,CAAS5K,QAAQsH,EAAR,GAAasG,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,kCAAU1N,QAAQsH,EAAR,GAAasG,gBAAvB;AACH,qBAFD,MAEO;AACHF,kCAAUvM,KAAK0J,IAAL,CAAU7K,QAAQsH,EAAlB,CAAV;AACH;;AAEDkE,iDAA6BxL,QAAQ0H,eAAR,GAA0BgG,OAAvD,EAAgE1N,QAAQ2H,eAAxE,EAAyF/C,KAAzF;AACH;;AAED;AACA;AACA,oBAAIzD,KAAKyJ,GAAL,CAAS5K,QAAQuH,EAAR,GAAasG,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,8BAAU3N,QAAQuH,EAAR,GAAasG,gBAAvB;AACH,iBAFD,MAEO;AACHF,8BAAUxM,KAAK0J,IAAL,CAAU7K,QAAQuH,EAAlB,CAAV;AACH;;AAEDiE,6CAA6BxL,QAAQ0H,eAArC,EAAsD1H,QAAQ2H,eAAR,GAA0BgG,OAAhF,EAAyF/I,KAAzF;;AAEA,uBAAO,CAACkB,kBAAD,IAAuB3E,KAAKyJ,GAAL,CAASiD,gBAAT,KAA8B1M,KAAKyJ,GAAL,CAAS5K,QAAQuH,EAAjB,IAAuB,CAAnF,EAAsF;AAClFvH,4BAAQ2H,eAAR,IAA2BgG,OAA3B;AACAE,wCAAoBF,OAApB;;AAEA,wBAAIxM,KAAKyJ,GAAL,CAAS5K,QAAQuH,EAAR,GAAasG,gBAAtB,IAA0C,CAA9C,EAAiD;AAC7CF,kCAAU3N,QAAQuH,EAAR,GAAasG,gBAAvB;AACH,qBAFD,MAEO;AACHF,kCAAUxM,KAAK0J,IAAL,CAAU7K,QAAQuH,EAAlB,CAAV;AACH;;AAEDiE,iDAA6BxL,QAAQ0H,eAArC,EAAsD1H,QAAQ2H,eAAR,GAA0BgG,OAAhF,EAAyF/I,KAAzF;AACH;AACJ;;AAED5E,oBAAQuC,CAAR,GAAYvC,QAAQ0H,eAApB;AACA1H,oBAAQkB,CAAR,GAAYlB,QAAQ2H,eAApB;AACH;;AAED;;AAEAgC;AACAC;;AAEA;;AAEAzC,2BAAmB3H,MAAnB,CAA0B,CAA1B;;AAEAkK;AACA,aAAK,IAAItK,IAAI,CAAb,EAAgBA,IAAIQ,WAAWN,MAA/B,EAAuCF,GAAvC,EAA4C;AACxCiM,qCAAyBzL,WAAWR,CAAX,CAAzB;AACH;;AAED,aAAK,IAAIA,MAAI,CAAb,EAAgBA,MAAI+H,mBAAmB7H,MAAvC,EAA+CF,KAA/C,EAAoD;AAChD,gBAAI+H,mBAAmB/H,GAAnB,EAAsB0O,WAAtB,CAAkCC,IAAlC,KAA2C,cAA/C,EAA+D;AAC3D;AACAjO;;AAEA;AACA,oBAAIkO,iBAAiB7G,mBAAmB/H,GAAnB,CAArB;AACA4O,+BAAe9L,eAAf;AACA3C,6BAAayO,eAAe5L,OAA5B;AACA,oBAAIe,gBAAgBN,cAAcO,OAAd,CAAsB4K,cAAtB,CAApB;AACAnL,8BAAcrD,MAAd,CAAqB2D,aAArB,EAAoC,CAApC;AACH,aAVD,MAUO,IAAIgE,mBAAmB/H,GAAnB,EAAsB0O,WAAtB,CAAkCC,IAAlC,KAA2C,aAA/C,EAA8D;AACjE;AACAjO;;AAEA;AACA,qBAAK,IAAIV,MAAI,CAAb,EAAgBA,MAAIC,gBAAgBC,MAApC,EAA4CF,KAA5C,EAAiD;AAC7CG,iCAAaF,gBAAgBD,GAAhB,CAAb;AACH;;AAEDC,gCAAgBG,MAAhB,CAAuB,CAAvB;;AAEA;AACA,qBAAK,IAAIJ,MAAI,CAAb,EAAgBA,MAAIK,iBAAiBH,MAArC,EAA6CF,KAA7C,EAAkD;AAC9CM,kCAAcD,iBAAiBL,GAAjB,CAAd;AACH;;AAEDK,iCAAiBD,MAAjB,CAAwB,CAAxB;;AAEAiK;;AAEAzL,mCAAmB,IAAnB;;AAEA2B;AACA,qBAAK,IAAIP,MAAI,CAAb,EAAgBA,MAAIQ,WAAWN,MAA/B,EAAuCF,KAAvC,EAA4C;AACxCyJ,qCAAiBjJ,WAAWR,GAAX,CAAjB;AACH;;AAED;AACA;AACH,aA7BM,MA6BA;AACHmB,6BAAa,MAAb;AACA;AACH;AACJ;AACJ;;AAED;AACAe,WAAOC,qBAAP,CAA6BgM,QAA7B;AACH;;AAED;AACA;AACA,SAASU,WAAT,GAAuB;AACnB;AACAtM,aAASC,cAAT,CAAwB,eAAxB,EAAyCC,SAAzC,gBAAgE/B,kBAAhE;;AAEA;AACA6B,aAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,YAAYpB,YAAhE;;AAEA;AACA4E,YAAQ6I,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBzI,OAAO7B,KAA/B,EAAsC6B,OAAOpE,MAA7C;;AAEA,QAAItB,cAAc,mBAAd,IAAqCA,cAAc,iBAAvD,EAA0E;AACtE8J;AACAM;AACH;;AAED,QAAIpK,cAAc,SAAlB,EAA6B;AACzBoL;AACAf;AACAE;AACAC;AACAC;AACAC;AACAQ;AACAC;AACH,KATD,MASO,IAAInL,cAAc,gBAAlB,EAAoC;AACvCqL;AACH;;AAED;AACA9J,WAAOC,qBAAP,CAA6B0M,WAA7B;AACH;;AAED;;AAEAjP;;AAEAgN;AACA1K,OAAOC,qBAAP,CAA6BgM,QAA7B;AACAjM,OAAOC,qBAAP,CAA6B0M,WAA7B;AACA3M,OAAOC,qBAAP,CAA6B6K,SAA7B","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.lineWidth = 4;\r\n\r\n//Variables\r\n\r\nlet gameState = \"playing\";\r\n\r\nlet currentLevel = 1;\r\n\r\nlet permanentPoints = 0;\r\nlet currentLevelPoints = 0;\r\n\r\nlet xInput = 0;\r\nlet yInput = 0;\r\n\r\nlet preventingMovement = false;\r\n\r\nlet arrowLeftAlreadyPressed = false;\r\nlet arrowUpAlreadyPressed = false;\r\nlet arrowRightAlreadyPressed = false;\r\nlet arrowDownAlreadyPressed = false;\r\nlet shiftAlreadyPressed = false;\r\nlet spaceAlreadyPressed = false;\r\nlet pAlreadyPressed = false;\r\n\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\nlet dashDistance = 96;\r\nlet dashRecoverySeconds = 0.3;\r\nlet allowDashAgainSeconds = 0.9;\r\n\r\n//Used to stop async/await functions by preventing another await to run. Used when Blockie touches activePoints and the current\r\n//instances needs to stop running, yet everything cannot be rejected (because that would stop the level too).\r\nlet cancelAwaitChain = false;\r\n\r\n//Sprite maps. \r\n\r\n//These are used when drawing to easily reference sprites. They are large sprite maps to avoid loading many individual sprite \r\n//files (which would hurt performance).\r\n\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\nlet spCountdownDestructionScene = document.createElement(\"img\");\r\nspCountdownDestructionScene.src = \"../images/spCountdownDestructionScene.png\";\r\n\r\nlet gameScale = 1;\r\n\r\nlet countdown = 0;\r\n\r\n//Arrays\r\n\r\nlet keysDown = [];\r\n\r\nlet waitingTimeouts = [];\r\nlet passivePoints = [];\r\nlet activePoints = [];\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet movingHorizontalLasers = [];\r\nlet movingVerticalLasers = [];\r\nlet bombs = [];\r\nlet walls = [];\r\nlet partyHats = [];\r\n\r\n//allObjects is used to make destroying all instances (reject or resolve) possible with a for loop.\r\nlet allObjects = [];\r\n\r\nlet currentTimeouts = [];\r\nlet currentIntervals = [];\r\n\r\nlet collidingInstances = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.targetXLocation = this.x;\r\n        this.targetYLocation = this.y;\r\n\r\n        this.state = \"playing\";\r\n\r\n        this.sprite = spBlockiePlaying;\r\n        this.sx = 0;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.remainingDashSeconds = 0;\r\n    };\r\n};\r\n\r\nclass WaitingTimeout {\r\n    constructor() {\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\n//The difference between PassivePoints and ActivePoints is that the latter resolve all currently running promises when touched by\r\n//Blockie, while the former do not.\r\n\r\nclass PassivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n\r\n        //Used to draw the remaining seconds meter above the instance.\r\n        this.totalFiringSeconds = totalFiringSeconds;\r\n        this.remainingFiringSeconds = 0;\r\n    };\r\n};\r\n\r\nclass ActivePoint {\r\n    constructor(x, y, totalFiringSeconds) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 16;\r\n        this.height = 16;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalResolve;\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass HorizontalLaser {\r\n    constructor(y, height) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass VerticalLaser {\r\n    constructor(x, width) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingHorizontalLaser {\r\n    constructor(y, height, speed) {\r\n        this.x = 0;\r\n        this.y = y;\r\n        this.width = canvas.width;\r\n        this.height = height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass MovingVerticalLaser {\r\n    constructor(x, width, speed) {\r\n        this.x = x;\r\n        this.y = 0;\r\n        this.width = width;\r\n        this.height = canvas.height;\r\n        this.speed = speed;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Bomb {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    };\r\n};\r\n\r\nclass Wall {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        //Allows for each instance to be \"destroyed\" from an outside source (through level resets, Blockie interaction, etc.).\r\n        this.externalReject;\r\n        this.timeout;\r\n    }\r\n}\r\n\r\nclass PartyHat {\r\n    constructor() {\r\n        this.x = blockie.x + 8;\r\n        this.y = -20;\r\n        this.width = 16;\r\n        this.height = 20;\r\n    };\r\n};\r\n\r\nlet blockie = new Player();\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Since these are frequently used numbers, they are variables for simplicity. The canvas' width and height are the same, so they \r\n//work with both axes.\r\nlet oneEigth = 4 * 16;\r\nlet oneFourth = 8 * 16;\r\nlet threeEigths = 12 * 16;\r\nlet oneHalf = canvas.width / 2;\r\nlet fiveEigths = 20 * 16;\r\nlet threeFourths = 24 * 16;\r\nlet sevenEigths = 28 * 16;\r\nlet fullScreen = 32 * 16;\r\n\r\nlet pointOne = 2 * 16;\r\nlet pointTwo = 6 * 16;\r\nlet pointThree = 10 * 16;\r\nlet pointFour = 14 * 16;\r\nlet pointFive = 18 * 16;\r\nlet pointSix = 22 * 16;\r\nlet pointSeven = 26 * 16;\r\nlet pointEight = 30 * 16;\r\n\r\nlet blockieAdjustment = -blockie.width / 2\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(oneHalf + blockieAdjustment, sevenEigths + blockieAdjustment);\r\n\r\n        createCountdownTimer(300);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, fullScreen),\r\n            createWall(14 * 16, 0, 4 * 16, 14 * 16),\r\n            createWall(14 * 16, 18 * 16, 4 * 16, 2 * 16),\r\n            createWall(14 * 16, 24 * 16, 4 * 16, 2 * 16),\r\n            createWall(14 * 16, 30 * 16, 4 * 16, 2 * 16),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createActivePoint(oneHalf - 8, oneHalf - 8, 0),\r\n            createPassivePoint(oneHalf - 8, 22 * 16 - 8, 0, 10)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, fullScreen, 2 * 16),\r\n            createWall(0, 6 * 16, fullScreen, 2 * 16),\r\n            createWall(0, 12 * 16, fullScreen, 2 * 16),\r\n            createWall(0, 18 * 16, fullScreen, 14 * 16),\r\n            createWall(0, 0, 2 * 16, fullScreen),\r\n            createWall(6 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(12 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(18 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(24 * 16, 0, 2 * 16, fullScreen),\r\n            createWall(30 * 16, 0, 2 * 16, fullScreen),\r\n            createPassivePoint(4 * 16 - 8, oneHalf - 8, 0, 16),\r\n            createPassivePoint(28 * 16 - 8, oneHalf - 8, 0, 16),\r\n            loopFireBombs(8 * 16, 2 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(20 * 16, 2 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(2 * 16, 8 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(14 * 16, 8 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(26 * 16, 8 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(8 * 16, 14 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n            loopFireBombs(20 * 16, 14 * 16, 4 * 16, 4 * 16, 0, 2, 1),\r\n\r\n            createActivePoint(oneHalf - 8, 4 * 16 - 8, 3)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createWall(0, 0, 14 * 16, fullScreen),\r\n            createWall(18 * 16, 0, 14 * 16, fullScreen),\r\n            createActivePoint(oneHalf - 8, pointEight - 8, 0),\r\n            fireMovingHorizontalLaser(fullScreen - 32, 32, -1.5, 0, 5)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        await Promise.all([\r\n            createActivePoint(oneHalf - 8, pointOne - 8, 0),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 0, 1, 4),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 2, 1, 4),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 4, 1, 4),\r\n            loopFireMovingHorizontalLasers(0, 32, 2, 6, 1, 4)\r\n        ]);\r\n\r\n        cancelAwaitChain = false;\r\n\r\n        destroyCountdownTimer();\r\n\r\n        console.log(\"Level 3 completed.\");\r\n        increaseLevel();\r\n    } catch (error) {\r\n        console.log(\"Level 1 restarted.\");\r\n    };\r\n};\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelTwo() {\r\n    try {\r\n\r\n    } catch (error) {\r\n        console.log(\"Level 2 restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    gameState = \"playing\";\r\n\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel(reason) {\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentTimeouts.length; i++) {\r\n        clearTimeout(currentTimeouts[i]);\r\n    };\r\n\r\n    currentTimeouts.splice(0);\r\n\r\n    //Stops all currently-running timeouts so that they stop hurting performance and don't execute after reseting.\r\n    for (let i = 0; i < currentIntervals.length; i++) {\r\n        clearInterval(currentIntervals[i]);\r\n    };\r\n\r\n    currentIntervals.splice(0);\r\n\r\n    updateAllObjects();\r\n    for (let i = 0; i < allObjects.length; i++) {\r\n        rejectInstances(allObjects[i]);\r\n    };\r\n\r\n    destroyCountdownTimer();\r\n\r\n    //Removes all points collected in the level.\r\n    currentLevelPoints = 0;\r\n\r\n    //Switches how the game resets based on how it triggered.\r\n    if (reason === \"died\") {\r\n        gameState = \"animatingBlockieDestruction\";\r\n\r\n        //Animates Blockie's destruction.\r\n        blockie.state = \"destructing\";\r\n        blockie.sx = 0;\r\n\r\n        await displayMessage(\"Determination is your only asset.\");\r\n    } else if (reason === \"keyPressed\") {\r\n        blockie.state = \"playing\";\r\n        controlLevel();\r\n    } else if (reason === \"countdownTimer\") {\r\n        gameState = \"playingCutscene\";\r\n        await playCutscene(spCountdownDestructionScene);\r\n        await displayMessage(\"You've failed another world.\");\r\n    };\r\n};\r\n\r\nasync function increaseLevel() {\r\n    gameState = \"finishingLevel\";\r\n\r\n    blockie.angleMovingDegrees = -180;\r\n    currentLevel++;\r\n    //Points are only made permanent once a level is completed and then it is reset.\r\n    permanentPoints += currentLevelPoints;\r\n    currentLevelPoints = 0;\r\n\r\n    //Waits for the PartyHat to descend on to Blockie's head.\r\n    await new Promise((resolve, reject) => {\r\n        let partyHatInstance = new PartyHat();\r\n        partyHats.push(partyHatInstance);\r\n\r\n        function animateFinishedLevelHat() {\r\n            partyHatInstance.y += Math.min(2, (blockie.y - partyHatInstance.y - partyHatInstance.height));\r\n\r\n            if (partyHatInstance.y + partyHatInstance.height !== blockie.y) {\r\n                //Continuously recalls the function until the PartyHat reaches Blockie's head.\r\n                window.requestAnimationFrame(animateFinishedLevelHat);\r\n            } else {\r\n                partyHats.splice(0);\r\n                resolve(\"resolved\");\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(animateFinishedLevelHat);\r\n    });\r\n\r\n    await displayMessage(\"You haven't escaped yet.\")\r\n};\r\n\r\nfunction controlLevel() {\r\n    switch (currentLevel) {\r\n        case 1:\r\n            levelOne();\r\n            break;\r\n        case 2:\r\n            levelTwo();\r\n            break;\r\n    };\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//Resolves all promises and removes all instances from their object arrays.\r\nfunction resolveInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalResolve();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Rejects all promises and removes all instances from their object arrays.\r\nfunction rejectInstances(objectArray) {\r\n    //The for loop's length is determined before it starts to avoid missing the first element.\r\n    let initialArrayLength = objectArray.length;\r\n\r\n    for (let i = initialArrayLength - 1; i >= 0; i--) {\r\n        //Rejects the instances' Promises and timeouts and destroys the instances.\r\n        let instance = objectArray[i];\r\n        instance.externalReject();\r\n        clearTimeout(instance.timeout);\r\n        objectArray.splice(i, 1);\r\n    };\r\n};\r\n\r\n//Adds a currently-running timeout to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimeout(timeout) {\r\n    currentTimeouts.push(timeout);\r\n};\r\n\r\n//Removes a timeout from the array of currently-running timeouts.\r\nfunction removeCurrentTimeout(timeout) {\r\n    let currentTimeoutIndex = currentTimeouts.indexOf(timeout);\r\n    currentTimeouts.splice(currentTimeoutIndex, 1);\r\n};\r\n\r\n//Adds a currently-running interval to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentInterval(interval) {\r\n    currentIntervals.push(interval);\r\n};\r\n\r\n//Removes a interval from the array of currently-running intervals and clears it.\r\nfunction removeCurrentInterval(interval) {\r\n    clearInterval(interval);\r\n    let currentIntervalIndex = currentIntervals.indexOf(interval);\r\n    currentIntervals.splice(currentIntervalIndex, 1);\r\n};\r\n\r\n//Shows a message and awaits a player input to continue the game.\r\nasync function displayMessage(message) {\r\n    //Forces the player to read the message for 1 second before they can continue the game.\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            document.getElementById(\"messageDisplayer\").innerHTML = message;\r\n            gameState = \"displayingMessage\";\r\n            resolve(\"resolved\");\r\n        }, 1000);\r\n    });\r\n\r\n    return await new Promise((resolve, reject) => {\r\n        //Restarts the game once acceptable keys are pressed.\r\n        function resumePlaying() {\r\n            if (keysDown[16] || keysDown[32]) {\r\n                //Prevents dashing immediatley after restarting the game.\r\n                delete keysDown[16];\r\n                delete keysDown[32];\r\n\r\n                document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n\r\n                gameState = \"playing\";\r\n                blockie.state = \"playing\";\r\n\r\n                controlLevel();\r\n\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until an acceptable key is pressed.\r\n                window.requestAnimationFrame(resumePlaying);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(resumePlaying);\r\n    });\r\n};\r\n\r\n//Blockie Functions \r\n\r\nfunction initializeDash() {\r\n    blockie.state = \"recoveringFromDash\";\r\n    blockie.speed = dashDistance;\r\n    recoveringFromDash = true;\r\n    allowDashAgain = false;\r\n\r\n    let endDashRecovery = setTimeout(() => {\r\n        recoveringFromDash = false;\r\n        blockie.state = \"playing\";\r\n        removeCurrentTimeout(endDashRecovery);\r\n    }, dashRecoverySeconds * 1000);\r\n    addCurrentTimeout(endDashRecovery);\r\n\r\n    //Sets an interval to the length of the dash recovery which counts down the semi-accurate remaining length of the timeout.\r\n    //This is used in drawing the remaining seconds meter to show the player how much more recovery time that they need to wait.\r\n    blockie.remainingDashSeconds = allowDashAgainSeconds;\r\n    let remainingDashSecondsInterval = setInterval(() => {\r\n        blockie.remainingDashSeconds -= 0.004;\r\n    }, 1);\r\n    addCurrentInterval(remainingDashSecondsInterval);\r\n\r\n    let resetAllowDashAgain = setTimeout(() => {\r\n        allowDashAgain = true;\r\n        removeCurrentInterval(remainingDashSecondsInterval);\r\n        removeCurrentTimeout(resetAllowDashAgain);\r\n    }, allowDashAgainSeconds * 1000);\r\n    addCurrentTimeout(resetAllowDashAgain);\r\n};\r\n\r\n//Allows for dashing again.\r\nfunction resetBlockieState() {\r\n    blockie.state = \"playing\";\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n\r\n    //Prevents Blockie from dashing again based off of one button press.\r\n    delete keysDown[16];\r\n    delete keysDown[32];\r\n    delete keysDown[37];\r\n    delete keysDown[38];\r\n    delete keysDown[39];\r\n    delete keysDown[40];\r\n}\r\n\r\n//Instance Functions\r\n\r\n//Creates a WaitingTimeout instance, and awaits for its resolution to then create the root collision instance. This is meant to allow\r\n//for instances to spawn at different times concurrently (using Promise.all) or spawn a bit after another's destruction.\r\nfunction setWaitingTimeout(waitingSeconds) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new WaitingTimeout();\r\n    waitingTimeouts.push(instance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = waitingTimeouts.indexOf(instance);\r\n            waitingTimeouts.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, waitingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Sets the timeouts that cause the collision instance to \"blink\" 2 times before firing. All warning timeouts are set at the same length \r\n//to allow the player to predict collisions.\r\nasync function setWarningTimeouts(instanceAffecting) {\r\n    //Each timeout sets the affected instance's timeout and reject function equal to a new \"blinking\" timeout for a bit.\r\n    let warningSeconds = 1;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = true;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            instanceAffecting.visible = false;\r\n\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instanceAffecting.externalResolve = resolve;\r\n        instanceAffecting.externalReject = reject;\r\n\r\n        instanceAffecting.timeout = setTimeout(() => {\r\n            //Makes the affected instance visible and collidable.\r\n            instanceAffecting.state = \"firing\";\r\n            instanceAffecting.visible = true;\r\n            resolve(\"resolved\");\r\n        }, warningSeconds * 0.25 * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createPassivePoint(x, y, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new PassivePoint(x, y, firingSeconds);\r\n    passivePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        //Sets an interval to the length of the firingSeconds which counts down the semi-accurate remaining length of the timeout.\r\n        //This is used in drawing the remaining seconds meter to show the player how much longer the point will exist.\r\n        instance.remainingFiringSeconds = firingSeconds;\r\n        let remainingFiringSecondsInterval = setInterval(() => {\r\n            instance.remainingFiringSeconds -= 0.004;\r\n        }, 1);\r\n        addCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            removeCurrentInterval(remainingFiringSecondsInterval);\r\n\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = passivePoints.indexOf(instance);\r\n            passivePoints.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createActivePoint(x, y, waitingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new ActivePoint(x, y);\r\n    activePoints.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireHorizontalLasers(y, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireHorizontalLaser(y, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireHorizontalLaser(y, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new HorizontalLaser(y, height);\r\n    horizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireVerticalLasers(x, width, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireVerticalLaser(x, width, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireVerticalLaser(x, width, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new VerticalLaser(x, width);\r\n    verticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingHorizontalLasers(y, height, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingHorizontalLaser(y, height, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingHorizontalLaser(y, height, speed);\r\n    movingHorizontalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingHorizontalLasers.indexOf(instance);\r\n            movingHorizontalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireMovingVerticalLasers(x, width, speed, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireMovingVerticalLaser(x, width, speed, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new MovingVerticalLaser(x, width, speed);\r\n    movingVerticalLasers.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = movingVerticalLasers.indexOf(instance);\r\n            movingVerticalLasers.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Continuously recreates the same instance until the activePoint is touched.\r\nasync function loopFireBombs(x, y, width, height, initialWaitingSeconds, waitingSeconds, firingSeconds) {\r\n    await setWaitingTimeout(initialWaitingSeconds);\r\n\r\n    //Creates a new instance after each previous one has resolved.\r\n    while (!cancelAwaitChain) {\r\n        await fireBomb(x, y, width, height, waitingSeconds, firingSeconds);\r\n    };\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    return;\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function fireBomb(x, y, width, height, waitingSeconds, firingSeconds) {\r\n    //Waits to create the instance to allow for pauses and staggered collision instances.\r\n    await setWaitingTimeout(waitingSeconds);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Bomb(x, y, width, height);\r\n    bombs.push(instance);\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    await setWarningTimeouts(instance);\r\n\r\n    //Cancels the next await if the current screen is being resolved by an activePoint.\r\n    if (cancelAwaitChain) return;\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n\r\n        instance.timeout = setTimeout(() => {\r\n            //Removes the instance from its object array (so it isn't drawn or colliding) and resolves it once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            resolve(\"resolved\");\r\n        }, firingSeconds * 1000);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nasync function createWall(x, y, width, height) {\r\n    //Creates an instance and sets all of its initial properties.\r\n    let instance = new Wall(x, y, width, height);\r\n    walls.push(instance);\r\n\r\n    //Creates a timeout for the instance's destruction and links its deactivation functions.\r\n    return await new Promise((resolve, reject) => {\r\n        //Links the instance's deactivation functions to itself to allow outside callings.\r\n        instance.externalResolve = resolve;\r\n        instance.externalReject = reject;\r\n    });\r\n};\r\n\r\n//Instance Helper Functions\r\n\r\nfunction updateAllObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs,\r\n        walls\r\n    ];\r\n};\r\n\r\nfunction updateAllInteractiveObjects() {\r\n    allObjects = [\r\n        waitingTimeouts,\r\n        passivePoints,\r\n        activePoints,\r\n        horizontalLasers,\r\n        verticalLasers,\r\n        movingHorizontalLasers,\r\n        movingVerticalLasers,\r\n        bombs\r\n    ];\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        if (movingHorizontalLasers[i].state !== \"warning\") {\r\n            movingHorizontalLasers[i].y += movingHorizontalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Moves lasers by adding speed to their location every step.\r\nfunction moveMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        if (movingVerticalLasers[i].state !== \"warning\") {\r\n            movingVerticalLasers[i].x += movingVerticalLasers[i].speed;\r\n        };\r\n    };\r\n};\r\n\r\n//Drawing Functions\r\n\r\nfunction animateBlockie() {\r\n    //Draws the remaining seconds meter for when Blockie can dash again.\r\n    if (!allowDashAgain && gameState === \"playing\") {\r\n        context.fillStyle = \"#378CFF\";\r\n        context.fillRect(blockie.x, blockie.y - 8, blockie.width * (blockie.remainingDashSeconds / allowDashAgainSeconds), 4);\r\n    };\r\n\r\n    //Draws Blockie himself.\r\n    if (blockie.state === \"playing\") {\r\n        blockie.sprite = spBlockiePlaying;\r\n        //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n        //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n        blockie.sx = blockie.width * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n    } else if (blockie.state === \"recoveringFromDash\") {\r\n        blockie.sprite = spBlockieRecoveringFromDash;\r\n        blockie.sx = 0;\r\n    } else if (blockie.state === \"destructing\") {\r\n        blockie.sprite = spBlockieDestructing;\r\n\r\n        let endAnimateBlockieDestructing = setTimeout(() => {\r\n            clearInterval(animateBlockieDestructing);\r\n            removeCurrentTimeout(animateBlockieDestructing);\r\n            removeCurrentTimeout(endAnimateBlockieDestructing);\r\n        }, 1.5 * 1000);\r\n        addCurrentTimeout(endAnimateBlockieDestructing);\r\n\r\n        let animateBlockieDestructing = setInterval(() => {\r\n            blockie.sx += blockie.width;\r\n        }, 0.5 * 1000);\r\n        addCurrentTimeout(animateBlockieDestructing);\r\n    };\r\n};\r\n\r\nfunction drawBlockie() {\r\n    context.drawImage(blockie.sprite, blockie.sx, 0, blockie.width, blockie.height, blockie.x, blockie.y, blockie.width, blockie.height);\r\n};\r\n\r\nfunction drawPassivePoints() {\r\n    for (let i = 0; i < passivePoints.length; i++) {\r\n        let currentInstance = passivePoints[i];\r\n\r\n        //Draws the remaining seconds meter for when the point will disappear.\r\n        context.fillStyle = \"#E6FF16\";\r\n        context.fillRect(currentInstance.x, currentInstance.y - 8, currentInstance.width * (currentInstance.remainingFiringSeconds / currentInstance.totalFiringSeconds), 4);\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#E6FF16\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#E6FF16\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawActivePoints() {\r\n    for (let i = 0; i < activePoints.length; i++) {\r\n        let currentInstance = activePoints[i];\r\n\r\n        //Draws the point itself.\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF9012\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF9012\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x + 16, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 32, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 16, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 32, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingHorizontalLasers() {\r\n    for (let i = 0; i < movingHorizontalLasers.length; i++) {\r\n        let currentInstance = movingHorizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Left warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.x + 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.x + 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n\r\n                //Right warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.width - 16, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.lineTo(currentInstance.width - 24, currentInstance.y + currentInstance.height * Math.max(0, Math.sign(currentInstance.speed)));\r\n                context.lineTo(currentInstance.width - 32, currentInstance.y + currentInstance.height * Math.abs(Math.min(0, Math.sign(currentInstance.speed))));\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawMovingVerticalLasers() {\r\n    for (let i = 0; i < movingVerticalLasers.length; i++) {\r\n        let currentInstance = movingVerticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n\r\n                //Warning triangles are complex because they must face the direction of the laser's speed.\r\n                //Top warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.y + 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.y + 32);\r\n                context.fill();\r\n\r\n                //Bottom warning triangle.\r\n                context.beginPath();\r\n                context.moveTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 16);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.max(0, Math.sign(currentInstance.speed)), currentInstance.height - 24);\r\n                context.lineTo(currentInstance.x + currentInstance.width * Math.abs(Math.min(0, Math.sign(currentInstance.speed))), currentInstance.height - 32);\r\n                context.fill();\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeStyle = \"#FF51EF\";\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillStyle = \"#FF51EF\";\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nfunction drawWalls() {\r\n    for (let i = 0; i < walls.length; i++) {\r\n        let currentInstance = walls[i];\r\n        context.fillStyle = \"#741EFF\";\r\n        context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n    };\r\n};\r\n\r\nfunction drawPartyHats() {\r\n    for (let i = 0; i < partyHats.length; i++) {\r\n        let currentInstance = partyHats[i];\r\n\r\n        context.fillStyle = \"#378CFF\";\r\n\r\n        context.beginPath();\r\n        context.moveTo(currentInstance.x, currentInstance.y + currentInstance.height);\r\n        context.lineTo(currentInstance.x + currentInstance.width / 2, currentInstance.y);\r\n        context.lineTo(currentInstance.x + currentInstance.width, currentInstance.y + currentInstance.height);\r\n        context.fill();\r\n    };\r\n};\r\n\r\n//Collision Functions\r\n\r\nfunction checkCollisionsWithClass(classArray) {\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkInstancesColliding(blockie, classArray[i]);\r\n    };\r\n};\r\n\r\nfunction checkTestCollisionsWithClass(instanceOneX, instanceOneY, classArray) {\r\n    preventingMovement = false;\r\n\r\n    for (let i = 0; i < classArray.length; i++) {\r\n        checkTestInstancesColliding(blockie, instanceOneX, instanceOneY, classArray[i]);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkInstancesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state === \"firing\")) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state === \"firing\")) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        collidingInstances.push(instanceTwo);\r\n    };\r\n};\r\n\r\n//Determines if two instances are \"colliding\" (with Blockie's theoretical test locations). They cannot be colliding if one is in \r\n//the warning state.\r\nfunction checkTestInstancesColliding(instanceOne, instanceOneX, instanceOneY, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOneX) && (instanceOneX <= instanceTwo.x + instanceTwo.width)) {\r\n        xColliding = true;\r\n    } else if ((instanceOneX <= instanceTwo.x) && (instanceTwo.x <= instanceOneX + instanceOne.width)) {\r\n        xColliding = true;\r\n    };\r\n\r\n    if ((instanceTwo.y <= instanceOneY) && (instanceOneY <= instanceTwo.y + instanceTwo.height)) {\r\n        yColliding = true;\r\n    } else if ((instanceOneY <= instanceTwo.y) && (instanceTwo.y <= instanceOneY + instanceOne.height)) {\r\n        yColliding = true;\r\n    };\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        preventingMovement = true;\r\n    };\r\n};\r\n\r\n//Input Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the keysDown object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        //Special keys can only be set as \"down\" during the first single frame of being held until release. This is done by preventing\r\n        //the key from being activated again before release and by deleting it from the array on the second frame of being pressed.\r\n        if (shiftAlreadyPressed) {\r\n            delete keysDown[16];\r\n        };\r\n        if (spaceAlreadyPressed) {\r\n            delete keysDown[32];\r\n        };\r\n        if (arrowLeftAlreadyPressed) {\r\n            delete keysDown[37];\r\n        };\r\n        if (arrowUpAlreadyPressed) {\r\n            delete keysDown[38];\r\n        };\r\n        if (arrowRightAlreadyPressed) {\r\n            delete keysDown[39];\r\n        };\r\n        if (arrowDownAlreadyPressed) {\r\n            delete keysDown[40];\r\n        };\r\n        if (pAlreadyPressed) {\r\n            delete keysDown[80];\r\n        };\r\n\r\n        if (e.keyCode === 16) {\r\n            if (!shiftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                shiftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 32) {\r\n            if (!spaceAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                spaceAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 37) {\r\n            if (!arrowLeftAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowLeftAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 38) {\r\n            if (!arrowUpAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowUpAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 39) {\r\n            if (!arrowRightAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowRightAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 40) {\r\n            if (!arrowDownAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                arrowDownAlreadyPressed = true;\r\n            };\r\n        } else if (e.keyCode === 80) {\r\n            if (!pAlreadyPressed) {\r\n                keysDown[e.keyCode] = true;\r\n                pAlreadyPressed = true;\r\n            };\r\n        } else {\r\n            keysDown[e.keyCode] = true;\r\n        };\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the keysDown object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        //Setting the flag to false allows the key to be set as \"down\" again.\r\n        if (e.keyCode === 16) {\r\n            delete keysDown[e.keyCode];\r\n            shiftAlreadyPressed = false;\r\n        } else if (e.keyCode === 32) {\r\n            delete keysDown[e.keyCode];\r\n            spaceAlreadyPressed = false;\r\n        } else if (e.keyCode === 37) {\r\n            delete keysDown[e.keyCode];\r\n            arrowLeftAlreadyPressed = false;\r\n        } else if (e.keyCode === 38) {\r\n            delete keysDown[e.keyCode];\r\n            arrowUpAlreadyPressed = false;\r\n        } else if (e.keyCode === 39) {\r\n            delete keysDown[e.keyCode];\r\n            arrowRightAlreadyPressed = false;\r\n        } else if (e.keyCode === 40) {\r\n            delete keysDown[e.keyCode];\r\n            arrowDownAlreadyPressed = false;\r\n        } else if (e.keyCode === 80) {\r\n            delete keysDown[e.keyCode];\r\n            pAlreadyPressed = false;\r\n        } else {\r\n            delete keysDown[e.keyCode];\r\n        };\r\n    });\r\n};\r\n\r\n//Scale Functions \r\n\r\n//Scales the game (including the title, info, and others) along the restricting axis while preserving the games aspect ratio.\r\nfunction scaleGame() {\r\n    //Determines the scale of the most restricted axis.\r\n    gameScale = Math.min(window.innerWidth / 520, window.innerHeight / 617);\r\n\r\n    //Changes the scale of the game's CSS container.\r\n    let gameContainer = document.getElementById(\"gameContainer\");\r\n    gameContainer.style.transform = \"scale(\" + gameScale + \")\";\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(scaleGame);\r\n};\r\n\r\n//Cutscene Functions\r\n\r\n//Waits for a small cutscene to finish.\r\nasync function playCutscene(scene) {\r\n    let secondsPerFrame = 0.15;\r\n    let cutsceneSideLength = 128;\r\n    let cutscenesx = 0;\r\n    let lastFramesx = scene.naturalWidth - cutsceneSideLength;\r\n\r\n    //Each time the frame changes, the next sprite in the sprite map is shown.\r\n    let cutscene = setInterval(() => {\r\n        cutscenesx += cutsceneSideLength;\r\n    }, secondsPerFrame * 1000);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        function drawCutscene() {\r\n            //Draws a border around the small cutscene in the center of the canvas.\r\n            context.strokeStyle = \"#FFFFFF\";\r\n            context.drawImage(scene, cutscenesx, 0, cutsceneSideLength, cutsceneSideLength, 192, 192, cutsceneSideLength, cutsceneSideLength);\r\n            context.strokeRect(192, 192, cutsceneSideLength, cutsceneSideLength);\r\n\r\n            //Resolves the Promise if the cutscene is over.\r\n            if (cutscenesx > lastFramesx) {\r\n                resolve(\"resolved\");\r\n            } else {\r\n                //Continuously recalls the function until the animation is completed.\r\n                window.requestAnimationFrame(drawCutscene);\r\n            };\r\n        };\r\n\r\n        window.requestAnimationFrame(drawCutscene);\r\n    });\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\n//Creates a timer that resets the level if the counter reaches 0.\r\nfunction createCountdownTimer(totalSeconds) {\r\n    let seconds = totalSeconds;\r\n\r\n    //Sets the timer container to be visible.\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"visible\";\r\n\r\n    countdown = setInterval(() => {\r\n        //Each interval the amount of seconds decreases and the displayed numbers are calculated.\r\n        seconds--;\r\n        let currentMinutes = Math.floor(seconds / 60);\r\n        let currentSeconds = seconds % 60;\r\n\r\n        //The remaining time is displayed.\r\n        let countdownTimer = document.getElementById(\"countdownTimer\");\r\n        countdownTimer.innerHTML = `${currentMinutes}:${currentSeconds}`;\r\n\r\n        //Restarts the level if the timer reaches 0.\r\n        if (seconds <= 0) {\r\n            destroyCountdownTimer();\r\n            restartLevel(\"countdownTimer\");\r\n        };\r\n    }, 1000);\r\n};\r\n\r\n//Sets the countdownTimer to be invisible and clears its interval.\r\nfunction destroyCountdownTimer() {\r\n    let countdownTimerContainer = document.getElementById(\"countdownTimerContainer\");\r\n    countdownTimerContainer.style.visibility = \"hidden\";\r\n    clearInterval(countdown);\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\nfunction gameLoop() {\r\n    //Restarts the level if P is pressed.\r\n    if (keysDown[80]) {\r\n        restartLevel(\"keyPressed\");\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        //Blockie's Movement\r\n\r\n        if (!recoveringFromDash) {\r\n            //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n            xInput = 0;\r\n            yInput = 0;\r\n\r\n            //Each WASD key changes the angle of Blockie's movement.\r\n            //Right\r\n            if (keysDown[68]) {\r\n                xInput++;\r\n            };\r\n\r\n            //Left\r\n            if (keysDown[65]) {\r\n                xInput--;\r\n            };\r\n\r\n            //Down\r\n            if (keysDown[83]) {\r\n                yInput++;\r\n            };\r\n\r\n            //Up\r\n            if (keysDown[87]) {\r\n                yInput--;\r\n            };\r\n\r\n            if ((keysDown[16] || keysDown[32]) && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n                //Shift acts uniquely because it only is \"down\" for one frame; therefore, it must also be deleted after use because\r\n                //otherwise it could never be deleted in the input function.\r\n                delete keysDown[16];\r\n\r\n                //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a recovery \r\n                //animation.\r\n                initializeDash();\r\n            } else if ((keysDown[37] || keysDown[38] || keysDown[39] || keysDown[40]) && allowDashAgain) {\r\n                //Pressing the Arrow keys causes Blockie to \"dash\" by increasing his speed, creating a cooldown timeout, and playing a \r\n                //recovery animation. Directional inputs are reset to allow Blockie to dash only in the direction of the arrow keys.\r\n                xInput = 0;\r\n                yInput = 0;\r\n\r\n                //Right\r\n                if (keysDown[39]) {\r\n                    xInput++;\r\n                };\r\n\r\n                //Left\r\n                if (keysDown[37]) {\r\n                    xInput--;\r\n                };\r\n\r\n                //Down\r\n                if (keysDown[40]) {\r\n                    yInput++;\r\n                };\r\n\r\n                //Up\r\n                if (keysDown[38]) {\r\n                    yInput--;\r\n                };\r\n\r\n                initializeDash();\r\n            } else {\r\n                blockie.speed = 2;\r\n            };\r\n\r\n            //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n            //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n            //clockwise direction continuously.\r\n            blockie.angleMovingDegrees = -180;\r\n\r\n            if (xInput !== 0 || yInput !== 0) {\r\n                //Finds the angle that Blockie is moving in radians based on the inputs.\r\n                blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n                //Converted to make the direction of Blockie more discernible.\r\n                blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n                //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n                blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n                blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n                //The SubPixels store the directional velocity.\r\n                blockie.xSubPixel += blockie.dx;\r\n                blockie.ySubPixel += blockie.dy;\r\n\r\n                //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n                blockie.dx = Math.floor(blockie.xSubPixel);\r\n                blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n                //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n                blockie.xSubPixel -= blockie.dx;\r\n                blockie.ySubPixel -= blockie.dy;\r\n\r\n                //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n                blockie.targetXLocation = blockie.x + blockie.dx;\r\n                blockie.targetYLocation = blockie.y + blockie.dy;\r\n            } else {\r\n                //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n            };\r\n\r\n            //Movement Obstacles\r\n\r\n            //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n            //the last available space to avoid a gap.\r\n\r\n            if (blockie.targetXLocation <= 0) {\r\n                blockie.targetXLocation = 0;\r\n            } else if ((blockie.targetXLocation + blockie.width) >= canvas.width) {\r\n                blockie.targetXLocation = canvas.width - blockie.width;\r\n            };\r\n\r\n            if (blockie.targetYLocation <= 0) {\r\n                blockie.targetYLocation = 0;\r\n            } else if ((blockie.targetYLocation + blockie.height) >= canvas.height) {\r\n                blockie.targetYLocation = canvas.height - blockie.height;\r\n            };\r\n\r\n            //Updates Blockie's location if he's touching a wall to the nearest open location.\r\n\r\n            checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation, walls);\r\n\r\n            //Blockie's movement will be prevented on some axes if he is touching a wall at his target location.\r\n            if (preventingMovement) {\r\n                blockie.targetXLocation = blockie.x;\r\n                blockie.targetYLocation = blockie.y;\r\n\r\n                let xChange = 0;\r\n                let yChange = 0;\r\n                let xTestingDistance = 0;\r\n                let yTestingDistance = 0;\r\n\r\n                //This checks for the last available x location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                    xChange = blockie.dx - xTestingDistance;\r\n                } else {\r\n                    xChange = Math.sign(blockie.dx);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n\r\n                while (!preventingMovement && Math.abs(xTestingDistance) <= Math.abs(blockie.dx) - 1) {\r\n                    blockie.targetXLocation += xChange;\r\n                    xTestingDistance += xChange;\r\n\r\n                    if (Math.abs(blockie.dx - xTestingDistance) < 1) {\r\n                        xChange = blockie.dx - xTestingDistance;\r\n                    } else {\r\n                        xChange = Math.sign(blockie.dx);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation + xChange, blockie.targetYLocation, walls);\r\n                };\r\n\r\n                //This checks for the last available y location after Blockie has already moved in his desired direction. This \r\n                //allows for moving along walls while moving in a diagonal direction.\r\n                if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                    yChange = blockie.dy - yTestingDistance;\r\n                } else {\r\n                    yChange = Math.sign(blockie.dy);\r\n                };\r\n\r\n                checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n\r\n                while (!preventingMovement && Math.abs(yTestingDistance) <= Math.abs(blockie.dy) - 1) {\r\n                    blockie.targetYLocation += yChange;\r\n                    yTestingDistance += yChange;\r\n\r\n                    if (Math.abs(blockie.dy - yTestingDistance) < 1) {\r\n                        yChange = blockie.dy - yTestingDistance;\r\n                    } else {\r\n                        yChange = Math.sign(blockie.dy);\r\n                    };\r\n\r\n                    checkTestCollisionsWithClass(blockie.targetXLocation, blockie.targetYLocation + yChange, walls);\r\n                };\r\n            };\r\n\r\n            blockie.x = blockie.targetXLocation;\r\n            blockie.y = blockie.targetYLocation;\r\n        };\r\n\r\n        //Other Instances' Movements\r\n\r\n        moveMovingHorizontalLasers();\r\n        moveMovingVerticalLasers();\r\n\r\n        //Collision Handling\r\n\r\n        collidingInstances.splice(0);\r\n\r\n        updateAllInteractiveObjects();\r\n        for (let i = 0; i < allObjects.length; i++) {\r\n            checkCollisionsWithClass(allObjects[i]);\r\n        };\r\n\r\n        for (let i = 0; i < collidingInstances.length; i++) {\r\n            if (collidingInstances[i].constructor.name === \"PassivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Resolves the PassivePoint's Promise and destroys the instance once it is touched.\r\n                let collidingPoint = collidingInstances[i];\r\n                collidingPoint.externalResolve();\r\n                clearTimeout(collidingPoint.timeout);\r\n                let instanceIndex = passivePoints.indexOf(collidingPoint);\r\n                passivePoints.splice(instanceIndex, 1);\r\n            } else if (collidingInstances[i].constructor.name === \"ActivePoint\") {\r\n                //Adds points to the current level's total.\r\n                currentLevelPoints++;\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentTimeouts.length; i++) {\r\n                    clearTimeout(currentTimeouts[i]);\r\n                };\r\n\r\n                currentTimeouts.splice(0);\r\n\r\n                //Stops all currently-running timeouts so that they stop hurting performance and don't execute after resetting.\r\n                for (let i = 0; i < currentIntervals.length; i++) {\r\n                    clearInterval(currentIntervals[i]);\r\n                };\r\n\r\n                currentIntervals.splice(0);\r\n\r\n                resetBlockieState();\r\n\r\n                cancelAwaitChain = true;\r\n\r\n                updateAllObjects();\r\n                for (let i = 0; i < allObjects.length; i++) {\r\n                    resolveInstances(allObjects[i]);\r\n                };\r\n\r\n                //Allows for Blockie to touch activePoints if they are underneath collisions, since he won't die.\r\n                break;\r\n            } else {\r\n                restartLevel(\"died\");\r\n                break;\r\n            };\r\n        };\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting or changing levels.\r\nfunction drawingLoop() {\r\n    //Updates the amount of points in the gameInfo div.\r\n    document.getElementById(\"currentPoints\").innerHTML = `Points: ${currentLevelPoints}|7`;\r\n\r\n    //Update the current level in the currentLevel div.\r\n    document.getElementById(\"currentLevel\").innerHTML = \"Level: \" + currentLevel;\r\n\r\n    //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (gameState !== \"displayingMessage\" && gameState !== \"playingCutscene\") {\r\n        animateBlockie();\r\n        drawBlockie();\r\n    };\r\n\r\n    if (gameState === \"playing\") {\r\n        drawWalls();\r\n        drawPassivePoints();\r\n        drawActivePoints();\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawMovingHorizontalLasers();\r\n        drawMovingVerticalLasers();\r\n        drawBombs();\r\n    } else if (gameState === \"finishingLevel\") {\r\n        drawPartyHats();\r\n    };\r\n\r\n    //Continuously recalls the function.\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlevelOne();\r\n\r\ninitializeKeyInputs();\r\nwindow.requestAnimationFrame(gameLoop);\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(scaleGame);"]}