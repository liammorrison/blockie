{"version":3,"sources":["../src/blockie.js"],"names":["initializeLevel","canvas","width","blockie","height","Promise","all","fireHorizontalLaser","fireVerticalLaser","fireBomb","console","log","levelOne","gameState","i","currentPromiseRejectFunctions","length","currentTimers","clearTimeout","splice","state","sx","resolve","reject","drawGameOverScreen","setTimeout","context","clearRect","document","getElementById","innerHTML","horizontalLasers","verticalLasers","bombs","diplayingGameOverScreen","resumeGame","window","requestAnimationFrame","controlRestartingLevel","restartLevel","getContext","fillStyle","strokeStyle","lineWidth","KeysPressed","xInput","yInput","colliding","shiftPressed","recoveringFromDash","allowDashAgain","spBlockiePlaying","createElement","src","spBlockieDestructing","spBlockieRecoveringFromDash","Player","spriteSideLength","x","y","speed","angleMovingDegrees","angleMovingRadians","dx","dy","xSubPixel","ySubPixel","testXLocation","testYLocation","sprite","horizontalLaser","visible","verticalLaser","bomb","blockieX","blockieY","gameLoop","addCurrentPromiseRejectFunction","promise","push","addCurrentTimer","timer","removeCurrentPromiseRejectFunction","currentPromiseRejectFunctionIndex","indexOf","removeCurrentTimer","currentTimerIndex","totalSeconds","instance","setWarningTimers","endFiring","instanceIndex","warningInvisibleOne","warningVisibleTwo","warningInvisibleTwo","fire","drawHorizontalLasers","currentInstance","strokeRect","fillRect","drawVerticalLasers","drawBombs","initializeKeyInputs","addEventListener","e","keyCode","checkSpritesColliding","instanceOne","instanceTwo","xColliding","yColliding","calculateAngleRadians","Math","atan2","convertRadiansToDegrees","radians","PI","endDashRecoveryTime","endDashRecovery","resetAllowDashAgainTime","resetAllowDashAgain","cos","sin","floor","drawingLoop","round","endAnimateBlockieDestructing","clearInterval","animateBlockieDestructing","setInterval","drawImage"],"mappings":"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","file":"blockie.js","sourcesContent":["//Game Setup\r\n\r\nconst canvas = document.getElementById(\"game\");\r\nconst context = canvas.getContext(\"2d\");\r\ncontext.fillStyle = \"white\";\r\ncontext.strokeStyle = \"#FFFFFF\";\r\ncontext.lineWidth = 5;\r\n\r\n//Variables\r\n\r\nlet KeysPressed = [];\r\nlet xInput = 0;\r\nlet yInput = 0;\r\nlet colliding = false;\r\nlet gameState = \"playing\";\r\nlet diplayingGameOverScreen = false;\r\nlet shiftPressed = false;\r\nlet recoveringFromDash = false;\r\nlet allowDashAgain = true;\r\n\r\n//Loads Blockie's sprite maps. They are large sprite maps to avoid loading many individual sprite files.\r\nlet spBlockiePlaying = document.createElement(\"img\");\r\nspBlockiePlaying.src = \"../images/spBlockiePlaying.png\";\r\n\r\nlet spBlockieDestructing = document.createElement(\"img\");\r\nspBlockieDestructing.src = \"../images/spBlockieDestructing.png\";\r\n\r\nlet spBlockieRecoveringFromDash = document.createElement(\"img\");\r\nspBlockieRecoveringFromDash.src = \"../images/spBlockieRecoveringFromDash.png\";\r\n\r\n//Arrays\r\n\r\nlet currentPromiseRejectFunctions = [];\r\nlet currentTimers = [];\r\n\r\nlet horizontalLasers = [];\r\nlet verticalLasers = [];\r\nlet bombs = [];\r\n\r\n//Classes\r\n\r\nclass Player {\r\n    constructor() {\r\n        this.width = 32;\r\n        this.height = 32;\r\n        this.spriteSideLength = 16;\r\n        this.x = canvas.width / 2 - this.width / 2;\r\n        this.y = canvas.height / 2 - this.height / 2;\r\n        this.sx = 0;\r\n        this.speed = 2;\r\n        this.angleMovingDegrees = 0;\r\n        this.angleMovingRadians = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.xSubPixel = 0;\r\n        this.ySubPixel = 0;\r\n        this.testXLocation = this.x;\r\n        this.testYLocation = this.y;\r\n        this.state = \"playing\";\r\n        this.sprite = spBlockiePlaying;\r\n    };\r\n};\r\n\r\nclass horizontalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = canvas.width;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass verticalLaser {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = canvas.height;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    };\r\n};\r\n\r\nclass bomb {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        //When created, the instance begins its warning state to provide visual feedback.\r\n        this.state = \"warning\";\r\n        this.visible = true;\r\n    }\r\n}\r\n\r\n//Functions\r\n\r\n//Level-Handling Functions\r\n\r\n//Levels are a series of obstacles and objectives that appear in specific orders and time periods using async/await.\r\nasync function levelOne() {\r\n    try {\r\n        initializeLevel(canvas.width / 2 - blockie.width / 2, canvas.height / 2 - blockie.height / 2);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(300, 16, 2),\r\n            fireHorizontalLaser(100, 16, 2),\r\n            fireVerticalLaser(100, 16, 2)\r\n        ]);\r\n\r\n        await Promise.all([\r\n            fireHorizontalLaser(100, 16, 2),\r\n            fireBomb(200, 200, 64, 64, 2)\r\n        ]);\r\n\r\n        console.log(\"Level completed.\");\r\n    } catch (error) {\r\n        console.log(\"Level restarted.\");\r\n    };\r\n};\r\n\r\n//Resets the initial values for the beginning of every level.\r\nfunction initializeLevel(blockieX, blockieY) {\r\n    blockie.x = blockieX;\r\n    blockie.y = blockieY;\r\n    colliding = false;\r\n    gameState = \"playing\";\r\n    diplayingGameOverScreen = false;\r\n    shiftPressed = false;\r\n    recoveringFromDash = false;\r\n    allowDashAgain = true;\r\n    window.requestAnimationFrame(gameLoop);\r\n};\r\n\r\n//Clears all arrays, clears the canvas, displays the game over screen, and waits to restart the current level.\r\nasync function restartLevel() {\r\n    gameState = \"restartingLevel\";\r\n\r\n    //Calls the reject function on every currently-running promise so that they stop hurting performance.\r\n    for (let i = 0; i < currentPromiseRejectFunctions.length; i++) {\r\n        currentPromiseRejectFunctions[i]();\r\n    }\r\n\r\n    //Stops all currently-running timers so that they stop hurting performance.\r\n    for (let i = 0; i < currentTimers.length; i++) {\r\n        clearTimeout(currentTimers[i]);\r\n    }\r\n\r\n    currentPromiseRejectFunctions.splice(0);\r\n    currentTimers.splice(0);\r\n\r\n    blockie.state = \"destructing\";\r\n    blockie.sx = 0;\r\n\r\n    await new Promise((resolve, reject) => {\r\n        let drawGameOverScreen = setTimeout(() => {\r\n            //Draws the game over screen.\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            document.getElementById(\"messageDisplayer\").innerHTML = \"You Are Dead.\";\r\n            resolve(\"resolved\");\r\n        }, 1.5 * 1000);\r\n    });\r\n\r\n    //Removes all references to instances from arrays.\r\n    horizontalLasers.splice(0);\r\n    verticalLasers.splice(0);\r\n    bombs.splice(0);\r\n\r\n    diplayingGameOverScreen = true;\r\n\r\n    //Restarts the game after the timer ends.\r\n    let resumeGame = setTimeout(() => {\r\n        diplayingGameOverScreen = false;\r\n        gameState = \"playing\";\r\n        blockie.state = \"playing\";\r\n        levelOne();\r\n        document.getElementById(\"messageDisplayer\").innerHTML = \"\";\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    }, 1000);\r\n};\r\n\r\n//Level-Handling Helper Functions\r\n\r\n//When the game is restarting, all currently-running timers are stopped and their code is ran. This prevents unwanted timers from \r\n//triggering after restarting (for example, lasers could be destroyed before they're supposed to).\r\nfunction controlRestartingLevel() {\r\n    if (gameState === \"restartingLevel\") {\r\n        console.log(\"Restarting level.\");\r\n    } else {\r\n        window.requestAnimationFrame(controlRestartingLevel);\r\n    };\r\n};\r\n\r\n//Adds a currently-running promise to an array so that it can be easily rejected when the game restarts.\r\nfunction addCurrentPromiseRejectFunction(promise) {\r\n    currentPromiseRejectFunctions.push(promise);\r\n};\r\n\r\n//Adds a currently-running timer to an array so that it can be easily deactivated when the game restarts.\r\nfunction addCurrentTimer(timer) {\r\n    currentTimers.push(timer);\r\n};\r\n\r\n//Removes a promise from the array of currently-running promises (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentPromiseRejectFunction(promise) {\r\n    let currentPromiseRejectFunctionIndex = currentPromiseRejectFunctions.indexOf(promise);\r\n    currentPromiseRejectFunctions.splice(currentPromiseRejectFunctionIndex, 1);\r\n};\r\n\r\n//Removes a timer from the array of currently-running timers (it's inside code is ran in the restartLevel function).\r\nfunction removeCurrentTimer(timer) {\r\n    let currentTimerIndex = currentTimers.indexOf(timer);\r\n    currentTimers.splice(currentTimerIndex, 1);\r\n};\r\n\r\n//Instance Functions\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireHorizontalLaser(y, height, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new horizontalLaser();\r\n    horizontalLasers.push(instance);\r\n    instance.y = y;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = horizontalLasers.indexOf(instance);\r\n            horizontalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireVerticalLaser(x, width, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new verticalLaser();\r\n    verticalLasers.push(instance);\r\n    instance.x = x;\r\n    instance.width = width;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = verticalLasers.indexOf(instance);\r\n            verticalLasers.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Creates an instance, adds it to an array for drawing and collisions, and controls all timing and variables.\r\nfunction fireBomb(x, y, width, height, totalSeconds) {\r\n    //Creates an instance and sets all of its key-value pairs.\r\n    let instance = new bomb();\r\n    bombs.push(instance);\r\n    instance.x = x;\r\n    instance.y = y;\r\n    instance.width = width;\r\n    instance.height = height;\r\n\r\n    //Creates the \"blinking\" effect for warning of a collision.\r\n    setWarningTimers(instance);\r\n\r\n    //Creates a timer for the instance's destruction.\r\n    return new Promise((resolve, reject) => {\r\n        let endFiring = setTimeout(() => {\r\n            //Removes the instance from all related arrays once it is \"destroyed\".\r\n            let instanceIndex = bombs.indexOf(instance);\r\n            bombs.splice(instanceIndex, 1);\r\n            removeCurrentPromiseRejectFunction(reject);\r\n            removeCurrentTimer(endFiring);\r\n\r\n            console.log(\"Promise resolved.\");\r\n            resolve(\"resolved\");\r\n        }, totalSeconds * 1000);\r\n\r\n        //Adds the instance to its deactivation arrays.\r\n        addCurrentPromiseRejectFunction(reject);\r\n        addCurrentTimer(endFiring);\r\n    });\r\n};\r\n\r\n//Sets the timers that cause the collision instance to \"blink\" 3 times before firing. Class keys are named the same among objects to \r\n//allow this function to work on all objects. All warning timers are set at the same length to allow the player to predict collisions.\r\nfunction setWarningTimers(instance) {\r\n    let warningInvisibleOne = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleOne);\r\n    }, 0.25 * 1000);\r\n    addCurrentTimer(warningInvisibleOne);\r\n\r\n    let warningVisibleTwo = setTimeout(() => {\r\n        instance.visible = true;\r\n        removeCurrentTimer(warningVisibleTwo);\r\n    }, 0.5 * 1000);\r\n    addCurrentTimer(warningVisibleTwo);\r\n\r\n    let warningInvisibleTwo = setTimeout(() => {\r\n        instance.visible = false;\r\n        removeCurrentTimer(warningInvisibleTwo);\r\n    }, 0.75 * 1000);\r\n    addCurrentTimer(warningInvisibleTwo);\r\n\r\n    let fire = setTimeout(() => {\r\n        instance.state = \"firing\";\r\n        instance.visible = true;\r\n        removeCurrentTimer(fire);\r\n    }, 1000);\r\n    addCurrentTimer(fire);\r\n}\r\n\r\n//Drawing Functions\r\n\r\nfunction drawHorizontalLasers() {\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        let currentInstance = horizontalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x + 8, currentInstance.y, 16, currentInstance.height);\r\n                context.strokeRect(currentInstance.width - 24, currentInstance.y, 16, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawVerticalLasers() {\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        let currentInstance = verticalLasers[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x, currentInstance.y + 8, currentInstance.width, 16);\r\n                context.strokeRect(currentInstance.x, currentInstance.height - 24, currentInstance.width, 16);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawBombs() {\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        let currentInstance = bombs[i];\r\n        if (currentInstance.visible) {\r\n            //Changes the sprite depending on the state of the instance.\r\n            if (currentInstance.state == \"warning\") {\r\n                context.strokeRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            } else if (currentInstance.state == \"firing\") {\r\n                context.fillRect(currentInstance.x, currentInstance.y, currentInstance.width, currentInstance.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Micellaneous Functions\r\n\r\nfunction initializeKeyInputs() {\r\n    //Adds all currently pressed keys as a keyCode with a pair of true in the KeysPressed object. .keyCode is used instead of .key so \r\n    //that capital letters can't cause unwanted movements.\r\n    document.addEventListener(\"keydown\", e => {\r\n        KeysPressed[e.keyCode] = true;\r\n    });\r\n\r\n    //Deletes all currently unpressed keys from the KeysPressed object.\r\n    document.addEventListener(\"keyup\", e => {\r\n        delete KeysPressed[e.keyCode];\r\n    });\r\n};\r\n\r\n//Determines if two instances are \"colliding\". They cannot be colliding if one is in the warning state.\r\nfunction checkSpritesColliding(instanceOne, instanceTwo) {\r\n    let xColliding = false;\r\n    let yColliding = false;\r\n\r\n    if ((instanceTwo.x <= instanceOne.x) && (instanceOne.x <= instanceTwo.x + instanceTwo.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    } else if ((instanceOne.x <= instanceTwo.x) && (instanceTwo.x <= instanceOne.x + instanceOne.width) && (instanceTwo.state !== \"warning\")) {\r\n        xColliding = true;\r\n    }\r\n\r\n    if ((instanceTwo.y <= instanceOne.y) && (instanceOne.y <= instanceTwo.y + instanceTwo.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    } else if ((instanceOne.y <= instanceTwo.y) && (instanceTwo.y <= instanceOne.y + instanceOne.height) && (instanceTwo.state !== \"warning\")) {\r\n        yColliding = true;\r\n    }\r\n\r\n    //The instances must have an overlapping area (x and y components) for there to be a collision.\r\n    if (xColliding && yColliding) {\r\n        colliding = true;\r\n    }\r\n}\r\n\r\nfunction calculateAngleRadians(x, y) {\r\n    return Math.atan2(y, x);\r\n};\r\n\r\nfunction convertRadiansToDegrees(radians) {\r\n    return radians * 180 / Math.PI;\r\n};\r\n\r\n//Game loop\r\n\r\ninitializeKeyInputs();\r\n\r\nfunction gameLoop() {\r\n    //Blockie's Movement\r\n\r\n    if (!recoveringFromDash) {\r\n        //xInput and yInput are both used to determine the angle that Blockie is moving in.\r\n        xInput = 0;\r\n        yInput = 0;\r\n\r\n        //Each key changes the angle of Blockie's movement.\r\n        if (KeysPressed[68]) {\r\n            xInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[65]) {\r\n            xInput -= 1;\r\n        };\r\n\r\n        if (KeysPressed[83]) {\r\n            yInput += 1;\r\n        };\r\n\r\n        if (KeysPressed[87]) {\r\n            yInput -= 1;\r\n        };\r\n\r\n        //Pressing shift causes Blockie to \"dash\" by increasing his speed, creating a cooldown timer, and playing a recovery animation.\r\n        if (KeysPressed[16] && allowDashAgain && (xInput !== 0 || yInput !== 0)) {\r\n            //This prevents blockie from dashing more than once for each time the Shift key is pressed.\r\n            delete KeysPressed[16];\r\n\r\n            blockie.state = \"recoveringFromDash\";\r\n            blockie.speed = 64;\r\n            recoveringFromDash = true;\r\n\r\n            let endDashRecoveryTime = 0.3;\r\n            let endDashRecovery = setTimeout(() => {\r\n                recoveringFromDash = false;\r\n                allowDashAgain = false;\r\n                blockie.state = \"playing\";\r\n                removeCurrentTimer(endDashRecovery);\r\n            }, endDashRecoveryTime * 1000);\r\n            addCurrentTimer(endDashRecovery);\r\n\r\n            let resetAllowDashAgainTime = 0.9;\r\n            let resetAllowDashAgain = setTimeout(() => {\r\n                allowDashAgain = true;\r\n                removeCurrentTimer(resetAllowDashAgain);\r\n            }, resetAllowDashAgainTime * 1000);\r\n            addCurrentTimer(resetAllowDashAgain);\r\n        } else {\r\n            blockie.speed = 2;\r\n        }\r\n\r\n        //By the way atan2() works, all -y values return negative angles; therefore, the idle state image (image 0)\r\n        //must be set at -180 degrees and all angles must be increased by 180 degrees to rotate from the top-left in a \r\n        //clockwise direction continuously.\r\n        blockie.angleMovingDegrees = -180;\r\n\r\n        if (xInput !== 0 || yInput !== 0) {\r\n            //Finds the angle that Blockie is moving in radians based on the inputs.\r\n            blockie.angleMovingRadians = calculateAngleRadians(xInput, yInput);\r\n\r\n            //Converted to make the direction of Blockie more discernible.\r\n            blockie.angleMovingDegrees = convertRadiansToDegrees(blockie.angleMovingRadians);\r\n\r\n            //blockie.speed is the hypotenuse for all directional velocities to allow for diagonal movement.\r\n            blockie.dx = Math.cos(blockie.angleMovingRadians) * blockie.speed;\r\n            blockie.dy = Math.sin(blockie.angleMovingRadians) * blockie.speed;\r\n\r\n            //The SubPixels store the directional velocity.\r\n            blockie.xSubPixel += blockie.dx;\r\n            blockie.ySubPixel += blockie.dy;\r\n\r\n            //The velocity is then floored to avoid the sprite from being on subpixel locations and being distorted.\r\n            blockie.dx = Math.floor(blockie.xSubPixel);\r\n            blockie.dy = Math.floor(blockie.ySubPixel);\r\n\r\n            //The SubPixels then store the decimal remainders so they can be added on the next step to not lose speed.\r\n            blockie.xSubPixel -= blockie.dx;\r\n            blockie.ySubPixel -= blockie.dy;\r\n\r\n            //The testLocations are where Blockie should go, but it must also be checked for collisions before he is moved.\r\n            blockie.testXLocation = blockie.x + blockie.dx;\r\n            blockie.testYLocation = blockie.y + blockie.dy;\r\n        } else {\r\n            //Accounts for possible changes in Blockie's location due to respawning or something else that isn't an input.\r\n            blockie.testXLocation = blockie.x;\r\n            blockie.testYLocation = blockie.y;\r\n        }\r\n\r\n        //Updates Blockie's location if it is not off of the canvas. If it is off of the canvas, Blockie will move towards\r\n        //the last available space to avoid a gap (the walls are in rigid locations so nothing more fancy is needed).\r\n        if (!(blockie.testXLocation <= 0 || (blockie.testXLocation + blockie.width) >= canvas.width)) {\r\n            blockie.x = blockie.testXLocation;\r\n        } else if (blockie.testXLocation <= 0) {\r\n            blockie.x = 0;\r\n        } else if ((blockie.testXLocation + blockie.width) >= canvas.width) {\r\n            blockie.x = canvas.width - blockie.width;\r\n        };\r\n\r\n        if (!(blockie.testYLocation <= 0 || (blockie.testYLocation + blockie.height) >= canvas.height)) {\r\n            blockie.y = blockie.testYLocation;\r\n        } else if (blockie.testYLocation <= 0) {\r\n            blockie.y = 0;\r\n        } else if ((blockie.testYLocation + blockie.height) >= canvas.height) {\r\n            blockie.y = canvas.height - blockie.height;\r\n        };\r\n    };\r\n\r\n\r\n    //Fail state.\r\n\r\n    //Resets the collision flag to recheck every frame.\r\n    colliding = false;\r\n\r\n    for (let i = 0; i < horizontalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, horizontalLasers[i]);\r\n    };\r\n\r\n    for (let i = 0; i < verticalLasers.length; i++) {\r\n        checkSpritesColliding(blockie, verticalLasers[i]);\r\n    };\r\n\r\n    for (let i = 0; i < bombs.length; i++) {\r\n        checkSpritesColliding(blockie, bombs[i]);\r\n    };\r\n\r\n    if (colliding) {\r\n        restartLevel();\r\n    };\r\n\r\n    //Recalls the gameLoop for the next frame.\r\n    if (gameState === \"playing\") {\r\n        window.requestAnimationFrame(gameLoop);\r\n    };\r\n};\r\n\r\n\r\n//Drawing is handled in a loop that is separate from the gameLoop because the game should still be drawn even while the game is \r\n//restarting (to draw Blockie's destructing animation).\r\nfunction drawingLoop() {\r\n    if (!diplayingGameOverScreen) {\r\n        //Clears the canvas so that it can be redrawn with updated locations, instances, and states.\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (blockie.state === \"playing\") {\r\n            blockie.sprite = spBlockiePlaying;\r\n            //sx is the location on the blockie.png sprite map. Here it determines the sprite's direction facing. It starts at the \r\n            //idle image, then goes to the top-left, and then continues in a clockwise direction.\r\n            blockie.sx = blockie.spriteSideLength * (Math.round(blockie.angleMovingDegrees / 45) + 4);\r\n        } else if (blockie.state === \"recoveringFromDash\") {\r\n            blockie.sprite = spBlockieRecoveringFromDash;\r\n            blockie.sx = 0;\r\n        } else if (blockie.state === \"destructing\") {\r\n            blockie.sprite = spBlockieDestructing;\r\n\r\n            let endAnimateBlockieDestructing = setTimeout(() => {\r\n                clearInterval(animateBlockieDestructing);\r\n                removeCurrentTimer(animateBlockieDestructing);\r\n                removeCurrentTimer(endAnimateBlockieDestructing);\r\n            }, 1.5 * 1000);\r\n            addCurrentTimer(endAnimateBlockieDestructing);\r\n\r\n            let animateBlockieDestructing = setInterval(() => {\r\n                blockie.sx += blockie.spriteSideLength;\r\n            }, 0.5 * 1000);\r\n            addCurrentTimer(animateBlockieDestructing);\r\n        };\r\n\r\n        drawHorizontalLasers();\r\n        drawVerticalLasers();\r\n        drawBombs();\r\n\r\n        //Blockie is drawn last to appear over other instances when being destroyed.\r\n        context.drawImage(blockie.sprite, blockie.sx, 0, blockie.spriteSideLength, blockie.spriteSideLength, blockie.x, blockie.y, blockie.width, blockie.height);\r\n    }\r\n\r\n    window.requestAnimationFrame(drawingLoop);\r\n};\r\n\r\n//Game Start\r\n\r\nlet blockie = new Player();\r\nlevelOne();\r\n\r\nwindow.requestAnimationFrame(drawingLoop);\r\nwindow.requestAnimationFrame(controlRestartingLevel);"]}